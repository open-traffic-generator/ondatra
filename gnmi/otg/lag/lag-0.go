/*
Package lag is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.4.0: (ygot: v0.25.2)
using the following YANG input files:
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package lag

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lag_InRatePath represents the /open-traffic-generator-lag/lags/lag/state/in-rate YANG schema element.
type Lag_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_InRatePathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/in-rate YANG schema element.
type Lag_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *LagPath) State() ygnmi.SingletonQuery[*oc.Lag] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Lag](
		"Lag",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *LagPathAny) State() ygnmi.WildcardQuery[*oc.Lag] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Lag](
		"Lag",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/lags/lag/state/in-rate"
func (n *Lag_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Lag).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/lags/lag/state/in-rate"
func (n *Lag_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Lag).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/name"
//	Path from root:       "/lags/lag/state/name"
func (n *Lag_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"Lag",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lag).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/name"
//	Path from root:       "/lags/lag/state/name"
func (n *Lag_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Lag",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lag).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lag_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"Lag",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lag).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Lag_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Lag",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Lag).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/lags/lag/state/oper-status"
func (n *Lag_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_Lag_OperStatus] {
	return ygnmi.NewLeafSingletonQuery[oc.E_Lag_OperStatus](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lag_OperStatus, bool) {
			ret := gs.(*oc.Lag).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/lags/lag/state/oper-status"
func (n *Lag_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Lag_OperStatus] {
	return ygnmi.NewLeafWildcardQuery[oc.E_Lag_OperStatus](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lag_OperStatus, bool) {
			ret := gs.(*oc.Lag).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/lags/lag/state/out-rate"
func (n *Lag_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Lag).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/lags/lag/state/out-rate"
func (n *Lag_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Lag",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Lag).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Lag_NamePath represents the /open-traffic-generator-lag/lags/lag/state/name YANG schema element.
type Lag_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_NamePathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/name YANG schema element.
type Lag_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_OperStatusPath represents the /open-traffic-generator-lag/lags/lag/state/oper-status YANG schema element.
type Lag_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_OperStatusPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/oper-status YANG schema element.
type Lag_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_OutRatePath represents the /open-traffic-generator-lag/lags/lag/state/out-rate YANG schema element.
type Lag_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_OutRatePathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/out-rate YANG schema element.
type Lag_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// LagPath represents the /open-traffic-generator-lag/lags/lag YANG schema element.
type LagPath struct {
	*ygnmi.NodePath
}

// LagPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag YANG schema element.
type LagPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an OTG LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/counters"
//	Path from root:       "/lags/lag/state/counters"
func (n *LagPath) Counters() *Lag_CountersPath {
	return &Lag_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters of an OTG LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/counters"
//	Path from root:       "/lags/lag/state/counters"
func (n *LagPathAny) Counters() *Lag_CountersPathAny {
	return &Lag_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// InRate (leaf): The current receive rate of an OTG LAG, measured in
// bits per second.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/lags/lag/state/in-rate"
func (n *LagPath) InRate() *Lag_InRatePath {
	return &Lag_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InRate (leaf): The current receive rate of an OTG LAG, measured in
// bits per second.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/lags/lag/state/in-rate"
func (n *LagPathAny) InRate() *Lag_InRatePathAny {
	return &Lag_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): An arbitary name of an OTG LAG determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "*/name"
//	Path from root:       "/lags/lag/*/name"
func (n *LagPath) Name() *Lag_NamePath {
	return &Lag_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): An arbitary name of an OTG LAG determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "*/name"
//	Path from root:       "/lags/lag/*/name"
func (n *LagPathAny) Name() *Lag_NamePathAny {
	return &Lag_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OperStatus (leaf): The current operational state of an OTG LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/lags/lag/state/oper-status"
func (n *LagPath) OperStatus() *Lag_OperStatusPath {
	return &Lag_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OperStatus (leaf): The current operational state of an OTG LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/lags/lag/state/oper-status"
func (n *LagPathAny) OperStatus() *Lag_OperStatusPathAny {
	return &Lag_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutRate (leaf): The current transmit rate of an OTG LAG, measured in
// bits per second.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/lags/lag/state/out-rate"
func (n *LagPath) OutRate() *Lag_OutRatePath {
	return &Lag_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutRate (leaf): The current transmit rate of an OTG LAG, measured in
// bits per second.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/lags/lag/state/out-rate"
func (n *LagPathAny) OutRate() *Lag_OutRatePathAny {
	return &Lag_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Lag_Counters_InFramesPath represents the /open-traffic-generator-lag/lags/lag/state/counters/in-frames YANG schema element.
type Lag_Counters_InFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_InFramesPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters/in-frames YANG schema element.
type Lag_Counters_InFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *Lag_CountersPath) State() ygnmi.SingletonQuery[*oc.Lag_Counters] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Lag_Counters](
		"Lag_Counters",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Lag_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Lag_Counters] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Lag_Counters](
		"Lag_Counters",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-frames"
//	Path from root:       "/lags/lag/state/counters/in-frames"
func (n *Lag_Counters_InFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).InFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-frames"
//	Path from root:       "/lags/lag/state/counters/in-frames"
func (n *Lag_Counters_InFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).InFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-octets"
//	Path from root:       "/lags/lag/state/counters/in-octets"
func (n *Lag_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-octets"
//	Path from root:       "/lags/lag/state/counters/in-octets"
func (n *Lag_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "member-ports-up"
//	Path from root:       "/lags/lag/state/counters/member-ports-up"
func (n *Lag_Counters_MemberPortsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"member-ports-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).MemberPortsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "member-ports-up"
//	Path from root:       "/lags/lag/state/counters/member-ports-up"
func (n *Lag_Counters_MemberPortsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"member-ports-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).MemberPortsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-frames"
//	Path from root:       "/lags/lag/state/counters/out-frames"
func (n *Lag_Counters_OutFramesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).OutFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-frames"
//	Path from root:       "/lags/lag/state/counters/out-frames"
func (n *Lag_Counters_OutFramesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-frames"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).OutFrames
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-octets"
//	Path from root:       "/lags/lag/state/counters/out-octets"
func (n *Lag_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-octets"
//	Path from root:       "/lags/lag/state/counters/out-octets"
func (n *Lag_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Lag_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Lag_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Lag_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Lag_Counters_InOctetsPath represents the /open-traffic-generator-lag/lags/lag/state/counters/in-octets YANG schema element.
type Lag_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_InOctetsPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters/in-octets YANG schema element.
type Lag_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_MemberPortsUpPath represents the /open-traffic-generator-lag/lags/lag/state/counters/member-ports-up YANG schema element.
type Lag_Counters_MemberPortsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_MemberPortsUpPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters/member-ports-up YANG schema element.
type Lag_Counters_MemberPortsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_OutFramesPath represents the /open-traffic-generator-lag/lags/lag/state/counters/out-frames YANG schema element.
type Lag_Counters_OutFramesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_OutFramesPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters/out-frames YANG schema element.
type Lag_Counters_OutFramesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_OutOctetsPath represents the /open-traffic-generator-lag/lags/lag/state/counters/out-octets YANG schema element.
type Lag_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_Counters_OutOctetsPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters/out-octets YANG schema element.
type Lag_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Lag_CountersPath represents the /open-traffic-generator-lag/lags/lag/state/counters YANG schema element.
type Lag_CountersPath struct {
	*ygnmi.NodePath
}

// Lag_CountersPathAny represents the wildcard version of the /open-traffic-generator-lag/lags/lag/state/counters YANG schema element.
type Lag_CountersPathAny struct {
	*ygnmi.NodePath
}

// InFrames (leaf): The total number of packets received on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-frames"
//	Path from root:       "/lags/lag/state/counters/in-frames"
func (n *Lag_CountersPath) InFrames() *Lag_Counters_InFramesPath {
	return &Lag_Counters_InFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InFrames (leaf): The total number of packets received on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-frames"
//	Path from root:       "/lags/lag/state/counters/in-frames"
func (n *Lag_CountersPathAny) InFrames() *Lag_Counters_InFramesPathAny {
	return &Lag_Counters_InFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InOctets (leaf): The total number of octets received on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-octets"
//	Path from root:       "/lags/lag/state/counters/in-octets"
func (n *Lag_CountersPath) InOctets() *Lag_Counters_InOctetsPath {
	return &Lag_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InOctets (leaf): The total number of octets received on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "in-octets"
//	Path from root:       "/lags/lag/state/counters/in-octets"
func (n *Lag_CountersPathAny) InOctets() *Lag_Counters_InOctetsPathAny {
	return &Lag_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// MemberPortsUp (leaf): The current *-number of member ports on the LAG in UP state.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "member-ports-up"
//	Path from root:       "/lags/lag/state/counters/member-ports-up"
func (n *Lag_CountersPath) MemberPortsUp() *Lag_Counters_MemberPortsUpPath {
	return &Lag_Counters_MemberPortsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"member-ports-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// MemberPortsUp (leaf): The current *-number of member ports on the LAG in UP state.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "member-ports-up"
//	Path from root:       "/lags/lag/state/counters/member-ports-up"
func (n *Lag_CountersPathAny) MemberPortsUp() *Lag_Counters_MemberPortsUpPathAny {
	return &Lag_Counters_MemberPortsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"member-ports-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutFrames (leaf): The total number of packets transmitted on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-frames"
//	Path from root:       "/lags/lag/state/counters/out-frames"
func (n *Lag_CountersPath) OutFrames() *Lag_Counters_OutFramesPath {
	return &Lag_Counters_OutFramesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutFrames (leaf): The total number of packets transmitted on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-frames"
//	Path from root:       "/lags/lag/state/counters/out-frames"
func (n *Lag_CountersPathAny) OutFrames() *Lag_Counters_OutFramesPathAny {
	return &Lag_Counters_OutFramesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-frames"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutOctets (leaf): The total number of octets transmitted on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-octets"
//	Path from root:       "/lags/lag/state/counters/out-octets"
func (n *Lag_CountersPath) OutOctets() *Lag_Counters_OutOctetsPath {
	return &Lag_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutOctets (leaf): The total number of octets transmitted on the LAG.
//
//	Defining module:      "open-traffic-generator-lag"
//	Instantiating module: "open-traffic-generator-lag"
//	Path from parent:     "out-octets"
//	Path from root:       "/lags/lag/state/counters/out-octets"
func (n *Lag_CountersPathAny) OutOctets() *Lag_Counters_OutOctetsPathAny {
	return &Lag_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
