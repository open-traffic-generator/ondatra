/*
Package bmpserver is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.20)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/dhcp/v4client/open-traffic-generator-dhcpv4client.yang
  - models-yang/models/dhcp/v4server/open-traffic-generator-dhcpv4server.yang
  - models-yang/models/dhcp/v6client/open-traffic-generator-dhcpv6client.yang
  - models-yang/models/dhcp/v6server/open-traffic-generator-dhcpv6server.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/ospfv2/open-traffic-generator-ospfv2.yang
  - models-yang/models/ospfv3/open-traffic-generator-ospfv3.yang
  - models-yang/models/platform/open-traffic-generator-platform.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/bmp-server/open-traffic-generator-bmp-server.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package bmpserver

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// BmpServer_NamePath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/name YANG schema element.
type BmpServer_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_NamePathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/name YANG schema element.
type BmpServer_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/name"
//	Path from root:       "/bmp-servers/bmp-server/state/name"
func (n *BmpServer_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BmpServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BmpServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/name"
//	Path from root:       "/bmp-servers/bmp-server/state/name"
func (n *BmpServer_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BmpServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BmpServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *BmpServer_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"BmpServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BmpServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *BmpServer_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BmpServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BmpServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_SessionStatePath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/session-state YANG schema element.
type BmpServer_SessionStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_SessionStatePathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/session-state YANG schema element.
type BmpServer_SessionStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bmp-servers/bmp-server/state/session-state"
func (n *BmpServer_SessionStatePath) State() ygnmi.SingletonQuery[oc.E_BmpServer_SessionState] {
	return ygnmi.NewSingletonQuery[oc.E_BmpServer_SessionState](
		"BmpServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BmpServer_SessionState, bool) {
			ret := gs.(*oc.BmpServer).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bmp-servers/bmp-server/state/session-state"
func (n *BmpServer_SessionStatePathAny) State() ygnmi.WildcardQuery[oc.E_BmpServer_SessionState] {
	return ygnmi.NewWildcardQuery[oc.E_BmpServer_SessionState](
		"BmpServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BmpServer_SessionState, bool) {
			ret := gs.(*oc.BmpServer).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServerPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server YANG schema element.
type BmpServerPath struct {
	*ygnmi.NodePath
}

// BmpServerPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server YANG schema element.
type BmpServerPathAny struct {
	*ygnmi.NodePath
}

// BmpServerPathMap represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server YANG schema element.
type BmpServerPathMap struct {
	*ygnmi.NodePath
}

// BmpServerPathMapAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server YANG schema element.
type BmpServerPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual bmp-server.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/counters"
//	Path from root:       "/bmp-servers/bmp-server/state/counters"
func (n *BmpServerPath) Counters() *BmpServer_CountersPath {
	ps := &BmpServer_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual bmp-server.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/counters"
//	Path from root:       "/bmp-servers/bmp-server/state/counters"
func (n *BmpServerPathAny) Counters() *BmpServer_CountersPathAny {
	ps := &BmpServer_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitrary name of the bmp-server determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "*/name"
//	Path from root:       "/bmp-servers/bmp-server/*/name"
func (n *BmpServerPath) Name() *BmpServer_NamePath {
	ps := &BmpServer_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitrary name of the bmp-server determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "*/name"
//	Path from root:       "/bmp-servers/bmp-server/*/name"
func (n *BmpServerPathAny) Name() *BmpServer_NamePathAny {
	ps := &BmpServer_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational state of the bmp-server
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bmp-servers/bmp-server/state/session-state"
func (n *BmpServerPath) SessionState() *BmpServer_SessionStatePath {
	ps := &BmpServer_SessionStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational state of the bmp-server
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bmp-servers/bmp-server/state/session-state"
func (n *BmpServerPathAny) SessionState() *BmpServer_SessionStatePathAny {
	ps := &BmpServer_SessionStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *BmpServerPath) State() ygnmi.SingletonQuery[*oc.BmpServer] {
	return ygnmi.NewSingletonQuery[*oc.BmpServer](
		"BmpServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BmpServerPathAny) State() ygnmi.WildcardQuery[*oc.BmpServer] {
	return ygnmi.NewWildcardQuery[*oc.BmpServer](
		"BmpServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_FlapsPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/flaps YANG schema element.
type BmpServer_Counters_FlapsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_FlapsPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/flaps YANG schema element.
type BmpServer_Counters_FlapsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "flaps"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/flaps"
func (n *BmpServer_Counters_FlapsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).Flaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "flaps"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/flaps"
func (n *BmpServer_Counters_FlapsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).Flaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_InitiationMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/initiation-messages-received YANG schema element.
type BmpServer_Counters_InitiationMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_InitiationMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/initiation-messages-received YANG schema element.
type BmpServer_Counters_InitiationMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "initiation-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/initiation-messages-received"
func (n *BmpServer_Counters_InitiationMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"initiation-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).InitiationMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "initiation-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/initiation-messages-received"
func (n *BmpServer_Counters_InitiationMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"initiation-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).InitiationMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_PeerDownMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/peer-down-messages-received YANG schema element.
type BmpServer_Counters_PeerDownMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_PeerDownMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/peer-down-messages-received YANG schema element.
type BmpServer_Counters_PeerDownMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-down-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-down-messages-received"
func (n *BmpServer_Counters_PeerDownMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-down-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).PeerDownMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-down-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-down-messages-received"
func (n *BmpServer_Counters_PeerDownMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-down-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).PeerDownMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_PeerUpMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/peer-up-messages-received YANG schema element.
type BmpServer_Counters_PeerUpMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_PeerUpMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/peer-up-messages-received YANG schema element.
type BmpServer_Counters_PeerUpMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-up-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-up-messages-received"
func (n *BmpServer_Counters_PeerUpMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-up-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).PeerUpMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-up-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-up-messages-received"
func (n *BmpServer_Counters_PeerUpMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-up-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).PeerUpMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_RouteMirroringMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received YANG schema element.
type BmpServer_Counters_RouteMirroringMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_RouteMirroringMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received YANG schema element.
type BmpServer_Counters_RouteMirroringMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-mirroring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received"
func (n *BmpServer_Counters_RouteMirroringMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"route-mirroring-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).RouteMirroringMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-mirroring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received"
func (n *BmpServer_Counters_RouteMirroringMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"route-mirroring-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).RouteMirroringMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_RouteMonitoringMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received YANG schema element.
type BmpServer_Counters_RouteMonitoringMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_RouteMonitoringMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received YANG schema element.
type BmpServer_Counters_RouteMonitoringMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-monitoring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received"
func (n *BmpServer_Counters_RouteMonitoringMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"route-monitoring-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).RouteMonitoringMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-monitoring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received"
func (n *BmpServer_Counters_RouteMonitoringMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"route-monitoring-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).RouteMonitoringMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_StatisticsMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/statistics-messages-received YANG schema element.
type BmpServer_Counters_StatisticsMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_StatisticsMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/statistics-messages-received YANG schema element.
type BmpServer_Counters_StatisticsMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "statistics-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/statistics-messages-received"
func (n *BmpServer_Counters_StatisticsMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"statistics-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).StatisticsMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "statistics-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/statistics-messages-received"
func (n *BmpServer_Counters_StatisticsMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"statistics-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).StatisticsMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_Counters_TerminationMessagesReceivedPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/termination-messages-received YANG schema element.
type BmpServer_Counters_TerminationMessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BmpServer_Counters_TerminationMessagesReceivedPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters/termination-messages-received YANG schema element.
type BmpServer_Counters_TerminationMessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "termination-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/termination-messages-received"
func (n *BmpServer_Counters_TerminationMessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"termination-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).TerminationMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "termination-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/termination-messages-received"
func (n *BmpServer_Counters_TerminationMessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BmpServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"termination-messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BmpServer_Counters).TerminationMessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BmpServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BmpServer_CountersPath represents the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters YANG schema element.
type BmpServer_CountersPath struct {
	*ygnmi.NodePath
}

// BmpServer_CountersPathAny represents the wildcard version of the /open-traffic-generator-bmp-server/bmp-servers/bmp-server/state/counters YANG schema element.
type BmpServer_CountersPathAny struct {
	*ygnmi.NodePath
}

// Flaps (leaf): The total number of times the BMP session with the BMP client went from 'UP' to 'DOWN' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "flaps"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/flaps"
func (n *BmpServer_CountersPath) Flaps() *BmpServer_Counters_FlapsPath {
	ps := &BmpServer_Counters_FlapsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flaps (leaf): The total number of times the BMP session with the BMP client went from 'UP' to 'DOWN' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "flaps"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/flaps"
func (n *BmpServer_CountersPathAny) Flaps() *BmpServer_Counters_FlapsPathAny {
	ps := &BmpServer_Counters_FlapsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InitiationMessagesReceived (leaf): The total number of BMP Initiation Messages received from the BMP client.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "initiation-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/initiation-messages-received"
func (n *BmpServer_CountersPath) InitiationMessagesReceived() *BmpServer_Counters_InitiationMessagesReceivedPath {
	ps := &BmpServer_Counters_InitiationMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"initiation-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InitiationMessagesReceived (leaf): The total number of BMP Initiation Messages received from the BMP client.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "initiation-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/initiation-messages-received"
func (n *BmpServer_CountersPathAny) InitiationMessagesReceived() *BmpServer_Counters_InitiationMessagesReceivedPathAny {
	ps := &BmpServer_Counters_InitiationMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"initiation-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerDownMessagesReceived (leaf): The total number of BMP Peer Down Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-down-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-down-messages-received"
func (n *BmpServer_CountersPath) PeerDownMessagesReceived() *BmpServer_Counters_PeerDownMessagesReceivedPath {
	ps := &BmpServer_Counters_PeerDownMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"peer-down-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerDownMessagesReceived (leaf): The total number of BMP Peer Down Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-down-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-down-messages-received"
func (n *BmpServer_CountersPathAny) PeerDownMessagesReceived() *BmpServer_Counters_PeerDownMessagesReceivedPathAny {
	ps := &BmpServer_Counters_PeerDownMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"peer-down-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerUpMessagesReceived (leaf): The total number of BMP Peer Up Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-up-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-up-messages-received"
func (n *BmpServer_CountersPath) PeerUpMessagesReceived() *BmpServer_Counters_PeerUpMessagesReceivedPath {
	ps := &BmpServer_Counters_PeerUpMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"peer-up-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerUpMessagesReceived (leaf): The total number of BMP Peer Up Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "peer-up-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/peer-up-messages-received"
func (n *BmpServer_CountersPathAny) PeerUpMessagesReceived() *BmpServer_Counters_PeerUpMessagesReceivedPathAny {
	ps := &BmpServer_Counters_PeerUpMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"peer-up-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteMirroringMessagesReceived (leaf): The total number of BMP Route Mirroring Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-mirroring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received"
func (n *BmpServer_CountersPath) RouteMirroringMessagesReceived() *BmpServer_Counters_RouteMirroringMessagesReceivedPath {
	ps := &BmpServer_Counters_RouteMirroringMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-mirroring-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteMirroringMessagesReceived (leaf): The total number of BMP Route Mirroring Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-mirroring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-mirroring-messages-received"
func (n *BmpServer_CountersPathAny) RouteMirroringMessagesReceived() *BmpServer_Counters_RouteMirroringMessagesReceivedPathAny {
	ps := &BmpServer_Counters_RouteMirroringMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-mirroring-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteMonitoringMessagesReceived (leaf): The total number of BMP Route Monitoring Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-monitoring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received"
func (n *BmpServer_CountersPath) RouteMonitoringMessagesReceived() *BmpServer_Counters_RouteMonitoringMessagesReceivedPath {
	ps := &BmpServer_Counters_RouteMonitoringMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-monitoring-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteMonitoringMessagesReceived (leaf): The total number of BMP Route Monitoring Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "route-monitoring-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/route-monitoring-messages-received"
func (n *BmpServer_CountersPathAny) RouteMonitoringMessagesReceived() *BmpServer_Counters_RouteMonitoringMessagesReceivedPathAny {
	ps := &BmpServer_Counters_RouteMonitoringMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-monitoring-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StatisticsMessagesReceived (leaf): The total number of BMP Route Statistics Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "statistics-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/statistics-messages-received"
func (n *BmpServer_CountersPath) StatisticsMessagesReceived() *BmpServer_Counters_StatisticsMessagesReceivedPath {
	ps := &BmpServer_Counters_StatisticsMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"statistics-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StatisticsMessagesReceived (leaf): The total number of BMP Route Statistics Messages received from the BMP client from the time the BMP session last went to 'UP' state.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "statistics-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/statistics-messages-received"
func (n *BmpServer_CountersPathAny) StatisticsMessagesReceived() *BmpServer_Counters_StatisticsMessagesReceivedPathAny {
	ps := &BmpServer_Counters_StatisticsMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"statistics-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TerminationMessagesReceived (leaf): The total number of BMP Termination Messages received from the BMP client.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "termination-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/termination-messages-received"
func (n *BmpServer_CountersPath) TerminationMessagesReceived() *BmpServer_Counters_TerminationMessagesReceivedPath {
	ps := &BmpServer_Counters_TerminationMessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"termination-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TerminationMessagesReceived (leaf): The total number of BMP Termination Messages received from the BMP client.
//
//	Defining module:      "open-traffic-generator-bmp-server"
//	Instantiating module: "open-traffic-generator-bmp-server"
//	Path from parent:     "termination-messages-received"
//	Path from root:       "/bmp-servers/bmp-server/state/counters/termination-messages-received"
func (n *BmpServer_CountersPathAny) TerminationMessagesReceived() *BmpServer_Counters_TerminationMessagesReceivedPathAny {
	ps := &BmpServer_Counters_TerminationMessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"termination-messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *BmpServer_CountersPath) State() ygnmi.SingletonQuery[*oc.BmpServer_Counters] {
	return ygnmi.NewSingletonQuery[*oc.BmpServer_Counters](
		"BmpServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BmpServer_CountersPathAny) State() ygnmi.WildcardQuery[*oc.BmpServer_Counters] {
	return ygnmi.NewWildcardQuery[*oc.BmpServer_Counters](
		"BmpServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
