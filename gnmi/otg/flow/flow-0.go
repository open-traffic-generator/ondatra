/*
Package flow is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.4.0: (ygot: v0.25.2)
using the following YANG input files:
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package flow

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Flow_InFrameRatePath represents the /open-traffic-generator-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_InFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/in-frame-rate YANG schema element.
type Flow_InFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPath) State() ygnmi.SingletonQuery[*oc.Flow] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Flow](
		"Flow",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *FlowPathAny) State() ygnmi.WildcardQuery[*oc.Flow] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Flow](
		"Flow",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *Flow_InFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *Flow_InFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *Flow_InRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *Flow_InRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).InRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *Flow_LossPctPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *Flow_LossPctPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).LossPct
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/state/name"
func (n *Flow_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"Flow",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/name"
//	Path from root:       "/flows/flow/state/name"
func (n *Flow_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Flow",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Flow_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"Flow",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Flow_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Flow",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Flow).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *Flow_OutFrameRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *Flow_OutFrameRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutFrameRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *Flow_OutRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewLeafSingletonQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *Flow_OutRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewLeafWildcardQuery[float32](
		"Flow",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.Flow).OutRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/transmit"
//	Path from root:       "/flows/flow/state/transmit"
func (n *Flow_TransmitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewLeafSingletonQuery[bool](
		"Flow",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Flow).Transmit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/transmit"
//	Path from root:       "/flows/flow/state/transmit"
func (n *Flow_TransmitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewLeafWildcardQuery[bool](
		"Flow",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "transmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Flow).Transmit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Flow_InRatePath represents the /open-traffic-generator-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_InRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/in-rate YANG schema element.
type Flow_InRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_LossPctPath represents the /open-traffic-generator-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_LossPctPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/loss-pct YANG schema element.
type Flow_LossPctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_NamePath represents the /open-traffic-generator-flow/flows/flow/state/name YANG schema element.
type Flow_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_NamePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/name YANG schema element.
type Flow_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutFrameRatePath represents the /open-traffic-generator-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutFrameRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/out-frame-rate YANG schema element.
type Flow_OutFrameRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutRatePath represents the /open-traffic-generator-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_OutRatePathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/out-rate YANG schema element.
type Flow_OutRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_TransmitPath represents the /open-traffic-generator-flow/flows/flow/state/transmit YANG schema element.
type Flow_TransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_TransmitPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/transmit YANG schema element.
type Flow_TransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// FlowPath represents the /open-traffic-generator-flow/flows/flow YANG schema element.
type FlowPath struct {
	*ygnmi.NodePath
}

// FlowPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow YANG schema element.
type FlowPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters that correspond to the individual flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/state/counters"
func (n *FlowPath) Counters() *Flow_CountersPath {
	return &Flow_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters that correspond to the individual flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/counters"
//	Path from root:       "/flows/flow/state/counters"
func (n *FlowPathAny) Counters() *Flow_CountersPathAny {
	return &Flow_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *FlowPath) InFrameRate() *Flow_InFrameRatePath {
	return &Flow_InFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// received for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-frame-rate"
//	Path from root:       "/flows/flow/state/in-frame-rate"
func (n *FlowPathAny) InFrameRate() *Flow_InFrameRatePathAny {
	return &Flow_InFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *FlowPath) InRate() *Flow_InRatePath {
	return &Flow_InRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InRate (leaf): The rate, measured in bits per second, at which the flow is being
// received.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/in-rate"
//	Path from root:       "/flows/flow/state/in-rate"
func (n *FlowPathAny) InRate() *Flow_InRatePathAny {
	return &Flow_InRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *FlowPath) LossPct() *Flow_LossPctPath {
	return &Flow_LossPctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// LossPct (leaf): The percentage of transmitted packets that were not received by the
// destinations of the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/loss-pct"
//	Path from root:       "/flows/flow/state/loss-pct"
func (n *FlowPathAny) LossPct() *Flow_LossPctPathAny {
	return &Flow_LossPctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loss-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "*/name"
//	Path from root:       "/flows/flow/*/name"
func (n *FlowPath) Name() *Flow_NamePath {
	return &Flow_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): An arbitary name used for the flow tracked by the system. This
// name must be unique for the flows tracked and exported by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "*/name"
//	Path from root:       "/flows/flow/*/name"
func (n *FlowPathAny) Name() *Flow_NamePathAny {
	return &Flow_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *FlowPath) OutFrameRate() *Flow_OutFrameRatePath {
	return &Flow_OutFrameRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutFrameRate (leaf): The rate, measured in frames per second, at which frames are being
// transmitted for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-frame-rate"
//	Path from root:       "/flows/flow/state/out-frame-rate"
func (n *FlowPathAny) OutFrameRate() *Flow_OutFrameRatePathAny {
	return &Flow_OutFrameRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-frame-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *FlowPath) OutRate() *Flow_OutRatePath {
	return &Flow_OutRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutRate (leaf): The rate, measured in bits per second, at which the flow is being
// transmitted.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/out-rate"
//	Path from root:       "/flows/flow/state/out-rate"
func (n *FlowPathAny) OutRate() *Flow_OutRatePathAny {
	return &Flow_OutRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Transmit (leaf): Whether or not the flow is transmitting
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/transmit"
//	Path from root:       "/flows/flow/state/transmit"
func (n *FlowPath) Transmit() *Flow_TransmitPath {
	return &Flow_TransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Transmit (leaf): Whether or not the flow is transmitting
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "state/transmit"
//	Path from root:       "/flows/flow/state/transmit"
func (n *FlowPathAny) Transmit() *Flow_TransmitPathAny {
	return &Flow_TransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "transmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Flow_Counters_InOctetsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_InOctetsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/in-octets YANG schema element.
type Flow_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_CountersPath) State() ygnmi.SingletonQuery[*oc.Flow_Counters] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Flow_Counters](
		"Flow_Counters",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Flow_CountersPathAny) State() ygnmi.WildcardQuery[*oc.Flow_Counters] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Flow_Counters](
		"Flow_Counters",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Flow_Counters",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Flow_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Flow_Counters) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Flow_Counters_InPktsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_InPktsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/in-pkts YANG schema element.
type Flow_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutOctetsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutOctetsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/out-octets YANG schema element.
type Flow_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutPktsPath represents the /open-traffic-generator-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_Counters_OutPktsPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters/out-pkts YANG schema element.
type Flow_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Flow_CountersPath represents the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPath struct {
	*ygnmi.NodePath
}

// Flow_CountersPathAny represents the wildcard version of the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_CountersPathAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPath) InOctets() *Flow_Counters_InOctetsPath {
	return &Flow_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InOctets (leaf): The total number of bytes received by the target for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-octets"
//	Path from root:       "/flows/flow/state/counters/in-octets"
func (n *Flow_CountersPathAny) InOctets() *Flow_Counters_InOctetsPathAny {
	return &Flow_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPath) InPkts() *Flow_Counters_InPktsPath {
	return &Flow_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPkts (leaf): The total number of packets received by the target for the flow.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "in-pkts"
//	Path from root:       "/flows/flow/state/counters/in-pkts"
func (n *Flow_CountersPathAny) InPkts() *Flow_Counters_InPktsPathAny {
	return &Flow_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPath) OutOctets() *Flow_Counters_OutOctetsPath {
	return &Flow_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutOctets (leaf): The total number of bytes sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-octets"
//	Path from root:       "/flows/flow/state/counters/out-octets"
func (n *Flow_CountersPathAny) OutOctets() *Flow_Counters_OutOctetsPathAny {
	return &Flow_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPath) OutPkts() *Flow_Counters_OutPktsPath {
	return &Flow_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPkts (leaf): The total number of packets sent by the target for the flow. These
// packets may be generated or forwarded by the target.
//
//	Defining module:      "open-traffic-generator-flow"
//	Instantiating module: "open-traffic-generator-flow"
//	Path from parent:     "out-pkts"
//	Path from root:       "/flows/flow/state/counters/out-pkts"
func (n *Flow_CountersPathAny) OutPkts() *Flow_Counters_OutPktsPathAny {
	return &Flow_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
