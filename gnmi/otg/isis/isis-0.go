//go:build go1.18

/*
Package isis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.1.0: (ygot: v0.23.1)
using the following YANG input files:
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/bgp/open-traffic-generator-bgp.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package isis

import (
	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// IsisRouter_NamePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/name YANG schema element.
type IsisRouter_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_NamePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/name YANG schema element.
type IsisRouter_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouterPath) State() ygnmi.SingletonQuery[*oc.IsisRouter] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.IsisRouter](
		"IsisRouter",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouterPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.IsisRouter](
		"IsisRouter",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/name"
//	Path from root:       "/isis-routers/isis-router/state/name"
func (n *IsisRouter_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"IsisRouter",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/name"
//	Path from root:       "/isis-routers/isis-router/state/name"
func (n *IsisRouter_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"IsisRouter",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *IsisRouter_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"IsisRouter",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *IsisRouter_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"IsisRouter",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.IsisRouter).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// IsisRouterPath represents the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPath struct {
	*ygnmi.NodePath
}

// IsisRouterPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router YANG schema element.
type IsisRouterPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Level counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/counters"
//	Path from root:       "/isis-routers/isis-router/state/counters"
func (n *IsisRouterPath) Counters() *IsisRouter_CountersPath {
	return &IsisRouter_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Level counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "state/counters"
//	Path from root:       "/isis-routers/isis-router/state/counters"
func (n *IsisRouterPathAny) Counters() *IsisRouter_CountersPathAny {
	return &IsisRouter_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An arbitary name of the ISIS router determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/name"
//	Path from root:       "/isis-routers/isis-router/*/name"
func (n *IsisRouterPath) Name() *IsisRouter_NamePath {
	return &IsisRouter_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): An arbitary name of the ISIS router determined by the OTG
// configuration.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "*/name"
//	Path from root:       "/isis-routers/isis-router/*/name"
func (n *IsisRouterPathAny) Name() *IsisRouter_NamePathAny {
	return &IsisRouter_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// IsisRouter_CountersPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_CountersPath struct {
	*ygnmi.NodePath
}

// IsisRouter_CountersPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_CountersPathAny struct {
	*ygnmi.NodePath
}

// Level1 (container): Level1 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level1"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1"
func (n *IsisRouter_CountersPath) Level1() *IsisRouter_Counters_Level1Path {
	return &IsisRouter_Counters_Level1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Level1 (container): Level1 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level1"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1"
func (n *IsisRouter_CountersPathAny) Level1() *IsisRouter_Counters_Level1PathAny {
	return &IsisRouter_Counters_Level1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Level2 (container): Level2 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level2"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2"
func (n *IsisRouter_CountersPath) Level2() *IsisRouter_Counters_Level2Path {
	return &IsisRouter_Counters_Level2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Level2 (container): Level2 counters of the ISIS router.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "level2"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2"
func (n *IsisRouter_CountersPathAny) Level2() *IsisRouter_Counters_Level2PathAny {
	return &IsisRouter_Counters_Level2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2"},
			map[string]interface{}{},
			n,
		),
	}
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_CountersPath) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.IsisRouter_Counters](
		"IsisRouter_Counters",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_CountersPathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.IsisRouter_Counters](
		"IsisRouter_Counters",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// IsisRouter_Counters_Level1_DatabaseSizePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/database-size YANG schema element.
type IsisRouter_Counters_Level1_DatabaseSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_DatabaseSizePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/database-size YANG schema element.
type IsisRouter_Counters_Level1_DatabaseSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level1Path) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters_Level1] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.IsisRouter_Counters_Level1](
		"IsisRouter_Counters_Level1",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level1PathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters_Level1] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.IsisRouter_Counters_Level1](
		"IsisRouter_Counters_Level1",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1_DatabaseSizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1_DatabaseSizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1_InBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1_InBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1_InCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1_InCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1_InLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1_InLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1_InP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1_InP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1_InPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1_InPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1_OutBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1_OutBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1_OutCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1_OutCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1_OutLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1_OutLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1_OutP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1_OutP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1_OutPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1_OutPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1_SessionsFlapPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1_SessionsFlapPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1_SessionsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1_SessionsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level1",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level1).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level1) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// IsisRouter_Counters_Level1_InBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_InBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_InBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-csnp YANG schema element.
type IsisRouter_Counters_Level1_InCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-csnp YANG schema element.
type IsisRouter_Counters_Level1_InCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-lsp YANG schema element.
type IsisRouter_Counters_Level1_InLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-lsp YANG schema element.
type IsisRouter_Counters_Level1_InLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_InP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_InP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-psnp YANG schema element.
type IsisRouter_Counters_Level1_InPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_InPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/in-psnp YANG schema element.
type IsisRouter_Counters_Level1_InPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-csnp YANG schema element.
type IsisRouter_Counters_Level1_OutCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-csnp YANG schema element.
type IsisRouter_Counters_Level1_OutCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-lsp YANG schema element.
type IsisRouter_Counters_Level1_OutLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-lsp YANG schema element.
type IsisRouter_Counters_Level1_OutLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level1_OutP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-psnp YANG schema element.
type IsisRouter_Counters_Level1_OutPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_OutPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/out-psnp YANG schema element.
type IsisRouter_Counters_Level1_OutPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsFlapPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-flap YANG schema element.
type IsisRouter_Counters_Level1_SessionsFlapPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsFlapPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-flap YANG schema element.
type IsisRouter_Counters_Level1_SessionsFlapPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsUpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-up YANG schema element.
type IsisRouter_Counters_Level1_SessionsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1_SessionsUpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1/sessions-up YANG schema element.
type IsisRouter_Counters_Level1_SessionsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level1Path represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1Path struct {
	*ygnmi.NodePath
}

// IsisRouter_Counters_Level1PathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1PathAny struct {
	*ygnmi.NodePath
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1Path) DatabaseSize() *IsisRouter_Counters_Level1_DatabaseSizePath {
	return &IsisRouter_Counters_Level1_DatabaseSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/database-size"
func (n *IsisRouter_Counters_Level1PathAny) DatabaseSize() *IsisRouter_Counters_Level1_DatabaseSizePathAny {
	return &IsisRouter_Counters_Level1_DatabaseSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1Path) InBcastHellos() *IsisRouter_Counters_Level1_InBcastHellosPath {
	return &IsisRouter_Counters_Level1_InBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-bcast-hellos"
func (n *IsisRouter_Counters_Level1PathAny) InBcastHellos() *IsisRouter_Counters_Level1_InBcastHellosPathAny {
	return &IsisRouter_Counters_Level1_InBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1Path) InCsnp() *IsisRouter_Counters_Level1_InCsnpPath {
	return &IsisRouter_Counters_Level1_InCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-csnp"
func (n *IsisRouter_Counters_Level1PathAny) InCsnp() *IsisRouter_Counters_Level1_InCsnpPathAny {
	return &IsisRouter_Counters_Level1_InCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1Path) InLsp() *IsisRouter_Counters_Level1_InLspPath {
	return &IsisRouter_Counters_Level1_InLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-lsp"
func (n *IsisRouter_Counters_Level1PathAny) InLsp() *IsisRouter_Counters_Level1_InLspPathAny {
	return &IsisRouter_Counters_Level1_InLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1Path) InP2PHellos() *IsisRouter_Counters_Level1_InP2PHellosPath {
	return &IsisRouter_Counters_Level1_InP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-p2p-hellos"
func (n *IsisRouter_Counters_Level1PathAny) InP2PHellos() *IsisRouter_Counters_Level1_InP2PHellosPathAny {
	return &IsisRouter_Counters_Level1_InP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1Path) InPsnp() *IsisRouter_Counters_Level1_InPsnpPath {
	return &IsisRouter_Counters_Level1_InPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/in-psnp"
func (n *IsisRouter_Counters_Level1PathAny) InPsnp() *IsisRouter_Counters_Level1_InPsnpPathAny {
	return &IsisRouter_Counters_Level1_InPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1Path) OutBcastHellos() *IsisRouter_Counters_Level1_OutBcastHellosPath {
	return &IsisRouter_Counters_Level1_OutBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-bcast-hellos"
func (n *IsisRouter_Counters_Level1PathAny) OutBcastHellos() *IsisRouter_Counters_Level1_OutBcastHellosPathAny {
	return &IsisRouter_Counters_Level1_OutBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1Path) OutCsnp() *IsisRouter_Counters_Level1_OutCsnpPath {
	return &IsisRouter_Counters_Level1_OutCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-csnp"
func (n *IsisRouter_Counters_Level1PathAny) OutCsnp() *IsisRouter_Counters_Level1_OutCsnpPathAny {
	return &IsisRouter_Counters_Level1_OutCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1Path) OutLsp() *IsisRouter_Counters_Level1_OutLspPath {
	return &IsisRouter_Counters_Level1_OutLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-lsp"
func (n *IsisRouter_Counters_Level1PathAny) OutLsp() *IsisRouter_Counters_Level1_OutLspPathAny {
	return &IsisRouter_Counters_Level1_OutLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1Path) OutP2PHellos() *IsisRouter_Counters_Level1_OutP2PHellosPath {
	return &IsisRouter_Counters_Level1_OutP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-p2p-hellos"
func (n *IsisRouter_Counters_Level1PathAny) OutP2PHellos() *IsisRouter_Counters_Level1_OutP2PHellosPathAny {
	return &IsisRouter_Counters_Level1_OutP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1Path) OutPsnp() *IsisRouter_Counters_Level1_OutPsnpPath {
	return &IsisRouter_Counters_Level1_OutPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/out-psnp"
func (n *IsisRouter_Counters_Level1PathAny) OutPsnp() *IsisRouter_Counters_Level1_OutPsnpPathAny {
	return &IsisRouter_Counters_Level1_OutPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1Path) SessionsFlap() *IsisRouter_Counters_Level1_SessionsFlapPath {
	return &IsisRouter_Counters_Level1_SessionsFlapPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-flap"
func (n *IsisRouter_Counters_Level1PathAny) SessionsFlap() *IsisRouter_Counters_Level1_SessionsFlapPathAny {
	return &IsisRouter_Counters_Level1_SessionsFlapPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1Path) SessionsUp() *IsisRouter_Counters_Level1_SessionsUpPath {
	return &IsisRouter_Counters_Level1_SessionsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level1/sessions-up"
func (n *IsisRouter_Counters_Level1PathAny) SessionsUp() *IsisRouter_Counters_Level1_SessionsUpPathAny {
	return &IsisRouter_Counters_Level1_SessionsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// IsisRouter_Counters_Level2_DatabaseSizePath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/database-size YANG schema element.
type IsisRouter_Counters_Level2_DatabaseSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_DatabaseSizePathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/database-size YANG schema element.
type IsisRouter_Counters_Level2_DatabaseSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level2Path) State() ygnmi.SingletonQuery[*oc.IsisRouter_Counters_Level2] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.IsisRouter_Counters_Level2](
		"IsisRouter_Counters_Level2",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *IsisRouter_Counters_Level2PathAny) State() ygnmi.WildcardQuery[*oc.IsisRouter_Counters_Level2] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.IsisRouter_Counters_Level2](
		"IsisRouter_Counters_Level2",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2_DatabaseSizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2_DatabaseSizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"database-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).DatabaseSize
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2_InBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2_InBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2_InCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2_InCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2_InLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2_InLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2_InP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2_InP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2_InPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2_InPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"in-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).InPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2_OutBcastHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2_OutBcastHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutBcastHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2_OutCsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2_OutCsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutCsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2_OutLspPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2_OutLspPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutLsp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2_OutP2PHellosPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2_OutP2PHellosPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutP2PHellos
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2_OutPsnpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2_OutPsnpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"out-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).OutPsnp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2_SessionsFlapPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2_SessionsFlapPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsFlap
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2_SessionsUpPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2_SessionsUpPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"IsisRouter_Counters_Level2",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"sessions-up"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.IsisRouter_Counters_Level2).SessionsUp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.IsisRouter_Counters_Level2) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// IsisRouter_Counters_Level2_InBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_InBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_InBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-csnp YANG schema element.
type IsisRouter_Counters_Level2_InCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-csnp YANG schema element.
type IsisRouter_Counters_Level2_InCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-lsp YANG schema element.
type IsisRouter_Counters_Level2_InLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-lsp YANG schema element.
type IsisRouter_Counters_Level2_InLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_InP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_InP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-psnp YANG schema element.
type IsisRouter_Counters_Level2_InPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_InPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/in-psnp YANG schema element.
type IsisRouter_Counters_Level2_InPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutBcastHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutBcastHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutBcastHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-bcast-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutBcastHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutCsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-csnp YANG schema element.
type IsisRouter_Counters_Level2_OutCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutCsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-csnp YANG schema element.
type IsisRouter_Counters_Level2_OutCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutLspPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-lsp YANG schema element.
type IsisRouter_Counters_Level2_OutLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutLspPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-lsp YANG schema element.
type IsisRouter_Counters_Level2_OutLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutP2PHellosPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutP2PHellosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutP2PHellosPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-p2p-hellos YANG schema element.
type IsisRouter_Counters_Level2_OutP2PHellosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutPsnpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-psnp YANG schema element.
type IsisRouter_Counters_Level2_OutPsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_OutPsnpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/out-psnp YANG schema element.
type IsisRouter_Counters_Level2_OutPsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsFlapPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-flap YANG schema element.
type IsisRouter_Counters_Level2_SessionsFlapPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsFlapPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-flap YANG schema element.
type IsisRouter_Counters_Level2_SessionsFlapPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsUpPath represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-up YANG schema element.
type IsisRouter_Counters_Level2_SessionsUpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2_SessionsUpPathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2/sessions-up YANG schema element.
type IsisRouter_Counters_Level2_SessionsUpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// IsisRouter_Counters_Level2Path represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2Path struct {
	*ygnmi.NodePath
}

// IsisRouter_Counters_Level2PathAny represents the wildcard version of the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2PathAny struct {
	*ygnmi.NodePath
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2Path) DatabaseSize() *IsisRouter_Counters_Level2_DatabaseSizePath {
	return &IsisRouter_Counters_Level2_DatabaseSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DatabaseSize (leaf): The total number of link stOTG updOTGs (LSPs) in the LSP
// databases.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "database-size"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/database-size"
func (n *IsisRouter_Counters_Level2PathAny) DatabaseSize() *IsisRouter_Counters_Level2_DatabaseSizePathAny {
	return &IsisRouter_Counters_Level2_DatabaseSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"database-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2Path) InBcastHellos() *IsisRouter_Counters_Level2_InBcastHellosPath {
	return &IsisRouter_Counters_Level2_InBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InBcastHellos (leaf): The total number of broacast HELLO messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-bcast-hellos"
func (n *IsisRouter_Counters_Level2PathAny) InBcastHellos() *IsisRouter_Counters_Level2_InBcastHellosPathAny {
	return &IsisRouter_Counters_Level2_InBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2Path) InCsnp() *IsisRouter_Counters_Level2_InCsnpPath {
	return &IsisRouter_Counters_Level2_InCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-csnp"
func (n *IsisRouter_Counters_Level2PathAny) InCsnp() *IsisRouter_Counters_Level2_InCsnpPathAny {
	return &IsisRouter_Counters_Level2_InCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2Path) InLsp() *IsisRouter_Counters_Level2_InLspPath {
	return &IsisRouter_Counters_Level2_InLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-lsp"
func (n *IsisRouter_Counters_Level2PathAny) InLsp() *IsisRouter_Counters_Level2_InLspPathAny {
	return &IsisRouter_Counters_Level2_InLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2Path) InP2PHellos() *IsisRouter_Counters_Level2_InP2PHellosPath {
	return &IsisRouter_Counters_Level2_InP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-p2p-hellos"
func (n *IsisRouter_Counters_Level2PathAny) InP2PHellos() *IsisRouter_Counters_Level2_InP2PHellosPathAny {
	return &IsisRouter_Counters_Level2_InP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2Path) InPsnp() *IsisRouter_Counters_Level2_InPsnpPath {
	return &IsisRouter_Counters_Level2_InPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// InPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages received.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "in-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/in-psnp"
func (n *IsisRouter_Counters_Level2PathAny) InPsnp() *IsisRouter_Counters_Level2_InPsnpPathAny {
	return &IsisRouter_Counters_Level2_InPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2Path) OutBcastHellos() *IsisRouter_Counters_Level2_OutBcastHellosPath {
	return &IsisRouter_Counters_Level2_OutBcastHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutBcastHellos (leaf): The total number of broadcast HELLO messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-bcast-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-bcast-hellos"
func (n *IsisRouter_Counters_Level2PathAny) OutBcastHellos() *IsisRouter_Counters_Level2_OutBcastHellosPathAny {
	return &IsisRouter_Counters_Level2_OutBcastHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-bcast-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2Path) OutCsnp() *IsisRouter_Counters_Level2_OutCsnpPath {
	return &IsisRouter_Counters_Level2_OutCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutCsnp (leaf): The total number of complete sequence number packet (CSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-csnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-csnp"
func (n *IsisRouter_Counters_Level2PathAny) OutCsnp() *IsisRouter_Counters_Level2_OutCsnpPathAny {
	return &IsisRouter_Counters_Level2_OutCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2Path) OutLsp() *IsisRouter_Counters_Level2_OutLspPath {
	return &IsisRouter_Counters_Level2_OutLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutLsp (leaf): The total number of link stOTG protocol data units (LSPs)
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-lsp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-lsp"
func (n *IsisRouter_Counters_Level2PathAny) OutLsp() *IsisRouter_Counters_Level2_OutLspPathAny {
	return &IsisRouter_Counters_Level2_OutLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2Path) OutP2PHellos() *IsisRouter_Counters_Level2_OutP2PHellosPath {
	return &IsisRouter_Counters_Level2_OutP2PHellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutP2PHellos (leaf): The total number of point to point (P2P) HELLO messages
// sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-p2p-hellos"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-p2p-hellos"
func (n *IsisRouter_Counters_Level2PathAny) OutP2PHellos() *IsisRouter_Counters_Level2_OutP2PHellosPathAny {
	return &IsisRouter_Counters_Level2_OutP2PHellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-p2p-hellos"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2Path) OutPsnp() *IsisRouter_Counters_Level2_OutPsnpPath {
	return &IsisRouter_Counters_Level2_OutPsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// OutPsnp (leaf): The total number of partial sequence number packet (PSNPs)
// messages sent.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "out-psnp"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/out-psnp"
func (n *IsisRouter_Counters_Level2PathAny) OutPsnp() *IsisRouter_Counters_Level2_OutPsnpPathAny {
	return &IsisRouter_Counters_Level2_OutPsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2Path) SessionsFlap() *IsisRouter_Counters_Level2_SessionsFlapPath {
	return &IsisRouter_Counters_Level2_SessionsFlapPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsFlap (leaf): The total number of sessions flap.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-flap"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-flap"
func (n *IsisRouter_Counters_Level2PathAny) SessionsFlap() *IsisRouter_Counters_Level2_SessionsFlapPathAny {
	return &IsisRouter_Counters_Level2_SessionsFlapPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-flap"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2Path) SessionsUp() *IsisRouter_Counters_Level2_SessionsUpPath {
	return &IsisRouter_Counters_Level2_SessionsUpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SessionsUp (leaf): The total number of sessions that are fully up.
//
//	Defining module:      "open-traffic-generator-isis"
//	Instantiating module: "open-traffic-generator-isis"
//	Path from parent:     "sessions-up"
//	Path from root:       "/isis-routers/isis-router/state/counters/level2/sessions-up"
func (n *IsisRouter_Counters_Level2PathAny) SessionsUp() *IsisRouter_Counters_Level2_SessionsUpPathAny {
	return &IsisRouter_Counters_Level2_SessionsUpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions-up"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
