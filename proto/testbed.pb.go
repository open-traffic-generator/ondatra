// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: testbed.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vendor that manufactures the device.
type Device_Vendor int32

const (
	Device_VENDOR_UNSPECIFIED Device_Vendor = 0
	Device_ARISTA             Device_Vendor = 1
	Device_CISCO              Device_Vendor = 2
	Device_IXIA               Device_Vendor = 3
	Device_JUNIPER            Device_Vendor = 4
	Device_CIENA              Device_Vendor = 5
	Device_PALOALTO           Device_Vendor = 6
	Device_NOKIA              Device_Vendor = 7
	Device_ZPE                Device_Vendor = 8
	Device_DELL               Device_Vendor = 9
	Device_OPENCONFIG         Device_Vendor = 10
	Device_ARUBA              Device_Vendor = 11
	Device_ALPINE             Device_Vendor = 12
)

// Enum value maps for Device_Vendor.
var (
	Device_Vendor_name = map[int32]string{
		0:  "VENDOR_UNSPECIFIED",
		1:  "ARISTA",
		2:  "CISCO",
		3:  "IXIA",
		4:  "JUNIPER",
		5:  "CIENA",
		6:  "PALOALTO",
		7:  "NOKIA",
		8:  "ZPE",
		9:  "DELL",
		10: "OPENCONFIG",
		11: "ARUBA",
		12: "ALPINE",
	}
	Device_Vendor_value = map[string]int32{
		"VENDOR_UNSPECIFIED": 0,
		"ARISTA":             1,
		"CISCO":              2,
		"IXIA":               3,
		"JUNIPER":            4,
		"CIENA":              5,
		"PALOALTO":           6,
		"NOKIA":              7,
		"ZPE":                8,
		"DELL":               9,
		"OPENCONFIG":         10,
		"ARUBA":              11,
		"ALPINE":             12,
	}
)

func (x Device_Vendor) Enum() *Device_Vendor {
	p := new(Device_Vendor)
	*p = x
	return p
}

func (x Device_Vendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Vendor) Descriptor() protoreflect.EnumDescriptor {
	return file_testbed_proto_enumTypes[0].Descriptor()
}

func (Device_Vendor) Type() protoreflect.EnumType {
	return &file_testbed_proto_enumTypes[0]
}

func (x Device_Vendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Vendor.Descriptor instead.
func (Device_Vendor) EnumDescriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{1, 0}
}

// Speed of the port.
type Port_Speed int32

const (
	Port_SPEED_UNSPECIFIED Port_Speed = 0
	Port_S_1GB             Port_Speed = 1
	Port_S_5GB             Port_Speed = 5
	Port_S_10GB            Port_Speed = 10
	Port_S_25GB            Port_Speed = 25
	Port_S_40GB            Port_Speed = 40
	Port_S_100GB           Port_Speed = 100
	Port_S_400GB           Port_Speed = 400
)

// Enum value maps for Port_Speed.
var (
	Port_Speed_name = map[int32]string{
		0:   "SPEED_UNSPECIFIED",
		1:   "S_1GB",
		5:   "S_5GB",
		10:  "S_10GB",
		25:  "S_25GB",
		40:  "S_40GB",
		100: "S_100GB",
		400: "S_400GB",
	}
	Port_Speed_value = map[string]int32{
		"SPEED_UNSPECIFIED": 0,
		"S_1GB":             1,
		"S_5GB":             5,
		"S_10GB":            10,
		"S_25GB":            25,
		"S_40GB":            40,
		"S_100GB":           100,
		"S_400GB":           400,
	}
)

func (x Port_Speed) Enum() *Port_Speed {
	p := new(Port_Speed)
	*p = x
	return p
}

func (x Port_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_testbed_proto_enumTypes[1].Descriptor()
}

func (Port_Speed) Type() protoreflect.EnumType {
	return &file_testbed_proto_enumTypes[1]
}

func (x Port_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Speed.Descriptor instead.
func (Port_Speed) EnumDescriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{2, 0}
}

// Physical medium dependent of the port.
// This should be kept in sync with the values specified in OpenConfig:
// https://github.com/openconfig/public/blob/master/release/models/optical-transport/openconfig-transport-types.yang
type Port_Pmd int32

const (
	Port_PMD_UNSPECIFIED    Port_Pmd = 0
	Port_PMD_10GBASE_LRM    Port_Pmd = 1
	Port_PMD_10GBASE_LR     Port_Pmd = 2
	Port_PMD_10GBASE_ZR     Port_Pmd = 3
	Port_PMD_10GBASE_ER     Port_Pmd = 4
	Port_PMD_10GBASE_SR     Port_Pmd = 5
	Port_PMD_40GBASE_CR4    Port_Pmd = 6
	Port_PMD_40GBASE_SR4    Port_Pmd = 7
	Port_PMD_40GBASE_LR4    Port_Pmd = 8
	Port_PMD_40GBASE_ER4    Port_Pmd = 9
	Port_PMD_40GBASE_PSM4   Port_Pmd = 10
	Port_PMD_4X10GBASE_LR   Port_Pmd = 11
	Port_PMD_4X10GBASE_SR   Port_Pmd = 12
	Port_PMD_100G_AOC       Port_Pmd = 13
	Port_PMD_100G_ACC       Port_Pmd = 14
	Port_PMD_100GBASE_SR10  Port_Pmd = 15
	Port_PMD_100GBASE_SR4   Port_Pmd = 16
	Port_PMD_100GBASE_LR4   Port_Pmd = 17
	Port_PMD_100GBASE_ER4   Port_Pmd = 18
	Port_PMD_100GBASE_CWDM4 Port_Pmd = 19
	Port_PMD_100GBASE_CLR4  Port_Pmd = 20
	Port_PMD_100GBASE_PSM4  Port_Pmd = 21
	Port_PMD_100GBASE_CR4   Port_Pmd = 22
	Port_PMD_100GBASE_FR    Port_Pmd = 23
	Port_PMD_400GBASE_ZR    Port_Pmd = 24
	Port_PMD_400GBASE_LR4   Port_Pmd = 25
	Port_PMD_400GBASE_FR4   Port_Pmd = 26
	Port_PMD_400GBASE_LR8   Port_Pmd = 27
	Port_PMD_400GBASE_DR4   Port_Pmd = 28
	Port_PMD_100GBASE_DR    Port_Pmd = 29
	Port_PMD_100GBASE_CGR4  Port_Pmd = 30
)

// Enum value maps for Port_Pmd.
var (
	Port_Pmd_name = map[int32]string{
		0:  "PMD_UNSPECIFIED",
		1:  "PMD_10GBASE_LRM",
		2:  "PMD_10GBASE_LR",
		3:  "PMD_10GBASE_ZR",
		4:  "PMD_10GBASE_ER",
		5:  "PMD_10GBASE_SR",
		6:  "PMD_40GBASE_CR4",
		7:  "PMD_40GBASE_SR4",
		8:  "PMD_40GBASE_LR4",
		9:  "PMD_40GBASE_ER4",
		10: "PMD_40GBASE_PSM4",
		11: "PMD_4X10GBASE_LR",
		12: "PMD_4X10GBASE_SR",
		13: "PMD_100G_AOC",
		14: "PMD_100G_ACC",
		15: "PMD_100GBASE_SR10",
		16: "PMD_100GBASE_SR4",
		17: "PMD_100GBASE_LR4",
		18: "PMD_100GBASE_ER4",
		19: "PMD_100GBASE_CWDM4",
		20: "PMD_100GBASE_CLR4",
		21: "PMD_100GBASE_PSM4",
		22: "PMD_100GBASE_CR4",
		23: "PMD_100GBASE_FR",
		24: "PMD_400GBASE_ZR",
		25: "PMD_400GBASE_LR4",
		26: "PMD_400GBASE_FR4",
		27: "PMD_400GBASE_LR8",
		28: "PMD_400GBASE_DR4",
		29: "PMD_100GBASE_DR",
		30: "PMD_100GBASE_CGR4",
	}
	Port_Pmd_value = map[string]int32{
		"PMD_UNSPECIFIED":    0,
		"PMD_10GBASE_LRM":    1,
		"PMD_10GBASE_LR":     2,
		"PMD_10GBASE_ZR":     3,
		"PMD_10GBASE_ER":     4,
		"PMD_10GBASE_SR":     5,
		"PMD_40GBASE_CR4":    6,
		"PMD_40GBASE_SR4":    7,
		"PMD_40GBASE_LR4":    8,
		"PMD_40GBASE_ER4":    9,
		"PMD_40GBASE_PSM4":   10,
		"PMD_4X10GBASE_LR":   11,
		"PMD_4X10GBASE_SR":   12,
		"PMD_100G_AOC":       13,
		"PMD_100G_ACC":       14,
		"PMD_100GBASE_SR10":  15,
		"PMD_100GBASE_SR4":   16,
		"PMD_100GBASE_LR4":   17,
		"PMD_100GBASE_ER4":   18,
		"PMD_100GBASE_CWDM4": 19,
		"PMD_100GBASE_CLR4":  20,
		"PMD_100GBASE_PSM4":  21,
		"PMD_100GBASE_CR4":   22,
		"PMD_100GBASE_FR":    23,
		"PMD_400GBASE_ZR":    24,
		"PMD_400GBASE_LR4":   25,
		"PMD_400GBASE_FR4":   26,
		"PMD_400GBASE_LR8":   27,
		"PMD_400GBASE_DR4":   28,
		"PMD_100GBASE_DR":    29,
		"PMD_100GBASE_CGR4":  30,
	}
)

func (x Port_Pmd) Enum() *Port_Pmd {
	p := new(Port_Pmd)
	*p = x
	return p
}

func (x Port_Pmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Pmd) Descriptor() protoreflect.EnumDescriptor {
	return file_testbed_proto_enumTypes[2].Descriptor()
}

func (Port_Pmd) Type() protoreflect.EnumType {
	return &file_testbed_proto_enumTypes[2]
}

func (x Port_Pmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Pmd.Descriptor instead.
func (Port_Pmd) EnumDescriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{2, 1}
}

// A testbed.
type Testbed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duts          []*Device              `protobuf:"bytes,1,rep,name=duts,proto3" json:"duts,omitempty"`
	Ates          []*Device              `protobuf:"bytes,2,rep,name=ates,proto3" json:"ates,omitempty"`
	Links         []*Link                `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Testbed) Reset() {
	*x = Testbed{}
	mi := &file_testbed_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Testbed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Testbed) ProtoMessage() {}

func (x *Testbed) ProtoReflect() protoreflect.Message {
	mi := &file_testbed_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Testbed.ProtoReflect.Descriptor instead.
func (*Testbed) Descriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{0}
}

func (x *Testbed) GetDuts() []*Device {
	if x != nil {
		return x.Duts
	}
	return nil
}

func (x *Testbed) GetAtes() []*Device {
	if x != nil {
		return x.Ates
	}
	return nil
}

func (x *Testbed) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// A device.
//
// All "regex" fields expect an RE2 regular expression and match a device
// attribute if it contains any match of the regular expression.
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID for the device. Required.
	Id     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vendor Device_Vendor `protobuf:"varint,2,opt,name=vendor,proto3,enum=ondatra.Device_Vendor" json:"vendor,omitempty"`
	// Hardware model of the device.
	//
	// Types that are valid to be assigned to HardwareModelValue:
	//
	//	*Device_HardwareModel
	//	*Device_HardwareModelRegex
	HardwareModelValue isDevice_HardwareModelValue `protobuf_oneof:"hardware_model_value"`
	// Software version of the device.
	//
	// Types that are valid to be assigned to SoftwareVersionValue:
	//
	//	*Device_SoftwareVersion
	//	*Device_SoftwareVersionRegex
	SoftwareVersionValue isDevice_SoftwareVersionValue `protobuf_oneof:"software_version_value"`
	// List of ports on the device.
	Ports []*Port `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	// A key-value map of additional device dimensions.
	//
	// In addition to the above fields, the extra dimensions field can be used to
	// further restrict matching devices. The set of dimension keys that are
	// supported is specific to the binding implementation. For example, if the
	// binding supports filtering devices by a dimension named "label," the
	// testbed could specify an extra dimensions map of
	//
	//	extra_dimensions {
	//	  key: "label",
	//	  value: "foo",
	//	}
	ExtraDimensions map[string]string `protobuf:"bytes,6,rep,name=extra_dimensions,json=extraDimensions,proto3" json:"extra_dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_testbed_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_testbed_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetVendor() Device_Vendor {
	if x != nil {
		return x.Vendor
	}
	return Device_VENDOR_UNSPECIFIED
}

func (x *Device) GetHardwareModelValue() isDevice_HardwareModelValue {
	if x != nil {
		return x.HardwareModelValue
	}
	return nil
}

func (x *Device) GetHardwareModel() string {
	if x != nil {
		if x, ok := x.HardwareModelValue.(*Device_HardwareModel); ok {
			return x.HardwareModel
		}
	}
	return ""
}

func (x *Device) GetHardwareModelRegex() string {
	if x != nil {
		if x, ok := x.HardwareModelValue.(*Device_HardwareModelRegex); ok {
			return x.HardwareModelRegex
		}
	}
	return ""
}

func (x *Device) GetSoftwareVersionValue() isDevice_SoftwareVersionValue {
	if x != nil {
		return x.SoftwareVersionValue
	}
	return nil
}

func (x *Device) GetSoftwareVersion() string {
	if x != nil {
		if x, ok := x.SoftwareVersionValue.(*Device_SoftwareVersion); ok {
			return x.SoftwareVersion
		}
	}
	return ""
}

func (x *Device) GetSoftwareVersionRegex() string {
	if x != nil {
		if x, ok := x.SoftwareVersionValue.(*Device_SoftwareVersionRegex); ok {
			return x.SoftwareVersionRegex
		}
	}
	return ""
}

func (x *Device) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetExtraDimensions() map[string]string {
	if x != nil {
		return x.ExtraDimensions
	}
	return nil
}

type isDevice_HardwareModelValue interface {
	isDevice_HardwareModelValue()
}

type Device_HardwareModel struct {
	HardwareModel string `protobuf:"bytes,4,opt,name=hardware_model,json=hardwareModel,proto3,oneof"`
}

type Device_HardwareModelRegex struct {
	HardwareModelRegex string `protobuf:"bytes,7,opt,name=hardware_model_regex,json=hardwareModelRegex,proto3,oneof"`
}

func (*Device_HardwareModel) isDevice_HardwareModelValue() {}

func (*Device_HardwareModelRegex) isDevice_HardwareModelValue() {}

type isDevice_SoftwareVersionValue interface {
	isDevice_SoftwareVersionValue()
}

type Device_SoftwareVersion struct {
	SoftwareVersion string `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3,oneof"`
}

type Device_SoftwareVersionRegex struct {
	SoftwareVersionRegex string `protobuf:"bytes,8,opt,name=software_version_regex,json=softwareVersionRegex,proto3,oneof"`
}

func (*Device_SoftwareVersion) isDevice_SoftwareVersionValue() {}

func (*Device_SoftwareVersionRegex) isDevice_SoftwareVersionValue() {}

// A port.
//
// All "regex" fields expect an RE2 regular expression and match a port
// attribute if it contains any match of the regular expression.
type Port struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID for the port. Required.
	Id    string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Speed Port_Speed `protobuf:"varint,2,opt,name=speed,proto3,enum=ondatra.Port_Speed" json:"speed,omitempty"`
	// Model of the card that contains the port.
	//
	// Types that are valid to be assigned to CardModelValue:
	//
	//	*Port_CardModel
	//	*Port_CardModelRegex
	CardModelValue isPort_CardModelValue `protobuf_oneof:"card_model_value"`
	// Types that are valid to be assigned to PmdValue:
	//
	//	*Port_Pmd_
	//	*Port_PmdRegex
	PmdValue isPort_PmdValue `protobuf_oneof:"pmd_value"`
	// A hint that the test intends to create a LAG from this port and other ports
	// in the same group. For some kinds of devices, including OTG on KNE, a group
	// hint is necessary to create a LAG, because a LAG requires additional
	// topological constraints that can't otherwise be expressed in the testbed.
	Group         string `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_testbed_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_testbed_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{2}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetSpeed() Port_Speed {
	if x != nil {
		return x.Speed
	}
	return Port_SPEED_UNSPECIFIED
}

func (x *Port) GetCardModelValue() isPort_CardModelValue {
	if x != nil {
		return x.CardModelValue
	}
	return nil
}

func (x *Port) GetCardModel() string {
	if x != nil {
		if x, ok := x.CardModelValue.(*Port_CardModel); ok {
			return x.CardModel
		}
	}
	return ""
}

func (x *Port) GetCardModelRegex() string {
	if x != nil {
		if x, ok := x.CardModelValue.(*Port_CardModelRegex); ok {
			return x.CardModelRegex
		}
	}
	return ""
}

func (x *Port) GetPmdValue() isPort_PmdValue {
	if x != nil {
		return x.PmdValue
	}
	return nil
}

func (x *Port) GetPmd() Port_Pmd {
	if x != nil {
		if x, ok := x.PmdValue.(*Port_Pmd_); ok {
			return x.Pmd
		}
	}
	return Port_PMD_UNSPECIFIED
}

func (x *Port) GetPmdRegex() string {
	if x != nil {
		if x, ok := x.PmdValue.(*Port_PmdRegex); ok {
			return x.PmdRegex
		}
	}
	return ""
}

func (x *Port) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type isPort_CardModelValue interface {
	isPort_CardModelValue()
}

type Port_CardModel struct {
	CardModel string `protobuf:"bytes,3,opt,name=card_model,json=cardModel,proto3,oneof"`
}

type Port_CardModelRegex struct {
	CardModelRegex string `protobuf:"bytes,8,opt,name=card_model_regex,json=cardModelRegex,proto3,oneof"`
}

func (*Port_CardModel) isPort_CardModelValue() {}

func (*Port_CardModelRegex) isPort_CardModelValue() {}

type isPort_PmdValue interface {
	isPort_PmdValue()
}

type Port_Pmd_ struct {
	Pmd Port_Pmd `protobuf:"varint,4,opt,name=pmd,proto3,enum=ondatra.Port_Pmd,oneof"`
}

type Port_PmdRegex struct {
	PmdRegex string `protobuf:"bytes,5,opt,name=pmd_regex,json=pmdRegex,proto3,oneof"`
}

func (*Port_Pmd_) isPort_PmdValue() {}

func (*Port_PmdRegex) isPort_PmdValue() {}

// A physical link between ports on DUTs or ATEs.
// The order does not matter: links are symmetrical.
// A given port may be specified in at most one link (typically in exactly one
// link, because un-connected ports are not very interesting for testing).
type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             string                 `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"` // First port in the format "<device-id>:<port-id>".
	B             string                 `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"` // Second port in the format "<device-id>:<port-id>".
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_testbed_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_testbed_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_testbed_proto_rawDescGZIP(), []int{3}
}

func (x *Link) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *Link) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

var File_testbed_proto protoreflect.FileDescriptor

const file_testbed_proto_rawDesc = "" +
	"\n" +
	"\rtestbed.proto\x12\aondatra\"x\n" +
	"\aTestbed\x12#\n" +
	"\x04duts\x18\x01 \x03(\v2\x0f.ondatra.DeviceR\x04duts\x12#\n" +
	"\x04ates\x18\x02 \x03(\v2\x0f.ondatra.DeviceR\x04ates\x12#\n" +
	"\x05links\x18\x03 \x03(\v2\r.ondatra.LinkR\x05links\"\xa5\x05\n" +
	"\x06Device\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12.\n" +
	"\x06vendor\x18\x02 \x01(\x0e2\x16.ondatra.Device.VendorR\x06vendor\x12'\n" +
	"\x0ehardware_model\x18\x04 \x01(\tH\x00R\rhardwareModel\x122\n" +
	"\x14hardware_model_regex\x18\a \x01(\tH\x00R\x12hardwareModelRegex\x12+\n" +
	"\x10software_version\x18\x05 \x01(\tH\x01R\x0fsoftwareVersion\x126\n" +
	"\x16software_version_regex\x18\b \x01(\tH\x01R\x14softwareVersionRegex\x12#\n" +
	"\x05ports\x18\x03 \x03(\v2\r.ondatra.PortR\x05ports\x12O\n" +
	"\x10extra_dimensions\x18\x06 \x03(\v2$.ondatra.Device.ExtraDimensionsEntryR\x0fextraDimensions\x1aB\n" +
	"\x14ExtraDimensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xac\x01\n" +
	"\x06Vendor\x12\x16\n" +
	"\x12VENDOR_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ARISTA\x10\x01\x12\t\n" +
	"\x05CISCO\x10\x02\x12\b\n" +
	"\x04IXIA\x10\x03\x12\v\n" +
	"\aJUNIPER\x10\x04\x12\t\n" +
	"\x05CIENA\x10\x05\x12\f\n" +
	"\bPALOALTO\x10\x06\x12\t\n" +
	"\x05NOKIA\x10\a\x12\a\n" +
	"\x03ZPE\x10\b\x12\b\n" +
	"\x04DELL\x10\t\x12\x0e\n" +
	"\n" +
	"OPENCONFIG\x10\n" +
	"\x12\t\n" +
	"\x05ARUBA\x10\v\x12\n" +
	"\n" +
	"\x06ALPINE\x10\fB\x16\n" +
	"\x14hardware_model_valueB\x18\n" +
	"\x16software_version_value\"\x9f\b\n" +
	"\x04Port\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12)\n" +
	"\x05speed\x18\x02 \x01(\x0e2\x13.ondatra.Port.SpeedR\x05speed\x12\x1f\n" +
	"\n" +
	"card_model\x18\x03 \x01(\tH\x00R\tcardModel\x12*\n" +
	"\x10card_model_regex\x18\b \x01(\tH\x00R\x0ecardModelRegex\x12%\n" +
	"\x03pmd\x18\x04 \x01(\x0e2\x11.ondatra.Port.PmdH\x01R\x03pmd\x12\x1d\n" +
	"\tpmd_regex\x18\x05 \x01(\tH\x01R\bpmdRegex\x12\x14\n" +
	"\x05group\x18\x06 \x01(\tR\x05group\"s\n" +
	"\x05Speed\x12\x15\n" +
	"\x11SPEED_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05S_1GB\x10\x01\x12\t\n" +
	"\x05S_5GB\x10\x05\x12\n" +
	"\n" +
	"\x06S_10GB\x10\n" +
	"\x12\n" +
	"\n" +
	"\x06S_25GB\x10\x19\x12\n" +
	"\n" +
	"\x06S_40GB\x10(\x12\v\n" +
	"\aS_100GB\x10d\x12\f\n" +
	"\aS_400GB\x10\x90\x03\"\x9c\x05\n" +
	"\x03Pmd\x12\x13\n" +
	"\x0fPMD_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fPMD_10GBASE_LRM\x10\x01\x12\x12\n" +
	"\x0ePMD_10GBASE_LR\x10\x02\x12\x12\n" +
	"\x0ePMD_10GBASE_ZR\x10\x03\x12\x12\n" +
	"\x0ePMD_10GBASE_ER\x10\x04\x12\x12\n" +
	"\x0ePMD_10GBASE_SR\x10\x05\x12\x13\n" +
	"\x0fPMD_40GBASE_CR4\x10\x06\x12\x13\n" +
	"\x0fPMD_40GBASE_SR4\x10\a\x12\x13\n" +
	"\x0fPMD_40GBASE_LR4\x10\b\x12\x13\n" +
	"\x0fPMD_40GBASE_ER4\x10\t\x12\x14\n" +
	"\x10PMD_40GBASE_PSM4\x10\n" +
	"\x12\x14\n" +
	"\x10PMD_4X10GBASE_LR\x10\v\x12\x14\n" +
	"\x10PMD_4X10GBASE_SR\x10\f\x12\x10\n" +
	"\fPMD_100G_AOC\x10\r\x12\x10\n" +
	"\fPMD_100G_ACC\x10\x0e\x12\x15\n" +
	"\x11PMD_100GBASE_SR10\x10\x0f\x12\x14\n" +
	"\x10PMD_100GBASE_SR4\x10\x10\x12\x14\n" +
	"\x10PMD_100GBASE_LR4\x10\x11\x12\x14\n" +
	"\x10PMD_100GBASE_ER4\x10\x12\x12\x16\n" +
	"\x12PMD_100GBASE_CWDM4\x10\x13\x12\x15\n" +
	"\x11PMD_100GBASE_CLR4\x10\x14\x12\x15\n" +
	"\x11PMD_100GBASE_PSM4\x10\x15\x12\x14\n" +
	"\x10PMD_100GBASE_CR4\x10\x16\x12\x13\n" +
	"\x0fPMD_100GBASE_FR\x10\x17\x12\x13\n" +
	"\x0fPMD_400GBASE_ZR\x10\x18\x12\x14\n" +
	"\x10PMD_400GBASE_LR4\x10\x19\x12\x14\n" +
	"\x10PMD_400GBASE_FR4\x10\x1a\x12\x14\n" +
	"\x10PMD_400GBASE_LR8\x10\x1b\x12\x14\n" +
	"\x10PMD_400GBASE_DR4\x10\x1c\x12\x13\n" +
	"\x0fPMD_100GBASE_DR\x10\x1d\x12\x15\n" +
	"\x11PMD_100GBASE_CGR4\x10\x1eB\x12\n" +
	"\x10card_model_valueB\v\n" +
	"\tpmd_value\"\"\n" +
	"\x04Link\x12\f\n" +
	"\x01a\x18\x01 \x01(\tR\x01a\x12\f\n" +
	"\x01b\x18\x02 \x01(\tR\x01bB%Z#github.com/openconfig/ondatra/protob\x06proto3"

var (
	file_testbed_proto_rawDescOnce sync.Once
	file_testbed_proto_rawDescData []byte
)

func file_testbed_proto_rawDescGZIP() []byte {
	file_testbed_proto_rawDescOnce.Do(func() {
		file_testbed_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_testbed_proto_rawDesc), len(file_testbed_proto_rawDesc)))
	})
	return file_testbed_proto_rawDescData
}

var file_testbed_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_testbed_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_testbed_proto_goTypes = []any{
	(Device_Vendor)(0), // 0: ondatra.Device.Vendor
	(Port_Speed)(0),    // 1: ondatra.Port.Speed
	(Port_Pmd)(0),      // 2: ondatra.Port.Pmd
	(*Testbed)(nil),    // 3: ondatra.Testbed
	(*Device)(nil),     // 4: ondatra.Device
	(*Port)(nil),       // 5: ondatra.Port
	(*Link)(nil),       // 6: ondatra.Link
	nil,                // 7: ondatra.Device.ExtraDimensionsEntry
}
var file_testbed_proto_depIdxs = []int32{
	4, // 0: ondatra.Testbed.duts:type_name -> ondatra.Device
	4, // 1: ondatra.Testbed.ates:type_name -> ondatra.Device
	6, // 2: ondatra.Testbed.links:type_name -> ondatra.Link
	0, // 3: ondatra.Device.vendor:type_name -> ondatra.Device.Vendor
	5, // 4: ondatra.Device.ports:type_name -> ondatra.Port
	7, // 5: ondatra.Device.extra_dimensions:type_name -> ondatra.Device.ExtraDimensionsEntry
	1, // 6: ondatra.Port.speed:type_name -> ondatra.Port.Speed
	2, // 7: ondatra.Port.pmd:type_name -> ondatra.Port.Pmd
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_testbed_proto_init() }
func file_testbed_proto_init() {
	if File_testbed_proto != nil {
		return
	}
	file_testbed_proto_msgTypes[1].OneofWrappers = []any{
		(*Device_HardwareModel)(nil),
		(*Device_HardwareModelRegex)(nil),
		(*Device_SoftwareVersion)(nil),
		(*Device_SoftwareVersionRegex)(nil),
	}
	file_testbed_proto_msgTypes[2].OneofWrappers = []any{
		(*Port_CardModel)(nil),
		(*Port_CardModelRegex)(nil),
		(*Port_Pmd_)(nil),
		(*Port_PmdRegex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_testbed_proto_rawDesc), len(file_testbed_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testbed_proto_goTypes,
		DependencyIndexes: file_testbed_proto_depIdxs,
		EnumInfos:         file_testbed_proto_enumTypes,
		MessageInfos:      file_testbed_proto_msgTypes,
	}.Build()
	File_testbed_proto = out.File
	file_testbed_proto_goTypes = nil
	file_testbed_proto_depIdxs = nil
}
