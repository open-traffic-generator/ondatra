/*
Package terminaldevice is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - gnsi/authz/gnsi-authz.yang
  - gnsi/cert/gnsi-cert.yang
  - gnsi/console/gnsi-console.yang
  - gnsi/pathz/gnsi-pathz.yang
  - gnsi/ssh/gnsi-ssh.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package terminaldevice

import (
	"github.com/openconfig/ygot/ygot"
)

// TerminalDevicePath represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePath struct {
	*ygot.NodePath
}

// TerminalDevicePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePathAny struct {
	*ygot.NodePath
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePath) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePathAny) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePath) Channel(Index uint32) *TerminalDevice_ChannelPath {
	return &TerminalDevice_ChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePathAny) Channel(Index uint32) *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// TerminalDevice_ChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_ChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/description YANG schema element.
type TerminalDevice_Channel_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/description YANG schema element.
type TerminalDevice_Channel_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/index YANG schema element.
type TerminalDevice_Channel_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/index YANG schema element.
type TerminalDevice_Channel_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPathAny struct {
	*ygot.NodePath
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_ChannelPath) AdminState() *TerminalDevice_Channel_AdminStatePath {
	return &TerminalDevice_Channel_AdminStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_ChannelPathAny) AdminState() *TerminalDevice_Channel_AdminStatePathAny {
	return &TerminalDevice_Channel_AdminStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPath) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPathAny) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPath) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPath {
	return &TerminalDevice_Channel_AssignmentPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPathAny) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_ChannelPath) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePath {
	return &TerminalDevice_Channel_ClientMappingModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_ChannelPathAny) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePathAny {
	return &TerminalDevice_Channel_ClientMappingModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_ChannelPath) Description() *TerminalDevice_Channel_DescriptionPath {
	return &TerminalDevice_Channel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_ChannelPathAny) Description() *TerminalDevice_Channel_DescriptionPathAny {
	return &TerminalDevice_Channel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPath) Ethernet() *TerminalDevice_Channel_EthernetPath {
	return &TerminalDevice_Channel_EthernetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPathAny) Ethernet() *TerminalDevice_Channel_EthernetPathAny {
	return &TerminalDevice_Channel_EthernetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_ChannelPath) Index() *TerminalDevice_Channel_IndexPath {
	return &TerminalDevice_Channel_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_ChannelPathAny) Index() *TerminalDevice_Channel_IndexPathAny {
	return &TerminalDevice_Channel_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPath) Ingress() *TerminalDevice_Channel_IngressPath {
	return &TerminalDevice_Channel_IngressPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPathAny) Ingress() *TerminalDevice_Channel_IngressPathAny {
	return &TerminalDevice_Channel_IngressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_ChannelPath) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePath {
	return &TerminalDevice_Channel_LogicalChannelTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_ChannelPathAny) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePathAny {
	return &TerminalDevice_Channel_LogicalChannelTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_ChannelPath) LoopbackMode() *TerminalDevice_Channel_LoopbackModePath {
	return &TerminalDevice_Channel_LoopbackModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_ChannelPathAny) LoopbackMode() *TerminalDevice_Channel_LoopbackModePathAny {
	return &TerminalDevice_Channel_LoopbackModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPath) Otn() *TerminalDevice_Channel_OtnPath {
	return &TerminalDevice_Channel_OtnPath{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPathAny) Otn() *TerminalDevice_Channel_OtnPathAny {
	return &TerminalDevice_Channel_OtnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_ChannelPath) RateClass() *TerminalDevice_Channel_RateClassPath {
	return &TerminalDevice_Channel_RateClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_ChannelPathAny) RateClass() *TerminalDevice_Channel_RateClassPathAny {
	return &TerminalDevice_Channel_RateClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_ChannelPath) TestSignal() *TerminalDevice_Channel_TestSignalPath {
	return &TerminalDevice_Channel_TestSignalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_ChannelPathAny) TestSignal() *TerminalDevice_Channel_TestSignalPathAny {
	return &TerminalDevice_Channel_TestSignalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_ChannelPath) TribProtocol() *TerminalDevice_Channel_TribProtocolPath {
	return &TerminalDevice_Channel_TribProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_ChannelPathAny) TribProtocol() *TerminalDevice_Channel_TribProtocolPathAny {
	return &TerminalDevice_Channel_TribProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_AssignmentPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AssignmentPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny struct {
	*ygot.NodePath
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_AssignmentPath) Allocation() *TerminalDevice_Channel_Assignment_AllocationPath {
	return &TerminalDevice_Channel_Assignment_AllocationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_AssignmentPathAny) Allocation() *TerminalDevice_Channel_Assignment_AllocationPathAny {
	return &TerminalDevice_Channel_Assignment_AllocationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPath) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePath {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPathAny) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePathAny {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_AssignmentPath) Description() *TerminalDevice_Channel_Assignment_DescriptionPath {
	return &TerminalDevice_Channel_Assignment_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_AssignmentPathAny) Description() *TerminalDevice_Channel_Assignment_DescriptionPathAny {
	return &TerminalDevice_Channel_Assignment_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_AssignmentPath) Index() *TerminalDevice_Channel_Assignment_IndexPath {
	return &TerminalDevice_Channel_Assignment_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_AssignmentPathAny) Index() *TerminalDevice_Channel_Assignment_IndexPathAny {
	return &TerminalDevice_Channel_Assignment_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPath {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_AssignmentPath) Mapping() *TerminalDevice_Channel_Assignment_MappingPath {
	return &TerminalDevice_Channel_Assignment_MappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_AssignmentPathAny) Mapping() *TerminalDevice_Channel_Assignment_MappingPathAny {
	return &TerminalDevice_Channel_Assignment_MappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPath {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPath) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPath {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPathAny) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_EthernetPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_EthernetPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPathAny struct {
	*ygot.NodePath
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_EthernetPath) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPath {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_EthernetPathAny) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPathAny {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_EthernetPath) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPath {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_EthernetPathAny) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPathAny {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPath) Lldp() *TerminalDevice_Channel_Ethernet_LldpPath {
	return &TerminalDevice_Channel_Ethernet_LldpPath{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPathAny) Lldp() *TerminalDevice_Channel_Ethernet_LldpPathAny {
	return &TerminalDevice_Channel_Ethernet_LldpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_LldpPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_LldpPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_IngressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IngressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_InterfacePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_InterfacePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_TransceiverPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_TransceiverPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/interface"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_IngressPath) Interface() *TerminalDevice_Channel_Ingress_InterfacePath {
	return &TerminalDevice_Channel_Ingress_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/interface"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_IngressPathAny) Interface() *TerminalDevice_Channel_Ingress_InterfacePathAny {
	return &TerminalDevice_Channel_Ingress_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/physical-channel"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_IngressPath) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPath {
	return &TerminalDevice_Channel_Ingress_PhysicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/physical-channel"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_IngressPathAny) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPathAny {
	return &TerminalDevice_Channel_Ingress_PhysicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/transceiver"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_IngressPath) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPath {
	return &TerminalDevice_Channel_Ingress_TransceiverPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/transceiver"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_IngressPathAny) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPathAny {
	return &TerminalDevice_Channel_Ingress_TransceiverPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_OtnPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_OtnPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny struct {
	*ygot.NodePath
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-granularity"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPath) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPath {
	return &TerminalDevice_Channel_Otn_TributarySlotGranularityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-granularity"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPathAny) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny {
	return &TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-auto"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPath {
	return &TerminalDevice_Channel_Otn_TtiMsgAutoPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-auto"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgAutoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-expected"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPath {
	return &TerminalDevice_Channel_Otn_TtiMsgExpectedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-expected"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-transmit"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPath {
	return &TerminalDevice_Channel_Otn_TtiMsgTransmitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-transmit"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
	}
}
