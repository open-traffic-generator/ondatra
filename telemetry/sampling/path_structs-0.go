/*
Package sampling is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - gnsi/authz/gnsi-authz.yang
  - gnsi/cert/gnsi-cert.yang
  - gnsi/console/gnsi-console.yang
  - gnsi/pathz/gnsi-pathz.yang
  - gnsi/ssh/gnsi-ssh.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package sampling

import (
	"github.com/openconfig/ygot/ygot"
)

// SamplingPath represents the /openconfig-sampling/sampling YANG schema element.
type SamplingPath struct {
	*ygot.NodePath
}

// SamplingPathAny represents the wildcard version of the /openconfig-sampling/sampling YANG schema element.
type SamplingPathAny struct {
	*ygot.NodePath
}

// Sflow (container): Top-level container for sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "sflow"
// Path from root: "/sampling/sflow"
func (n *SamplingPath) Sflow() *Sampling_SflowPath {
	return &Sampling_SflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"sflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sflow (container): Top-level container for sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "sflow"
// Path from root: "/sampling/sflow"
func (n *SamplingPathAny) Sflow() *Sampling_SflowPathAny {
	return &Sampling_SflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sampling_SflowPath represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPath struct {
	*ygot.NodePath
}

// Sampling_SflowPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_AgentIdIpv4Path represents the /openconfig-sampling/sampling/sflow/state/agent-id-ipv4 YANG schema element.
type Sampling_Sflow_AgentIdIpv4Path struct {
	*ygot.NodePath
}

// Sampling_Sflow_AgentIdIpv4PathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/agent-id-ipv4 YANG schema element.
type Sampling_Sflow_AgentIdIpv4PathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_AgentIdIpv6Path represents the /openconfig-sampling/sampling/sflow/state/agent-id-ipv6 YANG schema element.
type Sampling_Sflow_AgentIdIpv6Path struct {
	*ygot.NodePath
}

// Sampling_Sflow_AgentIdIpv6PathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/agent-id-ipv6 YANG schema element.
type Sampling_Sflow_AgentIdIpv6PathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_DscpPath represents the /openconfig-sampling/sampling/sflow/state/dscp YANG schema element.
type Sampling_Sflow_DscpPath struct {
	*ygot.NodePath
}

// Sampling_Sflow_DscpPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/dscp YANG schema element.
type Sampling_Sflow_DscpPathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_EgressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_EgressSamplingRatePath struct {
	*ygot.NodePath
}

// Sampling_Sflow_EgressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/egress-sampling-rate YANG schema element.
type Sampling_Sflow_EgressSamplingRatePathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_EnabledPath represents the /openconfig-sampling/sampling/sflow/state/enabled YANG schema element.
type Sampling_Sflow_EnabledPath struct {
	*ygot.NodePath
}

// Sampling_Sflow_EnabledPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/enabled YANG schema element.
type Sampling_Sflow_EnabledPathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_IngressSamplingRatePath represents the /openconfig-sampling/sampling/sflow/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_IngressSamplingRatePath struct {
	*ygot.NodePath
}

// Sampling_Sflow_IngressSamplingRatePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/ingress-sampling-rate YANG schema element.
type Sampling_Sflow_IngressSamplingRatePathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_PollingIntervalPath represents the /openconfig-sampling/sampling/sflow/state/polling-interval YANG schema element.
type Sampling_Sflow_PollingIntervalPath struct {
	*ygot.NodePath
}

// Sampling_Sflow_PollingIntervalPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/polling-interval YANG schema element.
type Sampling_Sflow_PollingIntervalPathAny struct {
	*ygot.NodePath
}

// Sampling_Sflow_SampleSizePath represents the /openconfig-sampling/sampling/sflow/state/sample-size YANG schema element.
type Sampling_Sflow_SampleSizePath struct {
	*ygot.NodePath
}

// Sampling_Sflow_SampleSizePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/state/sample-size YANG schema element.
type Sampling_Sflow_SampleSizePathAny struct {
	*ygot.NodePath
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/agent-id-ipv4"
// Path from root: "/sampling/sflow/state/agent-id-ipv4"
func (n *Sampling_SflowPath) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4Path {
	return &Sampling_Sflow_AgentIdIpv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/agent-id-ipv4"
// Path from root: "/sampling/sflow/state/agent-id-ipv4"
func (n *Sampling_SflowPathAny) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4PathAny {
	return &Sampling_Sflow_AgentIdIpv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/agent-id-ipv6"
// Path from root: "/sampling/sflow/state/agent-id-ipv6"
func (n *Sampling_SflowPath) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6Path {
	return &Sampling_Sflow_AgentIdIpv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/agent-id-ipv6"
// Path from root: "/sampling/sflow/state/agent-id-ipv6"
func (n *Sampling_SflowPathAny) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6PathAny {
	return &Sampling_Sflow_AgentIdIpv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address (wildcarded): string
// Port (wildcarded): uint16
func (n *Sampling_SflowPath) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address (wildcarded): string
// Port (wildcarded): uint16
func (n *Sampling_SflowPathAny) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
}

// CollectorAnyPort (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address: string
// Port (wildcarded): uint16
func (n *Sampling_SflowPath) CollectorAnyPort(Address string) *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": "*"},
			n,
		),
	}
}

// CollectorAnyPort (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address: string
// Port (wildcarded): uint16
func (n *Sampling_SflowPathAny) CollectorAnyPort(Address string) *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": "*"},
			n,
		),
	}
}

// CollectorAnyAddress (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address (wildcarded): string
// Port: uint16
func (n *Sampling_SflowPath) CollectorAnyAddress(Port uint16) *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": Port},
			n,
		),
	}
}

// CollectorAnyAddress (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address (wildcarded): string
// Port: uint16
func (n *Sampling_SflowPathAny) CollectorAnyAddress(Port uint16) *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": Port},
			n,
		),
	}
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address: string
// Port: uint16
func (n *Sampling_SflowPath) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPath {
	return &Sampling_Sflow_CollectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "collectors/collector"
// Path from root: "/sampling/sflow/collectors/collector"
// Address: string
// Port: uint16
func (n *Sampling_SflowPathAny) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPathAny {
	return &Sampling_Sflow_CollectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/dscp"
// Path from root: "/sampling/sflow/state/dscp"
func (n *Sampling_SflowPath) Dscp() *Sampling_Sflow_DscpPath {
	return &Sampling_Sflow_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/dscp"
// Path from root: "/sampling/sflow/state/dscp"
func (n *Sampling_SflowPathAny) Dscp() *Sampling_Sflow_DscpPathAny {
	return &Sampling_Sflow_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/egress-sampling-rate"
// Path from root: "/sampling/sflow/state/egress-sampling-rate"
func (n *Sampling_SflowPath) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePath {
	return &Sampling_Sflow_EgressSamplingRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/egress-sampling-rate"
// Path from root: "/sampling/sflow/state/egress-sampling-rate"
func (n *Sampling_SflowPathAny) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePathAny {
	return &Sampling_Sflow_EgressSamplingRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/enabled"
// Path from root: "/sampling/sflow/state/enabled"
func (n *Sampling_SflowPath) Enabled() *Sampling_Sflow_EnabledPath {
	return &Sampling_Sflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/enabled"
// Path from root: "/sampling/sflow/state/enabled"
func (n *Sampling_SflowPathAny) Enabled() *Sampling_Sflow_EnabledPathAny {
	return &Sampling_Sflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/ingress-sampling-rate"
// Path from root: "/sampling/sflow/state/ingress-sampling-rate"
func (n *Sampling_SflowPath) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePath {
	return &Sampling_Sflow_IngressSamplingRatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/ingress-sampling-rate"
// Path from root: "/sampling/sflow/state/ingress-sampling-rate"
func (n *Sampling_SflowPathAny) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePathAny {
	return &Sampling_Sflow_IngressSamplingRatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces with sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "interfaces/interface"
// Path from root: "/sampling/sflow/interfaces/interface"
// Name (wildcarded): string
func (n *Sampling_SflowPath) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	return &Sampling_Sflow_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces with sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "interfaces/interface"
// Path from root: "/sampling/sflow/interfaces/interface"
// Name (wildcarded): string
func (n *Sampling_SflowPathAny) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	return &Sampling_Sflow_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces with sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "interfaces/interface"
// Path from root: "/sampling/sflow/interfaces/interface"
// Name: string
func (n *Sampling_SflowPath) Interface(Name string) *Sampling_Sflow_InterfacePath {
	return &Sampling_Sflow_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces with sFlow data.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "interfaces/interface"
// Path from root: "/sampling/sflow/interfaces/interface"
// Name: string
func (n *Sampling_SflowPathAny) Interface(Name string) *Sampling_Sflow_InterfacePathAny {
	return &Sampling_Sflow_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/polling-interval"
// Path from root: "/sampling/sflow/state/polling-interval"
func (n *Sampling_SflowPath) PollingInterval() *Sampling_Sflow_PollingIntervalPath {
	return &Sampling_Sflow_PollingIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "polling-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/polling-interval"
// Path from root: "/sampling/sflow/state/polling-interval"
func (n *Sampling_SflowPathAny) PollingInterval() *Sampling_Sflow_PollingIntervalPathAny {
	return &Sampling_Sflow_PollingIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "polling-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/sample-size"
// Path from root: "/sampling/sflow/state/sample-size"
func (n *Sampling_SflowPath) SampleSize() *Sampling_Sflow_SampleSizePath {
	return &Sampling_Sflow_SampleSizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sample-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
// ----------------------------------------
// Defining module: "openconfig-sampling-sflow"
// Instantiating module: "openconfig-sampling"
// Path from parent: "state/sample-size"
// Path from root: "/sampling/sflow/state/sample-size"
func (n *Sampling_SflowPathAny) SampleSize() *Sampling_Sflow_SampleSizePathAny {
	return &Sampling_Sflow_SampleSizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sample-size"},
			map[string]interface{}{},
			n,
		),
	}
}
