/*
Package otg is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/types/open-traffic-generator-types.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package otg

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// IsisRouter_Counters represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters YANG schema element.
type IsisRouter_Counters struct {
	Level1 *IsisRouter_Counters_Level1 `path:"level1" module:"open-traffic-generator-isis"`
	Level2 *IsisRouter_Counters_Level2 `path:"level2" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters) IsYANGGoStruct() {}

// GetOrCreateLevel1 retrieves the value of the Level1 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel1() *IsisRouter_Counters_Level1 {
	if t.Level1 != nil {
		return t.Level1
	}
	t.Level1 = &IsisRouter_Counters_Level1{}
	return t.Level1
}

// GetOrCreateLevel2 retrieves the value of the Level2 field
// or returns the existing field if it already exists.
func (t *IsisRouter_Counters) GetOrCreateLevel2() *IsisRouter_Counters_Level2 {
	if t.Level2 != nil {
		return t.Level2
	}
	t.Level2 = &IsisRouter_Counters_Level2{}
	return t.Level2
}

// GetLevel1 returns the value of the Level1 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel1() *IsisRouter_Counters_Level1 {
	if t != nil && t.Level1 != nil {
		return t.Level1
	}
	return nil
}

// GetLevel2 returns the value of the Level2 struct pointer
// from IsisRouter_Counters. If the receiver or the field Level2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_Counters) GetLevel2() *IsisRouter_Counters_Level2 {
	if t != nil && t.Level2 != nil {
		return t.Level2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1.PopulateDefaults()
	t.Level2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters.
func (*IsisRouter_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_Counters_Level1 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level1 YANG schema element.
type IsisRouter_Counters_Level1 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level1) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level1) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetDatabaseSize sets the value of the leaf DatabaseSize in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetDatabaseSize(v uint64) {
	t.DatabaseSize = &v
}

// SetInBcastHellos sets the value of the leaf InBcastHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInBcastHellos(v uint64) {
	t.InBcastHellos = &v
}

// SetInCsnp sets the value of the leaf InCsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInCsnp(v uint64) {
	t.InCsnp = &v
}

// SetInLsp sets the value of the leaf InLsp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInLsp(v uint64) {
	t.InLsp = &v
}

// SetInP2PHellos sets the value of the leaf InP2PHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInP2PHellos(v uint64) {
	t.InP2PHellos = &v
}

// SetInPsnp sets the value of the leaf InPsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetInPsnp(v uint64) {
	t.InPsnp = &v
}

// SetOutBcastHellos sets the value of the leaf OutBcastHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutBcastHellos(v uint64) {
	t.OutBcastHellos = &v
}

// SetOutCsnp sets the value of the leaf OutCsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutCsnp(v uint64) {
	t.OutCsnp = &v
}

// SetOutLsp sets the value of the leaf OutLsp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutLsp(v uint64) {
	t.OutLsp = &v
}

// SetOutP2PHellos sets the value of the leaf OutP2PHellos in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutP2PHellos(v uint64) {
	t.OutP2PHellos = &v
}

// SetOutPsnp sets the value of the leaf OutPsnp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetOutPsnp(v uint64) {
	t.OutPsnp = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the IsisRouter_Counters_Level1
// struct.
func (t *IsisRouter_Counters_Level1) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters_Level1.
func (*IsisRouter_Counters_Level1) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_Counters_Level2 represents the /open-traffic-generator-isis/isis-routers/isis-router/state/counters/level2 YANG schema element.
type IsisRouter_Counters_Level2 struct {
	DatabaseSize   *uint64 `path:"database-size" module:"open-traffic-generator-isis"`
	InBcastHellos  *uint64 `path:"in-bcast-hellos" module:"open-traffic-generator-isis"`
	InCsnp         *uint64 `path:"in-csnp" module:"open-traffic-generator-isis"`
	InLsp          *uint64 `path:"in-lsp" module:"open-traffic-generator-isis"`
	InP2PHellos    *uint64 `path:"in-p2p-hellos" module:"open-traffic-generator-isis"`
	InPsnp         *uint64 `path:"in-psnp" module:"open-traffic-generator-isis"`
	OutBcastHellos *uint64 `path:"out-bcast-hellos" module:"open-traffic-generator-isis"`
	OutCsnp        *uint64 `path:"out-csnp" module:"open-traffic-generator-isis"`
	OutLsp         *uint64 `path:"out-lsp" module:"open-traffic-generator-isis"`
	OutP2PHellos   *uint64 `path:"out-p2p-hellos" module:"open-traffic-generator-isis"`
	OutPsnp        *uint64 `path:"out-psnp" module:"open-traffic-generator-isis"`
	SessionsFlap   *uint64 `path:"sessions-flap" module:"open-traffic-generator-isis"`
	SessionsUp     *uint64 `path:"sessions-up" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_Counters_Level2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_Counters_Level2) IsYANGGoStruct() {}

// GetDatabaseSize retrieves the value of the leaf DatabaseSize from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseSize is set, it can
// safely use t.GetDatabaseSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseSize == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetDatabaseSize() uint64 {
	if t == nil || t.DatabaseSize == nil {
		return 0
	}
	return *t.DatabaseSize
}

// GetInBcastHellos retrieves the value of the leaf InBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBcastHellos is set, it can
// safely use t.GetInBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInBcastHellos() uint64 {
	if t == nil || t.InBcastHellos == nil {
		return 0
	}
	return *t.InBcastHellos
}

// GetInCsnp retrieves the value of the leaf InCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCsnp is set, it can
// safely use t.GetInCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInCsnp() uint64 {
	if t == nil || t.InCsnp == nil {
		return 0
	}
	return *t.InCsnp
}

// GetInLsp retrieves the value of the leaf InLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLsp is set, it can
// safely use t.GetInLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInLsp() uint64 {
	if t == nil || t.InLsp == nil {
		return 0
	}
	return *t.InLsp
}

// GetInP2PHellos retrieves the value of the leaf InP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InP2PHellos is set, it can
// safely use t.GetInP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInP2PHellos() uint64 {
	if t == nil || t.InP2PHellos == nil {
		return 0
	}
	return *t.InP2PHellos
}

// GetInPsnp retrieves the value of the leaf InPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPsnp is set, it can
// safely use t.GetInPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetInPsnp() uint64 {
	if t == nil || t.InPsnp == nil {
		return 0
	}
	return *t.InPsnp
}

// GetOutBcastHellos retrieves the value of the leaf OutBcastHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBcastHellos is set, it can
// safely use t.GetOutBcastHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBcastHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutBcastHellos() uint64 {
	if t == nil || t.OutBcastHellos == nil {
		return 0
	}
	return *t.OutBcastHellos
}

// GetOutCsnp retrieves the value of the leaf OutCsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCsnp is set, it can
// safely use t.GetOutCsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutCsnp() uint64 {
	if t == nil || t.OutCsnp == nil {
		return 0
	}
	return *t.OutCsnp
}

// GetOutLsp retrieves the value of the leaf OutLsp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLsp is set, it can
// safely use t.GetOutLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLsp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutLsp() uint64 {
	if t == nil || t.OutLsp == nil {
		return 0
	}
	return *t.OutLsp
}

// GetOutP2PHellos retrieves the value of the leaf OutP2PHellos from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutP2PHellos is set, it can
// safely use t.GetOutP2PHellos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutP2PHellos == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutP2PHellos() uint64 {
	if t == nil || t.OutP2PHellos == nil {
		return 0
	}
	return *t.OutP2PHellos
}

// GetOutPsnp retrieves the value of the leaf OutPsnp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPsnp is set, it can
// safely use t.GetOutPsnp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPsnp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetOutPsnp() uint64 {
	if t == nil || t.OutPsnp == nil {
		return 0
	}
	return *t.OutPsnp
}

// GetSessionsFlap retrieves the value of the leaf SessionsFlap from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsFlap is set, it can
// safely use t.GetSessionsFlap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsFlap == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsFlap() uint64 {
	if t == nil || t.SessionsFlap == nil {
		return 0
	}
	return *t.SessionsFlap
}

// GetSessionsUp retrieves the value of the leaf SessionsUp from the IsisRouter_Counters_Level2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionsUp is set, it can
// safely use t.GetSessionsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionsUp == nil' before retrieving the leaf's value.
func (t *IsisRouter_Counters_Level2) GetSessionsUp() uint64 {
	if t == nil || t.SessionsUp == nil {
		return 0
	}
	return *t.SessionsUp
}

// SetDatabaseSize sets the value of the leaf DatabaseSize in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetDatabaseSize(v uint64) {
	t.DatabaseSize = &v
}

// SetInBcastHellos sets the value of the leaf InBcastHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInBcastHellos(v uint64) {
	t.InBcastHellos = &v
}

// SetInCsnp sets the value of the leaf InCsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInCsnp(v uint64) {
	t.InCsnp = &v
}

// SetInLsp sets the value of the leaf InLsp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInLsp(v uint64) {
	t.InLsp = &v
}

// SetInP2PHellos sets the value of the leaf InP2PHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInP2PHellos(v uint64) {
	t.InP2PHellos = &v
}

// SetInPsnp sets the value of the leaf InPsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetInPsnp(v uint64) {
	t.InPsnp = &v
}

// SetOutBcastHellos sets the value of the leaf OutBcastHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutBcastHellos(v uint64) {
	t.OutBcastHellos = &v
}

// SetOutCsnp sets the value of the leaf OutCsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutCsnp(v uint64) {
	t.OutCsnp = &v
}

// SetOutLsp sets the value of the leaf OutLsp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutLsp(v uint64) {
	t.OutLsp = &v
}

// SetOutP2PHellos sets the value of the leaf OutP2PHellos in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutP2PHellos(v uint64) {
	t.OutP2PHellos = &v
}

// SetOutPsnp sets the value of the leaf OutPsnp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetOutPsnp(v uint64) {
	t.OutPsnp = &v
}

// SetSessionsFlap sets the value of the leaf SessionsFlap in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetSessionsFlap(v uint64) {
	t.SessionsFlap = &v
}

// SetSessionsUp sets the value of the leaf SessionsUp in the IsisRouter_Counters_Level2
// struct.
func (t *IsisRouter_Counters_Level2) SetSessionsUp(v uint64) {
	t.SessionsUp = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_Counters_Level2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_Counters_Level2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_Counters_Level2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_Counters_Level2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_Counters_Level2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_Counters_Level2.
func (*IsisRouter_Counters_Level2) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database YANG schema element.
type IsisRouter_LinkStateDatabase struct {
	Lsps map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps `path:"lsp-states/lsps" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase) IsYANGGoStruct() {}

// IsisRouter_LinkStateDatabase_Lsps_Key represents the key for list Lsps of element /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database.
type IsisRouter_LinkStateDatabase_Lsps_Key struct {
	LspId   string         `path:"lsp-id"`
	PduType E_Lsps_PduType `path:"pdu-type"`
}

// NewLsps creates a new entry in the Lsps list of the
// IsisRouter_LinkStateDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase) NewLsps(LspId string, PduType E_Lsps_PduType) (*IsisRouter_LinkStateDatabase_Lsps, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsps == nil {
		t.Lsps = make(map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps)
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsps", key)
	}

	t.Lsps[key] = &IsisRouter_LinkStateDatabase_Lsps{
		LspId:   &LspId,
		PduType: PduType,
	}

	return t.Lsps[key], nil
}

// RenameLsps renames an entry in the list Lsps within
// the IsisRouter_LinkStateDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase) RenameLsps(oldK, newK IsisRouter_LinkStateDatabase_Lsps_Key) error {
	if _, ok := t.Lsps[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsps", newK)
	}

	e, ok := t.Lsps[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsps", oldK)
	}
	e.LspId = &newK.LspId
	e.PduType = newK.PduType

	t.Lsps[newK] = e
	delete(t.Lsps, oldK)
	return nil
}

// GetOrCreateLsps retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase) GetOrCreateLsps(LspId string, PduType E_Lsps_PduType) *IsisRouter_LinkStateDatabase_Lsps {

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	if v, ok := t.Lsps[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsps(LspId, PduType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsps got unexpected error: %v", err))
	}
	return v
}

// GetLsps retrieves the value with the specified key from
// the Lsps map field of IsisRouter_LinkStateDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase) GetLsps(LspId string, PduType E_Lsps_PduType) *IsisRouter_LinkStateDatabase_Lsps {

	if t == nil {
		return nil
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	if lm, ok := t.Lsps[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsps deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase) DeleteLsps(LspId string, PduType E_Lsps_PduType) {
	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   LspId,
		PduType: PduType,
	}

	delete(t.Lsps, key)
}

// AppendLsps appends the supplied IsisRouter_LinkStateDatabase_Lsps struct to the
// list Lsps of IsisRouter_LinkStateDatabase. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase) AppendLsps(v *IsisRouter_LinkStateDatabase_Lsps) error {
	if v.LspId == nil {
		return fmt.Errorf("invalid nil key for LspId")
	}

	key := IsisRouter_LinkStateDatabase_Lsps_Key{
		LspId:   *v.LspId,
		PduType: v.PduType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsps == nil {
		t.Lsps = make(map[IsisRouter_LinkStateDatabase_Lsps_Key]*IsisRouter_LinkStateDatabase_Lsps)
	}

	if _, ok := t.Lsps[key]; ok {
		return fmt.Errorf("duplicate key for list Lsps %v", key)
	}

	t.Lsps[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsps {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase.
func (*IsisRouter_LinkStateDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps struct {
	Flags             []E_Lsps_Flags                          `path:"state/flags" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	IsType            *uint8                                  `path:"state/is-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	LspId             *string                                 `path:"state/lsp-id|lsp-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"lsp-id" shadow-module:"open-traffic-generator-isis"`
	PduLength         *uint16                                 `path:"state/pdu-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PduType           E_Lsps_PduType                          `path:"state/pdu-type|pdu-type" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"pdu-type" shadow-module:"open-traffic-generator-isis"`
	RemainingLifetime *uint16                                 `path:"state/remaining-lifetime" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	SequenceNumber    *uint32                                 `path:"state/sequence-number" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Tlvs              *IsisRouter_LinkStateDatabase_Lsps_Tlvs `path:"tlvs" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps) IsYANGGoStruct() {}

// GetOrCreateTlvs retrieves the value of the Tlvs field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetOrCreateTlvs() *IsisRouter_LinkStateDatabase_Lsps_Tlvs {
	if t.Tlvs != nil {
		return t.Tlvs
	}
	t.Tlvs = &IsisRouter_LinkStateDatabase_Lsps_Tlvs{}
	return t.Tlvs
}

// GetTlvs returns the value of the Tlvs struct pointer
// from IsisRouter_LinkStateDatabase_Lsps. If the receiver or the field Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetTlvs() *IsisRouter_LinkStateDatabase_Lsps_Tlvs {
	if t != nil && t.Tlvs != nil {
		return t.Tlvs
	}
	return nil
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetFlags() []E_Lsps_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// GetIsType retrieves the value of the leaf IsType from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsType is set, it can
// safely use t.GetIsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetIsType() uint8 {
	if t == nil || t.IsType == nil {
		return 0
	}
	return *t.IsType
}

// GetLspId retrieves the value of the leaf LspId from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspId is set, it can
// safely use t.GetLspId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetLspId() string {
	if t == nil || t.LspId == nil {
		return ""
	}
	return *t.LspId
}

// GetPduLength retrieves the value of the leaf PduLength from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PduLength is set, it can
// safely use t.GetPduLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PduLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetPduLength() uint16 {
	if t == nil || t.PduLength == nil {
		return 0
	}
	return *t.PduLength
}

// GetPduType retrieves the value of the leaf PduType from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PduType is set, it can
// safely use t.GetPduType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PduType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetPduType() E_Lsps_PduType {
	if t == nil || t.PduType == 0 {
		return 0
	}
	return t.PduType
}

// GetRemainingLifetime retrieves the value of the leaf RemainingLifetime from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainingLifetime is set, it can
// safely use t.GetRemainingLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainingLifetime == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetRemainingLifetime() uint16 {
	if t == nil || t.RemainingLifetime == nil {
		return 0
	}
	return *t.RemainingLifetime
}

// GetSequenceNumber retrieves the value of the leaf SequenceNumber from the IsisRouter_LinkStateDatabase_Lsps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceNumber is set, it can
// safely use t.GetSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceNumber == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps) GetSequenceNumber() uint32 {
	if t == nil || t.SequenceNumber == nil {
		return 0
	}
	return *t.SequenceNumber
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetFlags(v []E_Lsps_Flags) {
	t.Flags = v
}

// SetIsType sets the value of the leaf IsType in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetIsType(v uint8) {
	t.IsType = &v
}

// SetLspId sets the value of the leaf LspId in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetLspId(v string) {
	t.LspId = &v
}

// SetPduLength sets the value of the leaf PduLength in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetPduLength(v uint16) {
	t.PduLength = &v
}

// SetPduType sets the value of the leaf PduType in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetPduType(v E_Lsps_PduType) {
	t.PduType = v
}

// SetRemainingLifetime sets the value of the leaf RemainingLifetime in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetRemainingLifetime(v uint16) {
	t.RemainingLifetime = &v
}

// SetSequenceNumber sets the value of the leaf SequenceNumber in the IsisRouter_LinkStateDatabase_Lsps
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps) SetSequenceNumber(v uint32) {
	t.SequenceNumber = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Tlvs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspId == nil {
		return nil, fmt.Errorf("nil value for key LspId")
	}

	return map[string]interface{}{
		"lsp-id":   *t.LspId,
		"pdu-type": t.PduType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps.
func (*IsisRouter_LinkStateDatabase_Lsps) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs struct {
	ExtendedIpv4Reachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability `path:"extended-ipv4-reachability" module:"open-traffic-generator-isis"`
	ExtendedIsReachability   *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability   `path:"extended-is-reachability" module:"open-traffic-generator-isis"`
	Hostnames                *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames                `path:"hostnames" module:"open-traffic-generator-isis"`
	Ipv4ExternalReachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability `path:"ipv4-external-reachability" module:"open-traffic-generator-isis"`
	Ipv4InternalReachability *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability `path:"ipv4-internal-reachability" module:"open-traffic-generator-isis"`
	Ipv6Reachability         *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability         `path:"ipv6-reachability" module:"open-traffic-generator-isis"`
	IsReachability           *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability           `path:"is-reachability" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs) IsYANGGoStruct() {}

// GetOrCreateExtendedIpv4Reachability retrieves the value of the ExtendedIpv4Reachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability {
	if t.ExtendedIpv4Reachability != nil {
		return t.ExtendedIpv4Reachability
	}
	t.ExtendedIpv4Reachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability{}
	return t.ExtendedIpv4Reachability
}

// GetOrCreateExtendedIsReachability retrieves the value of the ExtendedIsReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability {
	if t.ExtendedIsReachability != nil {
		return t.ExtendedIsReachability
	}
	t.ExtendedIsReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability{}
	return t.ExtendedIsReachability
}

// GetOrCreateHostnames retrieves the value of the Hostnames field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateHostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames {
	if t.Hostnames != nil {
		return t.Hostnames
	}
	t.Hostnames = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames{}
	return t.Hostnames
}

// GetOrCreateIpv4ExternalReachability retrieves the value of the Ipv4ExternalReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability {
	if t.Ipv4ExternalReachability != nil {
		return t.Ipv4ExternalReachability
	}
	t.Ipv4ExternalReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability{}
	return t.Ipv4ExternalReachability
}

// GetOrCreateIpv4InternalReachability retrieves the value of the Ipv4InternalReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability {
	if t.Ipv4InternalReachability != nil {
		return t.Ipv4InternalReachability
	}
	t.Ipv4InternalReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability{}
	return t.Ipv4InternalReachability
}

// GetOrCreateIpv6Reachability retrieves the value of the Ipv6Reachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIpv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability {
	if t.Ipv6Reachability != nil {
		return t.Ipv6Reachability
	}
	t.Ipv6Reachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability{}
	return t.Ipv6Reachability
}

// GetOrCreateIsReachability retrieves the value of the IsReachability field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetOrCreateIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability {
	if t.IsReachability != nil {
		return t.IsReachability
	}
	t.IsReachability = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability{}
	return t.IsReachability
}

// GetExtendedIpv4Reachability returns the value of the ExtendedIpv4Reachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field ExtendedIpv4Reachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetExtendedIpv4Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability {
	if t != nil && t.ExtendedIpv4Reachability != nil {
		return t.ExtendedIpv4Reachability
	}
	return nil
}

// GetExtendedIsReachability returns the value of the ExtendedIsReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field ExtendedIsReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetExtendedIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability {
	if t != nil && t.ExtendedIsReachability != nil {
		return t.ExtendedIsReachability
	}
	return nil
}

// GetHostnames returns the value of the Hostnames struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Hostnames is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetHostnames() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames {
	if t != nil && t.Hostnames != nil {
		return t.Hostnames
	}
	return nil
}

// GetIpv4ExternalReachability returns the value of the Ipv4ExternalReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv4ExternalReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv4ExternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability {
	if t != nil && t.Ipv4ExternalReachability != nil {
		return t.Ipv4ExternalReachability
	}
	return nil
}

// GetIpv4InternalReachability returns the value of the Ipv4InternalReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv4InternalReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv4InternalReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability {
	if t != nil && t.Ipv4InternalReachability != nil {
		return t.Ipv4InternalReachability
	}
	return nil
}

// GetIpv6Reachability returns the value of the Ipv6Reachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field Ipv6Reachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIpv6Reachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv6Reachability {
	if t != nil && t.Ipv6Reachability != nil {
		return t.Ipv6Reachability
	}
	return nil
}

// GetIsReachability returns the value of the IsReachability struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs. If the receiver or the field IsReachability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) GetIsReachability() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability {
	if t != nil && t.IsReachability != nil {
		return t.IsReachability
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedIpv4Reachability.PopulateDefaults()
	t.ExtendedIsReachability.PopulateDefaults()
	t.Hostnames.PopulateDefaults()
	t.Ipv4ExternalReachability.PopulateDefaults()
	t.Ipv4InternalReachability.PopulateDefaults()
	t.Ipv6Reachability.PopulateDefaults()
	t.IsReachability.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct {
	Metric             *uint32                                                                                  `path:"state/metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                                                                  `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixAttributes   *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes `path:"state/prefix-attributes" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	PrefixLength       *uint32                                                                                  `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_ExtendedIpv4Reachability_Prefix_RedistributionType                                     `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) IsYANGGoStruct() {}

// GetOrCreatePrefixAttributes retrieves the value of the PrefixAttributes field
// or returns the existing field if it already exists.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetOrCreatePrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes {
	if t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	t.PrefixAttributes = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes{}
	return t.PrefixAttributes
}

// GetPrefixAttributes returns the value of the PrefixAttributes struct pointer
// from IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix. If the receiver or the field PrefixAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefixAttributes() *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes {
	if t != nil && t.PrefixAttributes != nil {
		return t.PrefixAttributes
	}
	return nil
}

// GetMetric retrieves the value of the leaf Metric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) GetRedistributionType() E_ExtendedIpv4Reachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetMetric sets the value of the leaf Metric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetMetric(v uint32) {
	t.Metric = &v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) SetRedistributionType(v E_ExtendedIpv4Reachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixAttributes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-ipv4-reachability/prefixes/prefix/state/prefix-attributes YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes struct {
	Flags []E_State_Flags `path:"flags" module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) IsYANGGoStruct() {
}

// GetFlags retrieves the value of the leaf Flags from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flags is set, it can
// safely use t.GetFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flags == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) GetFlags() []E_State_Flags {
	if t == nil || t.Flags == nil {
		return nil
	}
	return t.Flags
}

// SetFlags sets the value of the leaf Flags in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) SetFlags(v []E_State_Flags) {
	t.Flags = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIpv4Reachability_Prefix_PrefixAttributes) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct {
	Neighbor map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor `path:"neighbors/neighbor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) NewNeighbor(SystemId string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
	}

	key := SystemId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor{
		SystemId: &SystemId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.SystemId = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) GetOrCreateNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor {

	key := SystemId

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(SystemId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) GetNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor {

	if t == nil {
		return nil
	}

	key := SystemId

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) DeleteNeighbor(SystemId string) {
	key := SystemId

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct to the
// list Neighbor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) AppendNeighbor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) error {
	if v.SystemId == nil {
		return fmt.Errorf("invalid nil key received for SystemId")
	}

	key := *v.SystemId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/extended-is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct {
	SystemId *string `path:"state/system-id|system-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"system-id" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) IsYANGGoStruct() {}

// GetSystemId retrieves the value of the leaf SystemId from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// SetSystemId sets the value of the leaf SystemId in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) SetSystemId(v string) {
	t.SystemId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SystemId == nil {
		return nil, fmt.Errorf("nil value for key SystemId")
	}

	return map[string]interface{}{
		"system-id": *t.SystemId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_ExtendedIsReachability_Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/hostnames YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames struct {
	Hostname []string `path:"state/hostname" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) IsYANGGoStruct() {}

// GetHostname retrieves the value of the leaf Hostname from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) GetHostname() []string {
	if t == nil || t.Hostname == nil {
		return nil
	}
	return t.Hostname
}

// SetHostname sets the value of the leaf Hostname in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) SetHostname(v []string) {
	t.Hostname = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Hostnames) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-external-reachability/prefixes/prefix YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct {
	DefaultMetric      *uint8                                               `path:"state/default-metric" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	OriginType         E_Ipv4ExternalReachability_Prefix_OriginType         `path:"state/origin-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	Prefix             *string                                              `path:"state/prefix|prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"prefix" shadow-module:"open-traffic-generator-isis"`
	PrefixLength       *uint32                                              `path:"state/prefix-length" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
	RedistributionType E_Ipv4ExternalReachability_Prefix_RedistributionType `path:"state/redistribution-type" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetDefaultMetric() uint8 {
	if t == nil || t.DefaultMetric == nil {
		return 0
	}
	return *t.DefaultMetric
}

// GetOriginType retrieves the value of the leaf OriginType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginType is set, it can
// safely use t.GetOriginType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetOriginType() E_Ipv4ExternalReachability_Prefix_OriginType {
	if t == nil || t.OriginType == 0 {
		return 0
	}
	return t.OriginType
}

// GetPrefix retrieves the value of the leaf Prefix from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRedistributionType retrieves the value of the leaf RedistributionType from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributionType is set, it can
// safely use t.GetRedistributionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributionType == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) GetRedistributionType() E_Ipv4ExternalReachability_Prefix_RedistributionType {
	if t == nil || t.RedistributionType == 0 {
		return 0
	}
	return t.RedistributionType
}

// SetDefaultMetric sets the value of the leaf DefaultMetric in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetDefaultMetric(v uint8) {
	t.DefaultMetric = &v
}

// SetOriginType sets the value of the leaf OriginType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetOriginType(v E_Ipv4ExternalReachability_Prefix_OriginType) {
	t.OriginType = v
}

// SetPrefix sets the value of the leaf Prefix in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetPrefix(v string) {
	t.Prefix = &v
}

// SetPrefixLength sets the value of the leaf PrefixLength in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetPrefixLength(v uint32) {
	t.PrefixLength = &v
}

// SetRedistributionType sets the value of the leaf RedistributionType in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) SetRedistributionType(v E_Ipv4ExternalReachability_Prefix_RedistributionType) {
	t.RedistributionType = v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4ExternalReachability_Prefix) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/ipv4-internal-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct {
	Prefix map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix `path:"prefixes/prefix" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) NewPrefix(Prefix string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix{
		Prefix: &Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) GetOrCreatePrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix {

	key := Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) GetPrefix(Prefix string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) DeletePrefix(Prefix string) {
	key := Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix struct to the
// list Prefix of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) AppendPrefix(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_Ipv4InternalReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}
