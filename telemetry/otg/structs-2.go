/*
Package otg is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/athena/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
	- models-yang/models/lacp/open-traffic-generator-lacp.yang
	- models-yang/models/lag/open-traffic-generator-lag.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otg

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Lacp represents the /open-traffic-generator-lacp/lacp YANG schema element.
type Lacp struct {
	LagMember map[string]*Lacp_LagMember `path:"lag-members/lag-member" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp) IsYANGGoStruct() {}

// NewLagMember creates a new entry in the LagMember list of the
// Lacp struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp) NewLagMember(Name string) (*Lacp_LagMember, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LagMember[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LagMember", key)
	}

	t.LagMember[key] = &Lacp_LagMember{
		Name: &Name,
	}

	return t.LagMember[key], nil
}

// RenameLagMember renames an entry in the list LagMember within
// the Lacp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp) RenameLagMember(oldK, newK string) error {
	if _, ok := t.LagMember[newK]; ok {
		return fmt.Errorf("key %v already exists in LagMember", newK)
	}

	e, ok := t.LagMember[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LagMember", oldK)
	}
	e.Name = &newK

	t.LagMember[newK] = e
	delete(t.LagMember, oldK)
	return nil
}

// GetOrCreateLagMember retrieves the value with the specified keys from
// the receiver Lacp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp) GetOrCreateLagMember(Name string) *Lacp_LagMember {

	key := Name

	if v, ok := t.LagMember[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLagMember(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLagMember got unexpected error: %v", err))
	}
	return v
}

// GetLagMember retrieves the value with the specified key from
// the LagMember map field of Lacp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp) GetLagMember(Name string) *Lacp_LagMember {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LagMember[key]; ok {
		return lm
	}
	return nil
}

// DeleteLagMember deletes the value with the specified keys from
// the receiver Lacp. If there is no such element, the function
// is a no-op.
func (t *Lacp) DeleteLagMember(Name string) {
	key := Name

	delete(t.LagMember, key)
}

// AppendLagMember appends the supplied Lacp_LagMember struct to the
// list LagMember of Lacp. If the key value(s) specified in
// the supplied Lacp_LagMember already exist in the list, an error is
// returned.
func (t *Lacp) AppendLagMember(v *Lacp_LagMember) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	if _, ok := t.LagMember[key]; ok {
		return fmt.Errorf("duplicate key for list LagMember %v", key)
	}

	t.LagMember[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LagMember {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp.
func (*Lacp) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMember struct {
	Activity        E_OpenTrafficGeneratorLacp_LacpActivityType        `path:"state/activity" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Aggregatable    *bool                                              `path:"state/aggregatable" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Collecting      *bool                                              `path:"state/collecting" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Counters        *Lacp_LagMember_Counters                           `path:"state/counters" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Distributing    *bool                                              `path:"state/distributing" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Name            *string                                            `path:"state/name|name" module:"open-traffic-generator-lacp/open-traffic-generator-lacp|open-traffic-generator-lacp" shadow-path:"name" shadow-module:"open-traffic-generator-lacp"`
	OperKey         *uint16                                            `path:"state/oper-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerId       *string                                            `path:"state/partner-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerKey      *uint16                                            `path:"state/partner-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerPortNum  *uint16                                            `path:"state/partner-port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PortNum         *uint16                                            `path:"state/port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Synchronization E_OpenTrafficGeneratorLacp_LacpSynchronizationType `path:"state/synchronization" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	SystemId        *string                                            `path:"state/system-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Timeout         E_OpenTrafficGeneratorLacp_LacpTimeoutType         `path:"state/timeout" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lacp_LagMember) GetOrCreateCounters() *Lacp_LagMember_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lacp_LagMember_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lacp_LagMember. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lacp_LagMember) GetCounters() *Lacp_LagMember_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActivity retrieves the value of the leaf Activity from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Activity is set, it can
// safely use t.GetActivity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Activity == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetActivity() E_OpenTrafficGeneratorLacp_LacpActivityType {
	if t == nil || t.Activity == 0 {
		return 0
	}
	return t.Activity
}

// GetAggregatable retrieves the value of the leaf Aggregatable from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregatable is set, it can
// safely use t.GetAggregatable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregatable == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetAggregatable() bool {
	if t == nil || t.Aggregatable == nil {
		return false
	}
	return *t.Aggregatable
}

// GetCollecting retrieves the value of the leaf Collecting from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Collecting is set, it can
// safely use t.GetCollecting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Collecting == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetCollecting() bool {
	if t == nil || t.Collecting == nil {
		return false
	}
	return *t.Collecting
}

// GetDistributing retrieves the value of the leaf Distributing from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distributing is set, it can
// safely use t.GetDistributing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distributing == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetDistributing() bool {
	if t == nil || t.Distributing == nil {
		return false
	}
	return *t.Distributing
}

// GetName retrieves the value of the leaf Name from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperKey retrieves the value of the leaf OperKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperKey is set, it can
// safely use t.GetOperKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetOperKey() uint16 {
	if t == nil || t.OperKey == nil {
		return 0
	}
	return *t.OperKey
}

// GetPartnerId retrieves the value of the leaf PartnerId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerId is set, it can
// safely use t.GetPartnerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerId() string {
	if t == nil || t.PartnerId == nil {
		return ""
	}
	return *t.PartnerId
}

// GetPartnerKey retrieves the value of the leaf PartnerKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerKey is set, it can
// safely use t.GetPartnerKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerKey() uint16 {
	if t == nil || t.PartnerKey == nil {
		return 0
	}
	return *t.PartnerKey
}

// GetPartnerPortNum retrieves the value of the leaf PartnerPortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerPortNum is set, it can
// safely use t.GetPartnerPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerPortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerPortNum() uint16 {
	if t == nil || t.PartnerPortNum == nil {
		return 0
	}
	return *t.PartnerPortNum
}

// GetPortNum retrieves the value of the leaf PortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetSynchronization retrieves the value of the leaf Synchronization from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronization is set, it can
// safely use t.GetSynchronization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronization == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSynchronization() E_OpenTrafficGeneratorLacp_LacpSynchronizationType {
	if t == nil || t.Synchronization == 0 {
		return 0
	}
	return t.Synchronization
}

// GetSystemId retrieves the value of the leaf SystemId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetTimeout retrieves the value of the leaf Timeout from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetTimeout() E_OpenTrafficGeneratorLacp_LacpTimeoutType {
	if t == nil || t.Timeout == 0 {
		return 0
	}
	return t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lacp_LagMember struct, which is a YANG list entry.
func (t *Lacp_LagMember) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember.
func (*Lacp_LagMember) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember_Counters represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters YANG schema element.
type Lacp_LagMember_Counters struct {
	LacpInPkts   *uint64 `path:"lacp-in-pkts" module:"open-traffic-generator-lacp"`
	LacpOutPkts  *uint64 `path:"lacp-out-pkts" module:"open-traffic-generator-lacp"`
	LacpRxErrors *uint64 `path:"lacp-rx-errors" module:"open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember_Counters) IsYANGGoStruct() {}

// GetLacpInPkts retrieves the value of the leaf LacpInPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpInPkts is set, it can
// safely use t.GetLacpInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpInPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpInPkts() uint64 {
	if t == nil || t.LacpInPkts == nil {
		return 0
	}
	return *t.LacpInPkts
}

// GetLacpOutPkts retrieves the value of the leaf LacpOutPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpOutPkts is set, it can
// safely use t.GetLacpOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpOutPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpOutPkts() uint64 {
	if t == nil || t.LacpOutPkts == nil {
		return 0
	}
	return *t.LacpOutPkts
}

// GetLacpRxErrors retrieves the value of the leaf LacpRxErrors from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpRxErrors is set, it can
// safely use t.GetLacpRxErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpRxErrors == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpRxErrors() uint64 {
	if t == nil || t.LacpRxErrors == nil {
		return 0
	}
	return *t.LacpRxErrors
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember_Counters.
func (*Lacp_LagMember_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lag represents the /open-traffic-generator-lag/lags/lag YANG schema element.
type Lag struct {
	Counters   *Lag_Counters    `path:"state/counters" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	InRate     Binary           `path:"state/in-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	Name       *string          `path:"state/name|name" module:"open-traffic-generator-lag/open-traffic-generator-lag|open-traffic-generator-lag" shadow-path:"name" shadow-module:"open-traffic-generator-lag"`
	OperStatus E_Lag_OperStatus `path:"state/oper-status" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	OutRate    Binary           `path:"state/out-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lag) GetOrCreateCounters() *Lag_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lag_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lag. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lag) GetCounters() *Lag_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Lag) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetName retrieves the value of the leaf Name from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lag) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Lag) GetOperStatus() E_Lag_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetOutRate retrieves the value of the leaf OutRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Lag) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// PopulateDefaults recursively populates unset leaf fields in the Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lag struct, which is a YANG list entry.
func (t *Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag.
func (*Lag) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// Lag_Counters represents the /open-traffic-generator-lag/lags/lag/state/counters YANG schema element.
type Lag_Counters struct {
	InFrames      *uint64 `path:"in-frames" module:"open-traffic-generator-lag"`
	InOctets      *uint64 `path:"in-octets" module:"open-traffic-generator-lag"`
	MemberPortsUp *uint64 `path:"member-ports-up" module:"open-traffic-generator-lag"`
	OutFrames     *uint64 `path:"out-frames" module:"open-traffic-generator-lag"`
	OutOctets     *uint64 `path:"out-octets" module:"open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetMemberPortsUp retrieves the value of the leaf MemberPortsUp from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemberPortsUp is set, it can
// safely use t.GetMemberPortsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemberPortsUp == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetMemberPortsUp() uint64 {
	if t == nil || t.MemberPortsUp == nil {
		return 0
	}
	return *t.MemberPortsUp
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// PopulateDefaults recursively populates unset leaf fields in the Lag_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag_Counters.
func (*Lag_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// Port represents the /open-traffic-generator-port/ports/port YANG schema element.
type Port struct {
	Counters *Port_Counters `path:"state/counters" module:"open-traffic-generator-port/open-traffic-generator-port"`
	InRate   Binary         `path:"state/in-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Link     E_Port_Link    `path:"state/link" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Name     *string        `path:"state/name|name" module:"open-traffic-generator-port/open-traffic-generator-port|open-traffic-generator-port" shadow-path:"name" shadow-module:"open-traffic-generator-port"`
	OutRate  Binary         `path:"state/out-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Port) GetOrCreateCounters() *Port_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Port_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Port. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Port) GetCounters() *Port_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Port) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLink retrieves the value of the leaf Link from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *Port) GetLink() E_Port_Link {
	if t == nil || t.Link == 0 {
		return 0
	}
	return t.Link
}

// GetName retrieves the value of the leaf Name from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Port) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutRate retrieves the value of the leaf OutRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Port) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// PopulateDefaults recursively populates unset leaf fields in the Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Port struct, which is a YANG list entry.
func (t *Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port.
func (*Port) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// Port_Counters represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_Counters struct {
	InFrames  *uint64 `path:"in-frames" module:"open-traffic-generator-port"`
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-port"`
	OutFrames *uint64 `path:"out-frames" module:"open-traffic-generator-port"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// PopulateDefaults recursively populates unset leaf fields in the Port_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port_Counters.
func (*Port_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}
