/*
Package otg is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/ixia_c_cicd/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
	- models-yang/models/isis/open-traffic-generator-isis.yang
	- models-yang/models/types/open-traffic-generator-types.yang
	- models-yang/models/flow/open-traffic-generator-flow.yang
	- models-yang/models/discovery/open-traffic-generator-discovery.yang
	- models-yang/models/interface/open-traffic-generator-port.yang
	- models-yang/models/bgp/open-traffic-generator-bgp.yang
	- models-yang/models/lag/open-traffic-generator-lag.yang
	- models-yang/models/lacp/open-traffic-generator-lacp.yang
	- models-yang/models/lldp/open-traffic-generator-lldp.yang
Imported modules were sourced from:
	- models-yang/models/...
*/
package otg

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct {
	Neighbor map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor `path:"neighbors/neighbor" module:"open-traffic-generator-isis/open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct. The keys of the list are populated from the input
// arguments.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) NewNeighbor(SystemId string) (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
	}

	key := SystemId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor{
		SystemId: &SystemId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.SystemId = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) GetOrCreateNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor {

	key := SystemId

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(SystemId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) GetNeighbor(SystemId string) *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor {

	if t == nil {
		return nil
	}

	key := SystemId

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If there is no such element, the function
// is a no-op.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) DeleteNeighbor(SystemId string) {
	key := SystemId

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct to the
// list Neighbor of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability. If the key value(s) specified in
// the supplied IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor already exist in the list, an error is
// returned.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) AppendNeighbor(v *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) error {
	if v.SystemId == nil {
		return fmt.Errorf("invalid nil key received for SystemId")
	}

	key := *v.SystemId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor represents the /open-traffic-generator-isis/isis-routers/isis-router/state/link-state-database/lsp-states/lsps/tlvs/is-reachability/neighbors/neighbor YANG schema element.
type IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct {
	SystemId *string `path:"state/system-id|system-id" module:"open-traffic-generator-isis/open-traffic-generator-isis|open-traffic-generator-isis" shadow-path:"system-id" shadow-module:"open-traffic-generator-isis"`
}

// IsYANGGoStruct ensures that IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) IsYANGGoStruct() {}

// GetSystemId retrieves the value of the leaf SystemId from the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// SetSystemId sets the value of the leaf SystemId in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// struct.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) SetSystemId(v string) {
	t.SystemId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor struct, which is a YANG list entry.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SystemId == nil {
		return nil, fmt.Errorf("nil value for key SystemId")
	}

	return map[string]interface{}{
		"system-id": *t.SystemId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor.
func (*IsisRouter_LinkStateDatabase_Lsps_Tlvs_IsReachability_Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-isis"
}

// Lacp represents the /open-traffic-generator-lacp/lacp YANG schema element.
type Lacp struct {
	LagMember map[string]*Lacp_LagMember `path:"lag-members/lag-member" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp) IsYANGGoStruct() {}

// NewLagMember creates a new entry in the LagMember list of the
// Lacp struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp) NewLagMember(Name string) (*Lacp_LagMember, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LagMember[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LagMember", key)
	}

	t.LagMember[key] = &Lacp_LagMember{
		Name: &Name,
	}

	return t.LagMember[key], nil
}

// RenameLagMember renames an entry in the list LagMember within
// the Lacp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp) RenameLagMember(oldK, newK string) error {
	if _, ok := t.LagMember[newK]; ok {
		return fmt.Errorf("key %v already exists in LagMember", newK)
	}

	e, ok := t.LagMember[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LagMember", oldK)
	}
	e.Name = &newK

	t.LagMember[newK] = e
	delete(t.LagMember, oldK)
	return nil
}

// GetOrCreateLagMember retrieves the value with the specified keys from
// the receiver Lacp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp) GetOrCreateLagMember(Name string) *Lacp_LagMember {

	key := Name

	if v, ok := t.LagMember[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLagMember(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLagMember got unexpected error: %v", err))
	}
	return v
}

// GetLagMember retrieves the value with the specified key from
// the LagMember map field of Lacp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp) GetLagMember(Name string) *Lacp_LagMember {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LagMember[key]; ok {
		return lm
	}
	return nil
}

// DeleteLagMember deletes the value with the specified keys from
// the receiver Lacp. If there is no such element, the function
// is a no-op.
func (t *Lacp) DeleteLagMember(Name string) {
	key := Name

	delete(t.LagMember, key)
}

// AppendLagMember appends the supplied Lacp_LagMember struct to the
// list LagMember of Lacp. If the key value(s) specified in
// the supplied Lacp_LagMember already exist in the list, an error is
// returned.
func (t *Lacp) AppendLagMember(v *Lacp_LagMember) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagMember == nil {
		t.LagMember = make(map[string]*Lacp_LagMember)
	}

	if _, ok := t.LagMember[key]; ok {
		return fmt.Errorf("duplicate key for list LagMember %v", key)
	}

	t.LagMember[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LagMember {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp.
func (*Lacp) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member YANG schema element.
type Lacp_LagMember struct {
	Activity        E_OpenTrafficGeneratorLacp_LacpActivityType        `path:"state/activity" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Aggregatable    *bool                                              `path:"state/aggregatable" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Collecting      *bool                                              `path:"state/collecting" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Counters        *Lacp_LagMember_Counters                           `path:"state/counters" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Distributing    *bool                                              `path:"state/distributing" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Name            *string                                            `path:"state/name|name" module:"open-traffic-generator-lacp/open-traffic-generator-lacp|open-traffic-generator-lacp" shadow-path:"name" shadow-module:"open-traffic-generator-lacp"`
	OperKey         *uint16                                            `path:"state/oper-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerId       *string                                            `path:"state/partner-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerKey      *uint16                                            `path:"state/partner-key" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PartnerPortNum  *uint16                                            `path:"state/partner-port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	PortNum         *uint16                                            `path:"state/port-num" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Synchronization E_OpenTrafficGeneratorLacp_LacpSynchronizationType `path:"state/synchronization" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	SystemId        *string                                            `path:"state/system-id" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
	Timeout         E_OpenTrafficGeneratorLacp_LacpTimeoutType         `path:"state/timeout" module:"open-traffic-generator-lacp/open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lacp_LagMember) GetOrCreateCounters() *Lacp_LagMember_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lacp_LagMember_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lacp_LagMember. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lacp_LagMember) GetCounters() *Lacp_LagMember_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActivity retrieves the value of the leaf Activity from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Activity is set, it can
// safely use t.GetActivity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Activity == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetActivity() E_OpenTrafficGeneratorLacp_LacpActivityType {
	if t == nil || t.Activity == 0 {
		return 0
	}
	return t.Activity
}

// GetAggregatable retrieves the value of the leaf Aggregatable from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregatable is set, it can
// safely use t.GetAggregatable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregatable == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetAggregatable() bool {
	if t == nil || t.Aggregatable == nil {
		return false
	}
	return *t.Aggregatable
}

// GetCollecting retrieves the value of the leaf Collecting from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Collecting is set, it can
// safely use t.GetCollecting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Collecting == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetCollecting() bool {
	if t == nil || t.Collecting == nil {
		return false
	}
	return *t.Collecting
}

// GetDistributing retrieves the value of the leaf Distributing from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distributing is set, it can
// safely use t.GetDistributing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distributing == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetDistributing() bool {
	if t == nil || t.Distributing == nil {
		return false
	}
	return *t.Distributing
}

// GetName retrieves the value of the leaf Name from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperKey retrieves the value of the leaf OperKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperKey is set, it can
// safely use t.GetOperKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetOperKey() uint16 {
	if t == nil || t.OperKey == nil {
		return 0
	}
	return *t.OperKey
}

// GetPartnerId retrieves the value of the leaf PartnerId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerId is set, it can
// safely use t.GetPartnerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerId() string {
	if t == nil || t.PartnerId == nil {
		return ""
	}
	return *t.PartnerId
}

// GetPartnerKey retrieves the value of the leaf PartnerKey from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerKey is set, it can
// safely use t.GetPartnerKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerKey == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerKey() uint16 {
	if t == nil || t.PartnerKey == nil {
		return 0
	}
	return *t.PartnerKey
}

// GetPartnerPortNum retrieves the value of the leaf PartnerPortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerPortNum is set, it can
// safely use t.GetPartnerPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerPortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPartnerPortNum() uint16 {
	if t == nil || t.PartnerPortNum == nil {
		return 0
	}
	return *t.PartnerPortNum
}

// GetPortNum retrieves the value of the leaf PortNum from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetSynchronization retrieves the value of the leaf Synchronization from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Synchronization is set, it can
// safely use t.GetSynchronization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Synchronization == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSynchronization() E_OpenTrafficGeneratorLacp_LacpSynchronizationType {
	if t == nil || t.Synchronization == 0 {
		return 0
	}
	return t.Synchronization
}

// GetSystemId retrieves the value of the leaf SystemId from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetTimeout retrieves the value of the leaf Timeout from the Lacp_LagMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember) GetTimeout() E_OpenTrafficGeneratorLacp_LacpTimeoutType {
	if t == nil || t.Timeout == 0 {
		return 0
	}
	return t.Timeout
}

// SetActivity sets the value of the leaf Activity in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetActivity(v E_OpenTrafficGeneratorLacp_LacpActivityType) {
	t.Activity = v
}

// SetAggregatable sets the value of the leaf Aggregatable in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetAggregatable(v bool) {
	t.Aggregatable = &v
}

// SetCollecting sets the value of the leaf Collecting in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetCollecting(v bool) {
	t.Collecting = &v
}

// SetDistributing sets the value of the leaf Distributing in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetDistributing(v bool) {
	t.Distributing = &v
}

// SetName sets the value of the leaf Name in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetName(v string) {
	t.Name = &v
}

// SetOperKey sets the value of the leaf OperKey in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetOperKey(v uint16) {
	t.OperKey = &v
}

// SetPartnerId sets the value of the leaf PartnerId in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerId(v string) {
	t.PartnerId = &v
}

// SetPartnerKey sets the value of the leaf PartnerKey in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerKey(v uint16) {
	t.PartnerKey = &v
}

// SetPartnerPortNum sets the value of the leaf PartnerPortNum in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPartnerPortNum(v uint16) {
	t.PartnerPortNum = &v
}

// SetPortNum sets the value of the leaf PortNum in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetPortNum(v uint16) {
	t.PortNum = &v
}

// SetSynchronization sets the value of the leaf Synchronization in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetSynchronization(v E_OpenTrafficGeneratorLacp_LacpSynchronizationType) {
	t.Synchronization = v
}

// SetSystemId sets the value of the leaf SystemId in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetSystemId(v string) {
	t.SystemId = &v
}

// SetTimeout sets the value of the leaf Timeout in the Lacp_LagMember
// struct.
func (t *Lacp_LagMember) SetTimeout(v E_OpenTrafficGeneratorLacp_LacpTimeoutType) {
	t.Timeout = v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lacp_LagMember struct, which is a YANG list entry.
func (t *Lacp_LagMember) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember.
func (*Lacp_LagMember) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lacp_LagMember_Counters represents the /open-traffic-generator-lacp/lacp/lag-members/lag-member/state/counters YANG schema element.
type Lacp_LagMember_Counters struct {
	LacpInPkts   *uint64 `path:"lacp-in-pkts" module:"open-traffic-generator-lacp"`
	LacpOutPkts  *uint64 `path:"lacp-out-pkts" module:"open-traffic-generator-lacp"`
	LacpRxErrors *uint64 `path:"lacp-rx-errors" module:"open-traffic-generator-lacp"`
}

// IsYANGGoStruct ensures that Lacp_LagMember_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_LagMember_Counters) IsYANGGoStruct() {}

// GetLacpInPkts retrieves the value of the leaf LacpInPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpInPkts is set, it can
// safely use t.GetLacpInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpInPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpInPkts() uint64 {
	if t == nil || t.LacpInPkts == nil {
		return 0
	}
	return *t.LacpInPkts
}

// GetLacpOutPkts retrieves the value of the leaf LacpOutPkts from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpOutPkts is set, it can
// safely use t.GetLacpOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpOutPkts == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpOutPkts() uint64 {
	if t == nil || t.LacpOutPkts == nil {
		return 0
	}
	return *t.LacpOutPkts
}

// GetLacpRxErrors retrieves the value of the leaf LacpRxErrors from the Lacp_LagMember_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpRxErrors is set, it can
// safely use t.GetLacpRxErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpRxErrors == nil' before retrieving the leaf's value.
func (t *Lacp_LagMember_Counters) GetLacpRxErrors() uint64 {
	if t == nil || t.LacpRxErrors == nil {
		return 0
	}
	return *t.LacpRxErrors
}

// SetLacpInPkts sets the value of the leaf LacpInPkts in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpInPkts(v uint64) {
	t.LacpInPkts = &v
}

// SetLacpOutPkts sets the value of the leaf LacpOutPkts in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpOutPkts(v uint64) {
	t.LacpOutPkts = &v
}

// SetLacpRxErrors sets the value of the leaf LacpRxErrors in the Lacp_LagMember_Counters
// struct.
func (t *Lacp_LagMember_Counters) SetLacpRxErrors(v uint64) {
	t.LacpRxErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lacp_LagMember_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lacp_LagMember_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_LagMember_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_LagMember_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_LagMember_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lacp_LagMember_Counters.
func (*Lacp_LagMember_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lacp"
}

// Lag represents the /open-traffic-generator-lag/lags/lag YANG schema element.
type Lag struct {
	Counters   *Lag_Counters    `path:"state/counters" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	InRate     Binary           `path:"state/in-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	Name       *string          `path:"state/name|name" module:"open-traffic-generator-lag/open-traffic-generator-lag|open-traffic-generator-lag" shadow-path:"name" shadow-module:"open-traffic-generator-lag"`
	OperStatus E_Lag_OperStatus `path:"state/oper-status" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
	OutRate    Binary           `path:"state/out-rate" module:"open-traffic-generator-lag/open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lag) GetOrCreateCounters() *Lag_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lag_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lag. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lag) GetCounters() *Lag_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Lag) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetName retrieves the value of the leaf Name from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Lag) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Lag) GetOperStatus() E_Lag_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetOutRate retrieves the value of the leaf OutRate from the Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Lag) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// SetInRate sets the value of the leaf InRate in the Lag
// struct.
func (t *Lag) SetInRate(v Binary) {
	t.InRate = v
}

// SetName sets the value of the leaf Name in the Lag
// struct.
func (t *Lag) SetName(v string) {
	t.Name = &v
}

// SetOperStatus sets the value of the leaf OperStatus in the Lag
// struct.
func (t *Lag) SetOperStatus(v E_Lag_OperStatus) {
	t.OperStatus = v
}

// SetOutRate sets the value of the leaf OutRate in the Lag
// struct.
func (t *Lag) SetOutRate(v Binary) {
	t.OutRate = v
}

// PopulateDefaults recursively populates unset leaf fields in the Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Lag struct, which is a YANG list entry.
func (t *Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag.
func (*Lag) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// Lag_Counters represents the /open-traffic-generator-lag/lags/lag/state/counters YANG schema element.
type Lag_Counters struct {
	InFrames      *uint64 `path:"in-frames" module:"open-traffic-generator-lag"`
	InOctets      *uint64 `path:"in-octets" module:"open-traffic-generator-lag"`
	MemberPortsUp *uint64 `path:"member-ports-up" module:"open-traffic-generator-lag"`
	OutFrames     *uint64 `path:"out-frames" module:"open-traffic-generator-lag"`
	OutOctets     *uint64 `path:"out-octets" module:"open-traffic-generator-lag"`
}

// IsYANGGoStruct ensures that Lag_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lag_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetMemberPortsUp retrieves the value of the leaf MemberPortsUp from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemberPortsUp is set, it can
// safely use t.GetMemberPortsUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemberPortsUp == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetMemberPortsUp() uint64 {
	if t == nil || t.MemberPortsUp == nil {
		return 0
	}
	return *t.MemberPortsUp
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Lag_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Lag_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// SetInFrames sets the value of the leaf InFrames in the Lag_Counters
// struct.
func (t *Lag_Counters) SetInFrames(v uint64) {
	t.InFrames = &v
}

// SetInOctets sets the value of the leaf InOctets in the Lag_Counters
// struct.
func (t *Lag_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetMemberPortsUp sets the value of the leaf MemberPortsUp in the Lag_Counters
// struct.
func (t *Lag_Counters) SetMemberPortsUp(v uint64) {
	t.MemberPortsUp = &v
}

// SetOutFrames sets the value of the leaf OutFrames in the Lag_Counters
// struct.
func (t *Lag_Counters) SetOutFrames(v uint64) {
	t.OutFrames = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Lag_Counters
// struct.
func (t *Lag_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Lag_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Lag_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lag_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lag_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lag_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Lag_Counters.
func (*Lag_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lag"
}

// LldpInterface represents the /open-traffic-generator-lldp/lldps/lldp-interface YANG schema element.
type LldpInterface struct {
	Counters             *LldpInterface_Counters             `path:"state/counters" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	LldpNeighborDatabase *LldpInterface_LldpNeighborDatabase `path:"state/lldp-neighbor-database" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Name                 *string                             `path:"state/name|name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"name" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *LldpInterface) GetOrCreateCounters() *LldpInterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &LldpInterface_Counters{}
	return t.Counters
}

// GetOrCreateLldpNeighborDatabase retrieves the value of the LldpNeighborDatabase field
// or returns the existing field if it already exists.
func (t *LldpInterface) GetOrCreateLldpNeighborDatabase() *LldpInterface_LldpNeighborDatabase {
	if t.LldpNeighborDatabase != nil {
		return t.LldpNeighborDatabase
	}
	t.LldpNeighborDatabase = &LldpInterface_LldpNeighborDatabase{}
	return t.LldpNeighborDatabase
}

// GetCounters returns the value of the Counters struct pointer
// from LldpInterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LldpInterface) GetCounters() *LldpInterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetLldpNeighborDatabase returns the value of the LldpNeighborDatabase struct pointer
// from LldpInterface. If the receiver or the field LldpNeighborDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LldpInterface) GetLldpNeighborDatabase() *LldpInterface_LldpNeighborDatabase {
	if t != nil && t.LldpNeighborDatabase != nil {
		return t.LldpNeighborDatabase
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the LldpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *LldpInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the LldpInterface
// struct.
func (t *LldpInterface) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.LldpNeighborDatabase.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the LldpInterface struct, which is a YANG list entry.
func (t *LldpInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface.
func (*LldpInterface) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_Counters represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/counters YANG schema element.
type LldpInterface_Counters struct {
	FrameDiscard *uint64 `path:"frame-discard" module:"open-traffic-generator-lldp"`
	FrameErrorIn *uint64 `path:"frame-error-in" module:"open-traffic-generator-lldp"`
	FrameIn      *uint64 `path:"frame-in" module:"open-traffic-generator-lldp"`
	FrameOut     *uint64 `path:"frame-out" module:"open-traffic-generator-lldp"`
	TlvDiscard   *uint64 `path:"tlv-discard" module:"open-traffic-generator-lldp"`
	TlvUnknown   *uint64 `path:"tlv-unknown" module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameDiscard is set, it can
// safely use t.GetFrameDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameDiscard == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorIn is set, it can
// safely use t.GetFrameErrorIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorIn == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameIn retrieves the value of the leaf FrameIn from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIn is set, it can
// safely use t.GetFrameIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIn == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameOut is set, it can
// safely use t.GetFrameOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameOut == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvDiscard is set, it can
// safely use t.GetTlvDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvDiscard == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the LldpInterface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvUnknown is set, it can
// safely use t.GetTlvUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvUnknown == nil' before retrieving the leaf's value.
func (t *LldpInterface_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// SetFrameDiscard sets the value of the leaf FrameDiscard in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameDiscard(v uint64) {
	t.FrameDiscard = &v
}

// SetFrameErrorIn sets the value of the leaf FrameErrorIn in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameErrorIn(v uint64) {
	t.FrameErrorIn = &v
}

// SetFrameIn sets the value of the leaf FrameIn in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameIn(v uint64) {
	t.FrameIn = &v
}

// SetFrameOut sets the value of the leaf FrameOut in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetFrameOut(v uint64) {
	t.FrameOut = &v
}

// SetTlvDiscard sets the value of the leaf TlvDiscard in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetTlvDiscard(v uint64) {
	t.TlvDiscard = &v
}

// SetTlvUnknown sets the value of the leaf TlvUnknown in the LldpInterface_Counters
// struct.
func (t *LldpInterface_Counters) SetTlvUnknown(v uint64) {
	t.TlvUnknown = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_Counters.
func (*LldpInterface_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database YANG schema element.
type LldpInterface_LldpNeighborDatabase struct {
	LldpNeighbor map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor `path:"lldp-neighbors/lldp-neighbor" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase) IsYANGGoStruct() {}

// NewLldpNeighbor creates a new entry in the LldpNeighbor list of the
// LldpInterface_LldpNeighborDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase) NewLldpNeighbor(NeighborId string) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpNeighbor == nil {
		t.LldpNeighbor = make(map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor)
	}

	key := NeighborId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LldpNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LldpNeighbor", key)
	}

	t.LldpNeighbor[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor{
		NeighborId: &NeighborId,
	}

	return t.LldpNeighbor[key], nil
}

// RenameLldpNeighbor renames an entry in the list LldpNeighbor within
// the LldpInterface_LldpNeighborDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase) RenameLldpNeighbor(oldK, newK string) error {
	if _, ok := t.LldpNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in LldpNeighbor", newK)
	}

	e, ok := t.LldpNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LldpNeighbor", oldK)
	}
	e.NeighborId = &newK

	t.LldpNeighbor[newK] = e
	delete(t.LldpNeighbor, oldK)
	return nil
}

// GetOrCreateLldpNeighbor retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase) GetOrCreateLldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor {

	key := NeighborId

	if v, ok := t.LldpNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLldpNeighbor(NeighborId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLldpNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetLldpNeighbor retrieves the value with the specified key from
// the LldpNeighbor map field of LldpInterface_LldpNeighborDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase) GetLldpNeighbor(NeighborId string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor {

	if t == nil {
		return nil
	}

	key := NeighborId

	if lm, ok := t.LldpNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteLldpNeighbor deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase) DeleteLldpNeighbor(NeighborId string) {
	key := NeighborId

	delete(t.LldpNeighbor, key)
}

// AppendLldpNeighbor appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor struct to the
// list LldpNeighbor of LldpInterface_LldpNeighborDatabase. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase) AppendLldpNeighbor(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor) error {
	if v.NeighborId == nil {
		return fmt.Errorf("invalid nil key received for NeighborId")
	}

	key := *v.NeighborId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LldpNeighbor == nil {
		t.LldpNeighbor = make(map[string]*LldpInterface_LldpNeighborDatabase_LldpNeighbor)
	}

	if _, ok := t.LldpNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list LldpNeighbor %v", key)
	}

	t.LldpNeighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LldpNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase.
func (*LldpInterface_LldpNeighborDatabase) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor struct {
	Age                   *uint32                                                                                                                      `path:"state/age" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Capabilities          map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities                                        `path:"capabilities" module:"open-traffic-generator-lldp"`
	ChassisId             *string                                                                                                                      `path:"state/chassis-id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ChassisIdType         E_LldpNeighbor_ChassisIdType                                                                                                 `path:"state/chassis-id-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	CustomTlv             map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv `path:"custom-tlv" module:"open-traffic-generator-lldp"`
	LastUpdate            *uint32                                                                                                                      `path:"state/last_update" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ManagementAddress     *string                                                                                                                      `path:"state/management-address" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	ManagementAddressType *string                                                                                                                      `path:"state/management-address-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	NeighborId            *string                                                                                                                      `path:"state/neighbor_id|neighbor_id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"neighbor_id" shadow-module:"open-traffic-generator-lldp"`
	PortDescription       *string                                                                                                                      `path:"state/port-description" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	PortId                *string                                                                                                                      `path:"state/port-id" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	PortIdType            E_LldpNeighbor_PortIdType                                                                                                    `path:"state/port-id-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	SystemDescription     *string                                                                                                                      `path:"state/system-description" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	SystemName            *string                                                                                                                      `path:"state/system-name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Ttl                   *uint32                                                                                                                      `path:"state/ttl" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor) IsYANGGoStruct() {}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key represents the key for list CustomTlv of element /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key struct {
	CustomType uint32 `path:"custom-type"`
	Oui        string `path:"oui"`
	OuiSubtype string `path:"oui-subtype"`
}

// NewCapabilities creates a new entry in the Capabilities list of the
// LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) NewCapabilities(Name E_Capabilities_Name) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capabilities == nil {
		t.Capabilities = make(map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capabilities[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capabilities", key)
	}

	t.Capabilities[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities{
		Name: Name,
	}

	return t.Capabilities[key], nil
}

// RenameCapabilities renames an entry in the list Capabilities within
// the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) RenameCapabilities(oldK, newK E_Capabilities_Name) error {
	if _, ok := t.Capabilities[newK]; ok {
		return fmt.Errorf("key %v already exists in Capabilities", newK)
	}

	e, ok := t.Capabilities[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Capabilities", oldK)
	}
	e.Name = newK

	t.Capabilities[newK] = e
	delete(t.Capabilities, oldK)
	return nil
}

// GetOrCreateCapabilities retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCapabilities(Name E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities {

	key := Name

	if v, ok := t.Capabilities[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapabilities(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapabilities got unexpected error: %v", err))
	}
	return v
}

// GetCapabilities retrieves the value with the specified key from
// the Capabilities map field of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetCapabilities(Name E_Capabilities_Name) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Capabilities[key]; ok {
		return lm
	}
	return nil
}

// DeleteCapabilities deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) DeleteCapabilities(Name E_Capabilities_Name) {
	key := Name

	delete(t.Capabilities, key)
}

// AppendCapabilities appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct to the
// list Capabilities of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) AppendCapabilities(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capabilities == nil {
		t.Capabilities = make(map[E_Capabilities_Name]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities)
	}

	if _, ok := t.Capabilities[key]; ok {
		return fmt.Errorf("duplicate key for list Capabilities %v", key)
	}

	t.Capabilities[key] = v
	return nil
}

// NewCustomTlv creates a new entry in the CustomTlv list of the
// LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) NewCustomTlv(CustomType uint32, Oui string, OuiSubtype string) (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomTlv == nil {
		t.CustomTlv = make(map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CustomTlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CustomTlv", key)
	}

	t.CustomTlv[key] = &LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv{
		CustomType: &CustomType,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.CustomTlv[key], nil
}

// RenameCustomTlv renames an entry in the list CustomTlv within
// the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) RenameCustomTlv(oldK, newK LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key) error {
	if _, ok := t.CustomTlv[newK]; ok {
		return fmt.Errorf("key %v already exists in CustomTlv", newK)
	}

	e, ok := t.CustomTlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CustomTlv", oldK)
	}
	e.CustomType = &newK.CustomType
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.CustomTlv[newK] = e
	delete(t.CustomTlv, oldK)
	return nil
}

// GetOrCreateCustomTlv retrieves the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetOrCreateCustomTlv(CustomType uint32, Oui string, OuiSubtype string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv {

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.CustomTlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomTlv(CustomType, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomTlv got unexpected error: %v", err))
	}
	return v
}

// GetCustomTlv retrieves the value with the specified key from
// the CustomTlv map field of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetCustomTlv(CustomType uint32, Oui string, OuiSubtype string) *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv {

	if t == nil {
		return nil
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.CustomTlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomTlv deletes the value with the specified keys from
// the receiver LldpInterface_LldpNeighborDatabase_LldpNeighbor. If there is no such element, the function
// is a no-op.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) DeleteCustomTlv(CustomType uint32, Oui string, OuiSubtype string) {
	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: CustomType,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	delete(t.CustomTlv, key)
}

// AppendCustomTlv appends the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct to the
// list CustomTlv of LldpInterface_LldpNeighborDatabase_LldpNeighbor. If the key value(s) specified in
// the supplied LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv already exist in the list, an error is
// returned.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) AppendCustomTlv(v *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) error {
	if v.CustomType == nil {
		return fmt.Errorf("invalid nil key for CustomType")
	}

	if v.Oui == nil {
		return fmt.Errorf("invalid nil key for Oui")
	}

	if v.OuiSubtype == nil {
		return fmt.Errorf("invalid nil key for OuiSubtype")
	}

	key := LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key{
		CustomType: *v.CustomType,
		Oui:        *v.Oui,
		OuiSubtype: *v.OuiSubtype,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomTlv == nil {
		t.CustomTlv = make(map[LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv_Key]*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv)
	}

	if _, ok := t.CustomTlv[key]; ok {
		return fmt.Errorf("duplicate key for list CustomTlv %v", key)
	}

	t.CustomTlv[key] = v
	return nil
}

// GetAge retrieves the value of the leaf Age from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetAge() uint32 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisId is set, it can
// safely use t.GetChassisId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisIdType is set, it can
// safely use t.GetChassisIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisIdType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetChassisIdType() E_LldpNeighbor_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastUpdate is set, it can
// safely use t.GetLastUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastUpdate == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetLastUpdate() uint32 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddress is set, it can
// safely use t.GetManagementAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddress == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddressType is set, it can
// safely use t.GetManagementAddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddressType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetNeighborId retrieves the value of the leaf NeighborId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborId is set, it can
// safely use t.GetNeighborId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetNeighborId() string {
	if t == nil || t.NeighborId == nil {
		return ""
	}
	return *t.NeighborId
}

// GetPortDescription retrieves the value of the leaf PortDescription from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDescription is set, it can
// safely use t.GetPortDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDescription == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdType is set, it can
// safely use t.GetPortIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetPortIdType() E_LldpNeighbor_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemDescription is set, it can
// safely use t.GetSystemDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemDescription == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// SetAge sets the value of the leaf Age in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetAge(v uint32) {
	t.Age = &v
}

// SetChassisId sets the value of the leaf ChassisId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetChassisId(v string) {
	t.ChassisId = &v
}

// SetChassisIdType sets the value of the leaf ChassisIdType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetChassisIdType(v E_LldpNeighbor_ChassisIdType) {
	t.ChassisIdType = v
}

// SetLastUpdate sets the value of the leaf LastUpdate in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetLastUpdate(v uint32) {
	t.LastUpdate = &v
}

// SetManagementAddress sets the value of the leaf ManagementAddress in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetManagementAddress(v string) {
	t.ManagementAddress = &v
}

// SetManagementAddressType sets the value of the leaf ManagementAddressType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetManagementAddressType(v string) {
	t.ManagementAddressType = &v
}

// SetNeighborId sets the value of the leaf NeighborId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetNeighborId(v string) {
	t.NeighborId = &v
}

// SetPortDescription sets the value of the leaf PortDescription in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortDescription(v string) {
	t.PortDescription = &v
}

// SetPortId sets the value of the leaf PortId in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortId(v string) {
	t.PortId = &v
}

// SetPortIdType sets the value of the leaf PortIdType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetPortIdType(v E_LldpNeighbor_PortIdType) {
	t.PortIdType = v
}

// SetSystemDescription sets the value of the leaf SystemDescription in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetSystemDescription(v string) {
	t.SystemDescription = &v
}

// SetSystemName sets the value of the leaf SystemName in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetSystemName(v string) {
	t.SystemName = &v
}

// SetTtl sets the value of the leaf Ttl in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) SetTtl(v uint32) {
	t.Ttl = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Age == nil {
		var v uint32 = 0
		t.Age = &v
	}
	if t.LastUpdate == nil {
		var v uint32 = 0
		t.LastUpdate = &v
	}
	if t.Ttl == nil {
		var v uint32 = 0
		t.Ttl = &v
	}
	for _, e := range t.Capabilities {
		e.PopulateDefaults()
	}
	for _, e := range t.CustomTlv {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborId == nil {
		return nil, fmt.Errorf("nil value for key NeighborId")
	}

	return map[string]interface{}{
		"neighbor_id": *t.NeighborId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/capabilities YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct {
	Enabled *bool               `path:"state/enabled" module:"open-traffic-generator-lldp/open-traffic-generator-lldp"`
	Name    E_Capabilities_Name `path:"state/name|name" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"name" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) GetName() E_Capabilities_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// SetEnabled sets the value of the leaf Enabled in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetName sets the value of the leaf Name in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) SetName(v E_Capabilities_Name) {
	t.Name = v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_Capabilities) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv represents the /open-traffic-generator-lldp/lldps/lldp-interface/state/lldp-neighbor-database/lldp-neighbors/lldp-neighbor/custom-tlv YANG schema element.
type LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct {
	CustomType *uint32 `path:"state/custom-type|custom-type" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"custom-type" shadow-module:"open-traffic-generator-lldp"`
	Oui        *string `path:"state/oui|oui" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"oui" shadow-module:"open-traffic-generator-lldp"`
	OuiSubtype *string `path:"state/oui-subtype|oui-subtype" module:"open-traffic-generator-lldp/open-traffic-generator-lldp|open-traffic-generator-lldp" shadow-path:"oui-subtype" shadow-module:"open-traffic-generator-lldp"`
}

// IsYANGGoStruct ensures that LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) IsYANGGoStruct() {}

// GetCustomType retrieves the value of the leaf CustomType from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomType is set, it can
// safely use t.GetCustomType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomType == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetCustomType() uint32 {
	if t == nil || t.CustomType == nil {
		return 0
	}
	return *t.CustomType
}

// GetOui retrieves the value of the leaf Oui from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oui is set, it can
// safely use t.GetOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oui == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuiSubtype is set, it can
// safely use t.GetOuiSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuiSubtype == nil' before retrieving the leaf's value.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// SetCustomType sets the value of the leaf CustomType in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetCustomType(v uint32) {
	t.CustomType = &v
}

// SetOui sets the value of the leaf Oui in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetOui(v string) {
	t.Oui = &v
}

// SetOuiSubtype sets the value of the leaf OuiSubtype in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// struct.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) SetOuiSubtype(v string) {
	t.OuiSubtype = &v
}

// PopulateDefaults recursively populates unset leaf fields in the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv struct, which is a YANG list entry.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomType == nil {
		return nil, fmt.Errorf("nil value for key CustomType")
	}

	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	return map[string]interface{}{
		"custom-type": *t.CustomType,
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv.
func (*LldpInterface_LldpNeighborDatabase_LldpNeighbor_CustomTlv) ΛBelongingModule() string {
	return "open-traffic-generator-lldp"
}

// Port represents the /open-traffic-generator-port/ports/port YANG schema element.
type Port struct {
	Counters *Port_Counters `path:"state/counters" module:"open-traffic-generator-port/open-traffic-generator-port"`
	InRate   Binary         `path:"state/in-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Link     E_Port_Link    `path:"state/link" module:"open-traffic-generator-port/open-traffic-generator-port"`
	Name     *string        `path:"state/name|name" module:"open-traffic-generator-port/open-traffic-generator-port|open-traffic-generator-port" shadow-path:"name" shadow-module:"open-traffic-generator-port"`
	OutRate  Binary         `path:"state/out-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Port) GetOrCreateCounters() *Port_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Port_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Port. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Port) GetCounters() *Port_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Port) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLink retrieves the value of the leaf Link from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *Port) GetLink() E_Port_Link {
	if t == nil || t.Link == 0 {
		return 0
	}
	return t.Link
}

// GetName retrieves the value of the leaf Name from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Port) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutRate retrieves the value of the leaf OutRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Port) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// SetInRate sets the value of the leaf InRate in the Port
// struct.
func (t *Port) SetInRate(v Binary) {
	t.InRate = v
}

// SetLink sets the value of the leaf Link in the Port
// struct.
func (t *Port) SetLink(v E_Port_Link) {
	t.Link = v
}

// SetName sets the value of the leaf Name in the Port
// struct.
func (t *Port) SetName(v string) {
	t.Name = &v
}

// SetOutRate sets the value of the leaf OutRate in the Port
// struct.
func (t *Port) SetOutRate(v Binary) {
	t.OutRate = v
}

// PopulateDefaults recursively populates unset leaf fields in the Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Port struct, which is a YANG list entry.
func (t *Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port.
func (*Port) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// Port_Counters represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_Counters struct {
	InFrames  *uint64 `path:"in-frames" module:"open-traffic-generator-port"`
	InOctets  *uint64 `path:"in-octets" module:"open-traffic-generator-port"`
	OutFrames *uint64 `path:"out-frames" module:"open-traffic-generator-port"`
	OutOctets *uint64 `path:"out-octets" module:"open-traffic-generator-port"`
}

// IsYANGGoStruct ensures that Port_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// SetInFrames sets the value of the leaf InFrames in the Port_Counters
// struct.
func (t *Port_Counters) SetInFrames(v uint64) {
	t.InFrames = &v
}

// SetInOctets sets the value of the leaf InOctets in the Port_Counters
// struct.
func (t *Port_Counters) SetInOctets(v uint64) {
	t.InOctets = &v
}

// SetOutFrames sets the value of the leaf OutFrames in the Port_Counters
// struct.
func (t *Port_Counters) SetOutFrames(v uint64) {
	t.OutFrames = &v
}

// SetOutOctets sets the value of the leaf OutOctets in the Port_Counters
// struct.
func (t *Port_Counters) SetOutOctets(v uint64) {
	t.OutOctets = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Port_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port_Counters.
func (*Port_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}
