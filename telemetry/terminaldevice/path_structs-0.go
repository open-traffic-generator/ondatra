/*
Package terminaldevice is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - gnsi/authz/gnsi-authz.yang
  - gnsi/cert/gnsi-cert.yang
  - gnsi/console/gnsi-console.yang
  - gnsi/pathz/gnsi-pathz.yang
  - gnsi/ssh/gnsi-ssh.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package terminaldevice

import (
	"github.com/openconfig/ygot/ygot"
)

// TerminalDevicePath represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePath struct {
	*ygot.NodePath
}

// TerminalDevicePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePathAny struct {
	*ygot.NodePath
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePath) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePathAny) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePath) Channel(Index uint32) *TerminalDevice_ChannelPath {
	return &TerminalDevice_ChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePathAny) Channel(Index uint32) *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId (wildcarded): uint16
func (n *TerminalDevicePath) ModeAny() *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId (wildcarded): uint16
func (n *TerminalDevicePathAny) ModeAny() *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId: uint16
func (n *TerminalDevicePath) Mode(ModeId uint16) *TerminalDevice_ModePath {
	return &TerminalDevice_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId: uint16
func (n *TerminalDevicePathAny) Mode(ModeId uint16) *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
}

// TerminalDevice_ChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_ChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/description YANG schema element.
type TerminalDevice_Channel_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/description YANG schema element.
type TerminalDevice_Channel_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/index YANG schema element.
type TerminalDevice_Channel_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/index YANG schema element.
type TerminalDevice_Channel_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LinkStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LinkStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPathAny struct {
	*ygot.NodePath
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/state/admin-state"
func (n *TerminalDevice_ChannelPath) AdminState() *TerminalDevice_Channel_AdminStatePath {
	return &TerminalDevice_Channel_AdminStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/state/admin-state"
func (n *TerminalDevice_ChannelPathAny) AdminState() *TerminalDevice_Channel_AdminStatePathAny {
	return &TerminalDevice_Channel_AdminStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPath) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPathAny) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPath) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPath {
	return &TerminalDevice_Channel_AssignmentPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPathAny) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/state/client-mapping-mode"
func (n *TerminalDevice_ChannelPath) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePath {
	return &TerminalDevice_Channel_ClientMappingModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/state/client-mapping-mode"
func (n *TerminalDevice_ChannelPathAny) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePathAny {
	return &TerminalDevice_Channel_ClientMappingModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/logical-channels/channel/state/description"
func (n *TerminalDevice_ChannelPath) Description() *TerminalDevice_Channel_DescriptionPath {
	return &TerminalDevice_Channel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/logical-channels/channel/state/description"
func (n *TerminalDevice_ChannelPathAny) Description() *TerminalDevice_Channel_DescriptionPathAny {
	return &TerminalDevice_Channel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPath) Ethernet() *TerminalDevice_Channel_EthernetPath {
	return &TerminalDevice_Channel_EthernetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPathAny) Ethernet() *TerminalDevice_Channel_EthernetPathAny {
	return &TerminalDevice_Channel_EthernetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/index"
// Path from root: "/terminal-device/logical-channels/channel/state/index"
func (n *TerminalDevice_ChannelPath) Index() *TerminalDevice_Channel_IndexPath {
	return &TerminalDevice_Channel_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/index"
// Path from root: "/terminal-device/logical-channels/channel/state/index"
func (n *TerminalDevice_ChannelPathAny) Index() *TerminalDevice_Channel_IndexPathAny {
	return &TerminalDevice_Channel_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPath) Ingress() *TerminalDevice_Channel_IngressPath {
	return &TerminalDevice_Channel_IngressPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPathAny) Ingress() *TerminalDevice_Channel_IngressPathAny {
	return &TerminalDevice_Channel_IngressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/link-state"
// Path from root: "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPath) LinkState() *TerminalDevice_Channel_LinkStatePath {
	return &TerminalDevice_Channel_LinkStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/link-state"
// Path from root: "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPathAny) LinkState() *TerminalDevice_Channel_LinkStatePathAny {
	return &TerminalDevice_Channel_LinkStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/state/logical-channel-type"
func (n *TerminalDevice_ChannelPath) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePath {
	return &TerminalDevice_Channel_LogicalChannelTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/state/logical-channel-type"
func (n *TerminalDevice_ChannelPathAny) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePathAny {
	return &TerminalDevice_Channel_LogicalChannelTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/state/loopback-mode"
func (n *TerminalDevice_ChannelPath) LoopbackMode() *TerminalDevice_Channel_LoopbackModePath {
	return &TerminalDevice_Channel_LoopbackModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/state/loopback-mode"
func (n *TerminalDevice_ChannelPathAny) LoopbackMode() *TerminalDevice_Channel_LoopbackModePathAny {
	return &TerminalDevice_Channel_LoopbackModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPath) Otn() *TerminalDevice_Channel_OtnPath {
	return &TerminalDevice_Channel_OtnPath{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPathAny) Otn() *TerminalDevice_Channel_OtnPathAny {
	return &TerminalDevice_Channel_OtnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/state/rate-class"
func (n *TerminalDevice_ChannelPath) RateClass() *TerminalDevice_Channel_RateClassPath {
	return &TerminalDevice_Channel_RateClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/state/rate-class"
func (n *TerminalDevice_ChannelPathAny) RateClass() *TerminalDevice_Channel_RateClassPathAny {
	return &TerminalDevice_Channel_RateClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/state/test-signal"
func (n *TerminalDevice_ChannelPath) TestSignal() *TerminalDevice_Channel_TestSignalPath {
	return &TerminalDevice_Channel_TestSignalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/state/test-signal"
func (n *TerminalDevice_ChannelPathAny) TestSignal() *TerminalDevice_Channel_TestSignalPathAny {
	return &TerminalDevice_Channel_TestSignalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/state/trib-protocol"
func (n *TerminalDevice_ChannelPath) TribProtocol() *TerminalDevice_Channel_TribProtocolPath {
	return &TerminalDevice_Channel_TribProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/state/trib-protocol"
func (n *TerminalDevice_ChannelPathAny) TribProtocol() *TerminalDevice_Channel_TribProtocolPathAny {
	return &TerminalDevice_Channel_TribProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_AssignmentPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AssignmentPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny struct {
	*ygot.NodePath
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation"
func (n *TerminalDevice_Channel_AssignmentPath) Allocation() *TerminalDevice_Channel_Assignment_AllocationPath {
	return &TerminalDevice_Channel_Assignment_AllocationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/allocation"
func (n *TerminalDevice_Channel_AssignmentPathAny) Allocation() *TerminalDevice_Channel_Assignment_AllocationPathAny {
	return &TerminalDevice_Channel_Assignment_AllocationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPath) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePath {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPathAny) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePathAny {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description"
func (n *TerminalDevice_Channel_AssignmentPath) Description() *TerminalDevice_Channel_Assignment_DescriptionPath {
	return &TerminalDevice_Channel_Assignment_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/description"
func (n *TerminalDevice_Channel_AssignmentPathAny) Description() *TerminalDevice_Channel_Assignment_DescriptionPathAny {
	return &TerminalDevice_Channel_Assignment_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index"
func (n *TerminalDevice_Channel_AssignmentPath) Index() *TerminalDevice_Channel_Assignment_IndexPath {
	return &TerminalDevice_Channel_Assignment_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/index"
func (n *TerminalDevice_Channel_AssignmentPathAny) Index() *TerminalDevice_Channel_Assignment_IndexPathAny {
	return &TerminalDevice_Channel_Assignment_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPath {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping"
func (n *TerminalDevice_Channel_AssignmentPath) Mapping() *TerminalDevice_Channel_Assignment_MappingPath {
	return &TerminalDevice_Channel_Assignment_MappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping"
func (n *TerminalDevice_Channel_AssignmentPathAny) Mapping() *TerminalDevice_Channel_Assignment_MappingPathAny {
	return &TerminalDevice_Channel_Assignment_MappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPath {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPath) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPath {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPathAny) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_EthernetPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_EthernetPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny struct {
	*ygot.NodePath
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/als-delay"
func (n *TerminalDevice_Channel_EthernetPath) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPath {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/als-delay"
func (n *TerminalDevice_Channel_EthernetPathAny) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPathAny {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/client-als"
func (n *TerminalDevice_Channel_EthernetPath) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPath {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/client-als"
func (n *TerminalDevice_Channel_EthernetPathAny) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPathAny {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPath) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPath {
	return &TerminalDevice_Channel_Ethernet_EsnrPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPathAny) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPathAny {
	return &TerminalDevice_Channel_Ethernet_EsnrPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPath) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath {
	return &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPathAny) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny {
	return &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPath {
	return &TerminalDevice_Channel_Ethernet_In_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-carrier-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InCarrierErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-carrier-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-fragment-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPath) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPath {
	return &TerminalDevice_Channel_Ethernet_InFragmentFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-fragment-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-interrupted-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPath) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPath {
	return &TerminalDevice_Channel_Ethernet_InInterruptedTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-interrupted-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny {
	return &TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-jabber-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPath) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPath {
	return &TerminalDevice_Channel_Ethernet_InJabberFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-jabber-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InJabberFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-late-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPath) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPath {
	return &TerminalDevice_Channel_Ethernet_InLateCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-late-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPathAny {
	return &TerminalDevice_Channel_Ethernet_InLateCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPath {
	return &TerminalDevice_Channel_Ethernet_InMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-errors-rx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPath) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPath {
	return &TerminalDevice_Channel_Ethernet_InMacErrorsRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-errors-rx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPath {
	return &TerminalDevice_Channel_Ethernet_InMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-maxsize-exceeded"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPath) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath {
	return &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-maxsize-exceeded"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPathAny) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny {
	return &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-oversize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPath {
	return &TerminalDevice_Channel_Ethernet_InOversizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-oversize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-single-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPath) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPath {
	return &TerminalDevice_Channel_Ethernet_InSingleCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-single-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny {
	return &TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-symbol-error"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPath) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPath {
	return &TerminalDevice_Channel_Ethernet_InSymbolErrorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-symbol-error"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPathAny) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny {
	return &TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-undersize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPath {
	return &TerminalDevice_Channel_Ethernet_InUndersizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-undersize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPath) Lldp() *TerminalDevice_Channel_Ethernet_LldpPath {
	return &TerminalDevice_Channel_Ethernet_LldpPath{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPathAny) Lldp() *TerminalDevice_Channel_Ethernet_LldpPathAny {
	return &TerminalDevice_Channel_Ethernet_LldpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPath {
	return &TerminalDevice_Channel_Ethernet_Out_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPath {
	return &TerminalDevice_Channel_Ethernet_OutMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-errors-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPath) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath {
	return &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-errors-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath {
	return &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPath) QValue() *TerminalDevice_Channel_Ethernet_QValuePath {
	return &TerminalDevice_Channel_Ethernet_QValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPathAny) QValue() *TerminalDevice_Channel_Ethernet_QValuePathAny {
	return &TerminalDevice_Channel_Ethernet_QValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_EsnrPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_EsnrPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_LldpPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_LldpPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny struct {
	*ygot.NodePath
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/counters"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/counters"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_LldpPath) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny struct {
	*ygot.NodePath
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "last-clear"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "last-clear"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-unknown"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-unknown"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny struct {
	*ygot.NodePath
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/age"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/age"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/last-update"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/last-update"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-name"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-name"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyOuiAnyOuiSubtype(Type int32) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyOuiAnyOuiSubtype(Type int32) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyTypeAnyOuiSubtype(Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyTypeAnyOuiSubtype(Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyOuiSubtype(Type int32, Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyOuiSubtype(Type int32, Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyTypeAnyOui(OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyTypeAnyOui(OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyOui(Type int32, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyOui(Type int32, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAnyType(Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAnyType(Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/ttl"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/ttl"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny struct {
	*ygot.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui-subtype"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui-subtype"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_PostFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}
