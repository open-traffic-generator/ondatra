/*
Package telemetry is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/alexmasi/go/pkg/mod/github.com/openconfig/ygot@v0.25.2/genutil/names.go
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - gnsi/authz/gnsi-authz.yang
  - gnsi/cert/gnsi-cert.yang
  - gnsi/console/gnsi-console.yang
  - gnsi/pathz/gnsi-pathz.yang
  - gnsi/ssh/gnsi-ssh.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package telemetry

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_DefinedSets_BgpDefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	AsPathSet       map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet       `path:"as-path-sets/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySet    map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet    `path:"community-sets/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet `path:"ext-community-sets/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewAsPathSet(AsPathSetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	key := AsPathSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet{
		AsPathSetName: &AsPathSetName,
	}

	return t.AsPathSet[key], nil
}

// RenameAsPathSet renames an entry in the list AsPathSet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameAsPathSet(oldK, newK string) error {
	if _, ok := t.AsPathSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathSet", newK)
	}

	e, ok := t.AsPathSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathSet", oldK)
	}
	e.AsPathSetName = &newK

	t.AsPathSet[newK] = e
	delete(t.AsPathSet, oldK)
	return nil
}

// GetOrCreateAsPathSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	key := AsPathSetName

	if v, ok := t.AsPathSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathSet(AsPathSetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathSet got unexpected error: %v", err))
	}
	return v
}

// GetAsPathSet retrieves the value with the specified key from
// the AsPathSet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	if t == nil {
		return nil
	}

	key := AsPathSetName

	if lm, ok := t.AsPathSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteAsPathSet(AsPathSetName string) {
	key := AsPathSetName

	delete(t.AsPathSet, key)
}

// AppendAsPathSet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct to the
// list AsPathSet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendAsPathSet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) error {
	if v.AsPathSetName == nil {
		return fmt.Errorf("invalid nil key received for AsPathSetName")
	}

	key := *v.AsPathSetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	if _, ok := t.AsPathSet[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathSet %v", key)
	}

	t.AsPathSet[key] = v
	return nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewCommunitySet(CommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	key := CommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet{
		CommunitySetName: &CommunitySetName,
	}

	return t.CommunitySet[key], nil
}

// RenameCommunitySet renames an entry in the list CommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameCommunitySet(oldK, newK string) error {
	if _, ok := t.CommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in CommunitySet", newK)
	}

	e, ok := t.CommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommunitySet", oldK)
	}
	e.CommunitySetName = &newK

	t.CommunitySet[newK] = e
	delete(t.CommunitySet, oldK)
	return nil
}

// GetOrCreateCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	key := CommunitySetName

	if v, ok := t.CommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunitySet(CommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetCommunitySet retrieves the value with the specified key from
// the CommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	if t == nil {
		return nil
	}

	key := CommunitySetName

	if lm, ok := t.CommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteCommunitySet(CommunitySetName string) {
	key := CommunitySetName

	delete(t.CommunitySet, key)
}

// AppendCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct to the
// list CommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) error {
	if v.CommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for CommunitySetName")
	}

	key := *v.CommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	if _, ok := t.CommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list CommunitySet %v", key)
	}

	t.CommunitySet[key] = v
	return nil
}

// NewExtCommunitySet creates a new entry in the ExtCommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewExtCommunitySet(ExtCommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	key := ExtCommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunitySet", key)
	}

	t.ExtCommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet{
		ExtCommunitySetName: &ExtCommunitySetName,
	}

	return t.ExtCommunitySet[key], nil
}

// RenameExtCommunitySet renames an entry in the list ExtCommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameExtCommunitySet(oldK, newK string) error {
	if _, ok := t.ExtCommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunitySet", newK)
	}

	e, ok := t.ExtCommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunitySet", oldK)
	}
	e.ExtCommunitySetName = &newK

	t.ExtCommunitySet[newK] = e
	delete(t.ExtCommunitySet, oldK)
	return nil
}

// GetOrCreateExtCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	key := ExtCommunitySetName

	if v, ok := t.ExtCommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunitySet(ExtCommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunitySet retrieves the value with the specified key from
// the ExtCommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	if t == nil {
		return nil
	}

	key := ExtCommunitySetName

	if lm, ok := t.ExtCommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteExtCommunitySet(ExtCommunitySetName string) {
	key := ExtCommunitySetName

	delete(t.ExtCommunitySet, key)
}

// AppendExtCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct to the
// list ExtCommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendExtCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) error {
	if v.ExtCommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for ExtCommunitySetName")
	}

	key := *v.ExtCommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	if _, ok := t.ExtCommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunitySet %v", key)
	}

	t.ExtCommunitySet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AsPathSet {
		e.PopulateDefaults()
	}
	for _, e := range t.CommunitySet {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtCommunitySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct {
	AsPathSetMember []string `path:"state/as-path-set-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathSetName   *string  `path:"state/as-path-set-name|as-path-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/as-path-set-name|as-path-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) IsYANGGoStruct() {}

// GetAsPathSetMember retrieves the value of the leaf AsPathSetMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetMember is set, it can
// safely use t.GetAsPathSetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetMember() []string {
	if t == nil || t.AsPathSetMember == nil {
		return nil
	}
	return t.AsPathSetMember
}

// GetAsPathSetName retrieves the value of the leaf AsPathSetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetName is set, it can
// safely use t.GetAsPathSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetName() string {
	if t == nil || t.AsPathSetName == nil {
		return ""
	}
	return *t.AsPathSetName
}

// SetAsPathSetMember sets the value of the leaf AsPathSetMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetMember(v []string) {
	t.AsPathSetMember = v
}

// SetAsPathSetName sets the value of the leaf AsPathSetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) SetAsPathSetName(v string) {
	t.AsPathSetName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsPathSetName == nil {
		return nil, fmt.Errorf("nil value for key AsPathSetName")
	}

	return map[string]interface{}{
		"as-path-set-name": *t.AsPathSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct {
	CommunityMember  []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union `path:"state/community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetName *string                                                                       `path:"state/community-set-name|community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/community-set-name|community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsType                                             `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) IsYANGGoStruct() {}

// GetCommunityMember retrieves the value of the leaf CommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityMember is set, it can
// safely use t.GetCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunityMember() []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union {
	if t == nil || t.CommunityMember == nil {
		return nil
	}
	return t.CommunityMember
}

// GetCommunitySetName retrieves the value of the leaf CommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetName is set, it can
// safely use t.GetCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunitySetName() string {
	if t == nil || t.CommunitySetName == nil {
		return ""
	}
	return *t.CommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetCommunityMember sets the value of the leaf CommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunityMember(v []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union) {
	t.CommunityMember = v
}

// SetCommunitySetName sets the value of the leaf CommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetCommunitySetName(v string) {
	t.CommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key CommunitySetName")
	}

	return map[string]interface{}{
		"community-set-name": *t.CommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct {
	ExtCommunityMember  []string                          `path:"state/ext-community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetName *string                           `path:"state/ext-community-set-name|ext-community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"config/ext-community-set-name|ext-community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions     E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) IsYANGGoStruct() {}

// GetExtCommunityMember retrieves the value of the leaf ExtCommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityMember is set, it can
// safely use t.GetExtCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunityMember() []string {
	if t == nil || t.ExtCommunityMember == nil {
		return nil
	}
	return t.ExtCommunityMember
}

// GetExtCommunitySetName retrieves the value of the leaf ExtCommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetName is set, it can
// safely use t.GetExtCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunitySetName() string {
	if t == nil || t.ExtCommunitySetName == nil {
		return ""
	}
	return *t.ExtCommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetExtCommunityMember sets the value of the leaf ExtCommunityMember in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunityMember(v []string) {
	t.ExtCommunityMember = v
}

// SetExtCommunitySetName sets the value of the leaf ExtCommunitySetName in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetExtCommunitySetName(v string) {
	t.ExtCommunitySetName = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtCommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key ExtCommunitySetName")
	}

	return map[string]interface{}{
		"ext-community-set-name": *t.ExtCommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet struct {
	Address []string `path:"state/address" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/address" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name    *string  `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_NeighborSet) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetAddress sets the value of the leaf Address in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetAddress(v []string) {
	t.Address = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_NeighborSet
// struct.
func (t *RoutingPolicy_DefinedSets_NeighborSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_NeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_NeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_NeighborSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_NeighborSet.
func (*RoutingPolicy_DefinedSets_NeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet struct {
	Mode   E_PrefixSet_Mode                                                                               `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name   *string                                                                                        `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Prefix map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix `path:"prefixes/prefix" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet) IsYANGGoStruct() {}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// NewPrefix creates a new entry in the Prefix list of the
// RoutingPolicy_DefinedSets_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_PrefixSet) NewPrefix(IpPrefix string, MasklengthRange string) (*RoutingPolicy_DefinedSets_PrefixSet_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &RoutingPolicy_DefinedSets_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the RoutingPolicy_DefinedSets_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) RenamePrefix(oldK, newK RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of RoutingPolicy_DefinedSets_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetPrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	if t == nil {
		return nil
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_PrefixSet) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix struct to the
// list Prefix of RoutingPolicy_DefinedSets_PrefixSet. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_PrefixSet) AppendPrefix(v *RoutingPolicy_DefinedSets_PrefixSet_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetMode() E_PrefixSet_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetMode(v E_PrefixSet_Mode) {
	t.Mode = v
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_PrefixSet
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet.
func (*RoutingPolicy_DefinedSets_PrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix struct {
	IpPrefix        *string `path:"state/ip-prefix|ip-prefix" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/ip-prefix|ip-prefix" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	MasklengthRange *string `path:"state/masklength-range|masklength-range" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/masklength-range|masklength-range" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMasklengthRange retrieves the value of the leaf MasklengthRange from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasklengthRange is set, it can
// safely use t.GetMasklengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasklengthRange == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetMasklengthRange() string {
	if t == nil || t.MasklengthRange == nil {
		return ""
	}
	return *t.MasklengthRange
}

// SetIpPrefix sets the value of the leaf IpPrefix in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetIpPrefix(v string) {
	t.IpPrefix = &v
}

// SetMasklengthRange sets the value of the leaf MasklengthRange in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) SetMasklengthRange(v string) {
	t.MasklengthRange = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet_Prefix.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSet struct {
	Name     *string                                           `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	TagValue []RoutingPolicy_DefinedSets_TagSet_TagValue_Union `path:"state/tag-value" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-value" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTagValue retrieves the value of the leaf TagValue from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagValue is set, it can
// safely use t.GetTagValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagValue == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetTagValue() []RoutingPolicy_DefinedSets_TagSet_TagValue_Union {
	if t == nil || t.TagValue == nil {
		return nil
	}
	return t.TagValue
}

// SetName sets the value of the leaf Name in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetName(v string) {
	t.Name = &v
}

// SetTagValue sets the value of the leaf TagValue in the RoutingPolicy_DefinedSets_TagSet
// struct.
func (t *RoutingPolicy_DefinedSets_TagSet) SetTagValue(v []RoutingPolicy_DefinedSets_TagSet_TagValue_Union) {
	t.TagValue = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_TagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_TagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_TagSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_TagSet.
func (*RoutingPolicy_DefinedSets_TagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinition struct {
	Name      *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Statement map[string]*RoutingPolicy_PolicyDefinition_Statement `path:"statements/statement" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition) IsYANGGoStruct() {}

// NewStatement creates a new entry in the Statement list of the
// RoutingPolicy_PolicyDefinition struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_PolicyDefinition) NewStatement(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Statement == nil {
		t.Statement = make(map[string]*RoutingPolicy_PolicyDefinition_Statement)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Statement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Statement", key)
	}

	t.Statement[key] = &RoutingPolicy_PolicyDefinition_Statement{
		Name: &Name,
	}

	return t.Statement[key], nil
}

// RenameStatement renames an entry in the list Statement within
// the RoutingPolicy_PolicyDefinition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_PolicyDefinition) RenameStatement(oldK, newK string) error {
	if _, ok := t.Statement[newK]; ok {
		return fmt.Errorf("key %v already exists in Statement", newK)
	}

	e, ok := t.Statement[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Statement", oldK)
	}
	e.Name = &newK

	t.Statement[newK] = e
	delete(t.Statement, oldK)
	return nil
}

// GetOrCreateStatement retrieves the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_PolicyDefinition) GetOrCreateStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {

	key := Name

	if v, ok := t.Statement[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatement(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatement got unexpected error: %v", err))
	}
	return v
}

// GetStatement retrieves the value with the specified key from
// the Statement map field of RoutingPolicy_PolicyDefinition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_PolicyDefinition) GetStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Statement[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatement deletes the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_PolicyDefinition) DeleteStatement(Name string) {
	key := Name

	delete(t.Statement, key)
}

// AppendStatement appends the supplied RoutingPolicy_PolicyDefinition_Statement struct to the
// list Statement of RoutingPolicy_PolicyDefinition. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition_Statement already exist in the list, an error is
// returned.
func (t *RoutingPolicy_PolicyDefinition) AppendStatement(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Statement == nil {
		t.Statement = make(map[string]*RoutingPolicy_PolicyDefinition_Statement)
	}

	if _, ok := t.Statement[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}

	t.Statement[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition
// struct.
func (t *RoutingPolicy_PolicyDefinition) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Statement {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition.
func (*RoutingPolicy_PolicyDefinition) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement struct {
	Actions    *RoutingPolicy_PolicyDefinition_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	Conditions *RoutingPolicy_PolicyDefinition_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	Name       *string                                              `path:"state/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"config/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &RoutingPolicy_PolicyDefinition_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// SetName sets the value of the leaf Name in the RoutingPolicy_PolicyDefinition_Statement
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement) SetName(v string) {
	t.Name = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition_Statement struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement.
func (*RoutingPolicy_PolicyDefinition_Statement) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions struct {
	BgpActions   *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions `path:"bgp-actions" module:"openconfig-bgp-policy"`
	PolicyResult E_RoutingPolicy_PolicyResultType                             `path:"state/policy-result" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/policy-result" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	SetTag       *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag     `path:"set-tag" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) IsYANGGoStruct() {}

// GetOrCreateBgpActions retrieves the value of the BgpActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t.BgpActions != nil {
		return t.BgpActions
	}
	t.BgpActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions{}
	return t.BgpActions
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetBgpActions returns the value of the BgpActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field BgpActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t != nil && t.BgpActions != nil {
		return t.BgpActions
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetPolicyResult() E_RoutingPolicy_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return 0
	}
	return t.PolicyResult
}

// SetPolicyResult sets the value of the leaf PolicyResult in the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) SetPolicyResult(v E_RoutingPolicy_PolicyResultType) {
	t.PolicyResult = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpActions.PopulateDefaults()
	t.SetTag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions struct {
	SetAsPathPrepend *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend `path:"set-as-path-prepend" module:"openconfig-bgp-policy"`
	SetCommunity     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity     `path:"set-community" module:"openconfig-bgp-policy"`
	SetExtCommunity  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity  `path:"set-ext-community" module:"openconfig-bgp-policy"`
	SetLocalPref     *uint32                                                                       `path:"state/set-local-pref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-local-pref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMed           RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union      `path:"state/set-med" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-med" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetNextHop       RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union  `path:"state/set-next-hop" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-next-hop" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetRouteOrigin   E_BgpTypes_BgpOriginAttrType                                                  `path:"state/set-route-origin" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/set-route-origin" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) IsYANGGoStruct() {}

// GetOrCreateSetAsPathPrepend retrieves the value of the SetAsPathPrepend field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	t.SetAsPathPrepend = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend{}
	return t.SetAsPathPrepend
}

// GetOrCreateSetCommunity retrieves the value of the SetCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t.SetCommunity != nil {
		return t.SetCommunity
	}
	t.SetCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity{}
	return t.SetCommunity
}

// GetOrCreateSetExtCommunity retrieves the value of the SetExtCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	t.SetExtCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity{}
	return t.SetExtCommunity
}

// GetSetAsPathPrepend returns the value of the SetAsPathPrepend struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetAsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t != nil && t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	return nil
}

// GetSetCommunity returns the value of the SetCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t != nil && t.SetCommunity != nil {
		return t.SetCommunity
	}
	return nil
}

// GetSetExtCommunity returns the value of the SetExtCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetExtCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t != nil && t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	return nil
}

// GetSetLocalPref retrieves the value of the leaf SetLocalPref from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLocalPref is set, it can
// safely use t.GetSetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLocalPref == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetLocalPref() uint32 {
	if t == nil || t.SetLocalPref == nil {
		return 0
	}
	return *t.SetLocalPref
}

// GetSetMed retrieves the value of the leaf SetMed from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMed is set, it can
// safely use t.GetSetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMed == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMed() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union {
	if t == nil || t.SetMed == nil {
		return nil
	}
	return t.SetMed
}

// GetSetNextHop retrieves the value of the leaf SetNextHop from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetNextHop is set, it can
// safely use t.GetSetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetNextHop == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetNextHop() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union {
	if t == nil || t.SetNextHop == nil {
		return nil
	}
	return t.SetNextHop
}

// GetSetRouteOrigin retrieves the value of the leaf SetRouteOrigin from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetRouteOrigin is set, it can
// safely use t.GetSetRouteOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetRouteOrigin == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetRouteOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.SetRouteOrigin == 0 {
		return 0
	}
	return t.SetRouteOrigin
}

// SetSetLocalPref sets the value of the leaf SetLocalPref in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetLocalPref(v uint32) {
	t.SetLocalPref = &v
}

// SetSetMed sets the value of the leaf SetMed in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetMed(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union) {
	t.SetMed = v
}

// SetSetNextHop sets the value of the leaf SetNextHop in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetNextHop(v RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union) {
	t.SetNextHop = v
}

// SetSetRouteOrigin sets the value of the leaf SetRouteOrigin in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) SetSetRouteOrigin(v E_BgpTypes_BgpOriginAttrType) {
	t.SetRouteOrigin = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetAsPathPrepend.PopulateDefaults()
	t.SetCommunity.PopulateDefaults()
	t.SetExtCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	Asn     *uint32 `path:"state/asn" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/asn" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RepeatN *uint8  `path:"state/repeat-n" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/repeat-n" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) IsYANGGoStruct() {
}

// GetAsn retrieves the value of the leaf Asn from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetRepeatN retrieves the value of the leaf RepeatN from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// SetAsn sets the value of the leaf Asn in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetAsn(v uint32) {
	t.Asn = &v
}

// SetRepeatN sets the value of the leaf RepeatN in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) SetRepeatN(v uint8) {
	t.RepeatN = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                               `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                               `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	CommunitySetRef *string `path:"state/community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) IsYANGGoStruct() {
}

// GetCommunitySetRef retrieves the value of the leaf CommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRef is set, it can
// safely use t.GetCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRef() string {
	if t == nil || t.CommunitySetRef == nil {
		return ""
	}
	return *t.CommunitySetRef
}

// SetCommunitySetRef sets the value of the leaf CommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) SetCommunitySetRef(v string) {
	t.CommunitySetRef = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_SetCommunity_Method                                                                  `path:"state/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                                  `path:"state/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) IsYANGGoStruct() {
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// SetMethod sets the value of the leaf Method in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetMethod(v E_SetCommunity_Method) {
	t.Method = v
}

// SetOptions sets the value of the leaf Options in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) SetOptions(v E_BgpPolicy_BgpSetCommunityOptionType) {
	t.Options = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union `path:"state/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// SetCommunities sets the value of the leaf Communities in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) SetCommunities(v []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union) {
	t.Communities = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	ExtCommunitySetRef *string `path:"state/ext-community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) IsYANGGoStruct() {
}

// GetExtCommunitySetRef retrieves the value of the leaf ExtCommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRef is set, it can
// safely use t.GetExtCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRef() string {
	if t == nil || t.ExtCommunitySetRef == nil {
		return ""
	}
	return *t.ExtCommunitySetRef
}

// SetExtCommunitySetRef sets the value of the leaf ExtCommunitySetRef in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) SetExtCommunitySetRef(v string) {
	t.ExtCommunitySetRef = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	Mode      E_SetTag_Mode                                                      `path:"state/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetMode() E_SetTag_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// SetMode sets the value of the leaf Mode in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) SetMode(v E_SetTag_Mode) {
	t.Mode = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline struct {
	Tag []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union `path:"state/tag" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) GetTag() []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// SetTag sets the value of the leaf Tag in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) SetTag(v []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union) {
	t.Tag = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference struct {
	TagSet *string `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions struct {
	BgpConditions     *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions    `path:"bgp-conditions" module:"openconfig-bgp-policy"`
	CallPolicy        *string                                                               `path:"state/call-policy" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/call-policy" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	InstallProtocolEq E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"state/install-protocol-eq" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/install-protocol-eq" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	MatchInterface    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	MatchNeighborSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	MatchPrefixSet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	MatchTagSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) IsYANGGoStruct() {}

// GetOrCreateBgpConditions retrieves the value of the BgpConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t.BgpConditions != nil {
		return t.BgpConditions
	}
	t.BgpConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions{}
	return t.BgpConditions
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetBgpConditions returns the value of the BgpConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field BgpConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t != nil && t.BgpConditions != nil {
		return t.BgpConditions
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetCallPolicy retrieves the value of the leaf CallPolicy from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallPolicy is set, it can
// safely use t.GetCallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallPolicy == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetCallPolicy() string {
	if t == nil || t.CallPolicy == nil {
		return ""
	}
	return *t.CallPolicy
}

// GetInstallProtocolEq retrieves the value of the leaf InstallProtocolEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallProtocolEq is set, it can
// safely use t.GetInstallProtocolEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallProtocolEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetInstallProtocolEq() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.InstallProtocolEq == 0 {
		return 0
	}
	return t.InstallProtocolEq
}

// SetCallPolicy sets the value of the leaf CallPolicy in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetCallPolicy(v string) {
	t.CallPolicy = &v
}

// SetInstallProtocolEq sets the value of the leaf InstallProtocolEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) SetInstallProtocolEq(v E_PolicyTypes_INSTALL_PROTOCOL_TYPE) {
	t.InstallProtocolEq = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpConditions.PopulateDefaults()
	t.MatchInterface.PopulateDefaults()
	t.MatchNeighborSet.PopulateDefaults()
	t.MatchPrefixSet.PopulateDefaults()
	t.MatchTagSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions struct {
	AfiSafiIn       []E_BgpTypes_AFI_SAFI_TYPE                                                        `path:"state/afi-safi-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/afi-safi-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathLength    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength   `path:"as-path-length" module:"openconfig-bgp-policy"`
	CommunityCount  *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount `path:"community-count" module:"openconfig-bgp-policy"`
	CommunitySet    *string                                                                           `path:"state/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet *string                                                                           `path:"state/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	LocalPrefEq     *uint32                                                                           `path:"state/local-pref-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/local-pref-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchAsPathSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet `path:"match-as-path-set" module:"openconfig-bgp-policy"`
	MedEq           *uint32                                                                           `path:"state/med-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/med-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	NextHopIn       []string                                                                          `path:"state/next-hop-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/next-hop-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	OriginEq        E_BgpTypes_BgpOriginAttrType                                                      `path:"state/origin-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/origin-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RouteType       E_BgpConditions_RouteType                                                         `path:"state/route-type" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/route-type" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateCommunityCount retrieves the value of the CommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t.CommunityCount != nil {
		return t.CommunityCount
	}
	t.CommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount{}
	return t.CommunityCount
}

// GetOrCreateMatchAsPathSet retrieves the value of the MatchAsPathSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	t.MatchAsPathSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	return t.MatchAsPathSet
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetCommunityCount returns the value of the CommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field CommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t != nil && t.CommunityCount != nil {
		return t.CommunityCount
	}
	return nil
}

// GetMatchAsPathSet returns the value of the MatchAsPathSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchAsPathSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t != nil && t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	return nil
}

// GetAfiSafiIn retrieves the value of the leaf AfiSafiIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiIn is set, it can
// safely use t.GetAfiSafiIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAfiSafiIn() []E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiIn == nil {
		return nil
	}
	return t.AfiSafiIn
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetLocalPrefEq retrieves the value of the leaf LocalPrefEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPrefEq is set, it can
// safely use t.GetLocalPrefEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPrefEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetLocalPrefEq() uint32 {
	if t == nil || t.LocalPrefEq == nil {
		return 0
	}
	return *t.LocalPrefEq
}

// GetMedEq retrieves the value of the leaf MedEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedEq is set, it can
// safely use t.GetMedEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMedEq() uint32 {
	if t == nil || t.MedEq == nil {
		return 0
	}
	return *t.MedEq
}

// GetNextHopIn retrieves the value of the leaf NextHopIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIn is set, it can
// safely use t.GetNextHopIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetNextHopIn() []string {
	if t == nil || t.NextHopIn == nil {
		return nil
	}
	return t.NextHopIn
}

// GetOriginEq retrieves the value of the leaf OriginEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginEq is set, it can
// safely use t.GetOriginEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOriginEq() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.OriginEq == 0 {
		return 0
	}
	return t.OriginEq
}

// GetRouteType retrieves the value of the leaf RouteType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetRouteType() E_BgpConditions_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// SetAfiSafiIn sets the value of the leaf AfiSafiIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetAfiSafiIn(v []E_BgpTypes_AFI_SAFI_TYPE) {
	t.AfiSafiIn = v
}

// SetCommunitySet sets the value of the leaf CommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetCommunitySet(v string) {
	t.CommunitySet = &v
}

// SetExtCommunitySet sets the value of the leaf ExtCommunitySet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetExtCommunitySet(v string) {
	t.ExtCommunitySet = &v
}

// SetLocalPrefEq sets the value of the leaf LocalPrefEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetLocalPrefEq(v uint32) {
	t.LocalPrefEq = &v
}

// SetMedEq sets the value of the leaf MedEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetMedEq(v uint32) {
	t.MedEq = &v
}

// SetNextHopIn sets the value of the leaf NextHopIn in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetNextHopIn(v []string) {
	t.NextHopIn = v
}

// SetOriginEq sets the value of the leaf OriginEq in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetOriginEq(v E_BgpTypes_BgpOriginAttrType) {
	t.OriginEq = v
}

// SetRouteType sets the value of the leaf RouteType in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) SetRouteType(v E_BgpConditions_RouteType) {
	t.RouteType = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPathLength.PopulateDefaults()
	t.CommunityCount.PopulateDefaults()
	t.MatchAsPathSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"state/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"state/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// SetOperator sets the value of the leaf Operator in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetOperator(v E_PolicyTypes_ATTRIBUTE_COMPARISON) {
	t.Operator = v
}

// SetValue sets the value of the leaf Value in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) SetValue(v uint32) {
	t.Value = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	AsPathSet       *string                           `path:"state/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/as-path-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"state/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) IsYANGGoStruct() {
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// SetAsPathSet sets the value of the leaf AsPathSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetAsPathSet(v string) {
	t.AsPathSet = &v
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsType) {
	t.MatchSetOptions = v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface struct {
	Interface    *string `path:"state/interface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/interface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/subinterface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// SetInterface sets the value of the leaf Interface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetInterface(v string) {
	t.Interface = &v
}

// SetSubinterface sets the value of the leaf Subinterface in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) SetSubinterface(v uint32) {
	t.Subinterface = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	NeighborSet     *string                                     `path:"state/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/neighbor-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetNeighborSet retrieves the value of the leaf NeighborSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSet is set, it can
// safely use t.GetNeighborSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetNeighborSet() string {
	if t == nil || t.NeighborSet == nil {
		return ""
	}
	return *t.NeighborSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetNeighborSet sets the value of the leaf NeighborSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) SetNeighborSet(v string) {
	t.NeighborSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet       *string                                     `path:"state/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/prefix-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetPrefixSet sets the value of the leaf PrefixSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) SetPrefixSet(v string) {
	t.PrefixSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"state/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet          *string                                     `path:"state/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"config/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// SetMatchSetOptions sets the value of the leaf MatchSetOptions in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetMatchSetOptions(v E_PolicyTypes_MatchSetOptionsRestrictedType) {
	t.MatchSetOptions = v
}

// SetTagSet sets the value of the leaf TagSet in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) SetTagSet(v string) {
	t.TagSet = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// Sampling represents the /openconfig-sampling/sampling YANG schema element.
type Sampling struct {
	Sflow *Sampling_Sflow `path:"sflow" module:"openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling) IsYANGGoStruct() {}

// GetOrCreateSflow retrieves the value of the Sflow field
// or returns the existing field if it already exists.
func (t *Sampling) GetOrCreateSflow() *Sampling_Sflow {
	if t.Sflow != nil {
		return t.Sflow
	}
	t.Sflow = &Sampling_Sflow{}
	return t.Sflow
}

// GetSflow returns the value of the Sflow struct pointer
// from Sampling. If the receiver or the field Sflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Sampling) GetSflow() *Sampling_Sflow {
	if t != nil && t.Sflow != nil {
		return t.Sflow
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Sflow.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling.
func (*Sampling) ΛBelongingModule() string {
	return "openconfig-sampling"
}

// Sampling_Sflow represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_Sflow struct {
	AgentIdIpv4         *string                                                    `path:"state/agent-id-ipv4" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/agent-id-ipv4" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	AgentIdIpv6         *string                                                    `path:"state/agent-id-ipv6" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/agent-id-ipv6" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Collector           map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector `path:"collectors/collector" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Dscp                *uint8                                                     `path:"state/dscp" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/dscp" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	EgressSamplingRate  *uint32                                                    `path:"state/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool                                                      `path:"state/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32                                                    `path:"state/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Interface           map[string]*Sampling_Sflow_Interface                       `path:"interfaces/interface" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16                                                    `path:"state/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	SampleSize          *uint16                                                    `path:"state/sample-size" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/sample-size" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow) IsYANGGoStruct() {}

// Sampling_Sflow_Collector_Key represents the key for list Collector of element /openconfig-sampling/sampling/sflow.
type Sampling_Sflow_Collector_Key struct {
	Address string `path:"address"`
	Port    uint16 `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewCollector(Address string, Port uint16) (*Sampling_Sflow_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &Sampling_Sflow_Collector{
		Address: &Address,
		Port:    &Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameCollector(oldK, newK Sampling_Sflow_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	if t == nil {
		return nil
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteCollector(Address string, Port uint16) {
	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied Sampling_Sflow_Collector struct to the
// list Collector of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Collector already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendCollector(v *Sampling_Sflow_Collector) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := Sampling_Sflow_Collector_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewInterface(Name string) (*Sampling_Sflow_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Sampling_Sflow_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateInterface(Name string) *Sampling_Sflow_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetInterface(Name string) *Sampling_Sflow_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Sampling_Sflow_Interface struct to the
// list Interface of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Interface already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendInterface(v *Sampling_Sflow_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAgentIdIpv4 retrieves the value of the leaf AgentIdIpv4 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv4 is set, it can
// safely use t.GetAgentIdIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv4 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv4() string {
	if t == nil || t.AgentIdIpv4 == nil {
		return ""
	}
	return *t.AgentIdIpv4
}

// GetAgentIdIpv6 retrieves the value of the leaf AgentIdIpv6 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv6 is set, it can
// safely use t.GetAgentIdIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv6 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv6() string {
	if t == nil || t.AgentIdIpv6 == nil {
		return ""
	}
	return *t.AgentIdIpv6
}

// GetDscp retrieves the value of the leaf Dscp from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// GetSampleSize retrieves the value of the leaf SampleSize from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleSize is set, it can
// safely use t.GetSampleSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleSize == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetSampleSize() uint16 {
	if t == nil || t.SampleSize == nil {
		return 128
	}
	return *t.SampleSize
}

// SetAgentIdIpv4 sets the value of the leaf AgentIdIpv4 in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetAgentIdIpv4(v string) {
	t.AgentIdIpv4 = &v
}

// SetAgentIdIpv6 sets the value of the leaf AgentIdIpv6 in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetAgentIdIpv6(v string) {
	t.AgentIdIpv6 = &v
}

// SetDscp sets the value of the leaf Dscp in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetDscp(v uint8) {
	t.Dscp = &v
}

// SetEgressSamplingRate sets the value of the leaf EgressSamplingRate in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetEgressSamplingRate(v uint32) {
	t.EgressSamplingRate = &v
}

// SetEnabled sets the value of the leaf Enabled in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetIngressSamplingRate sets the value of the leaf IngressSamplingRate in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetIngressSamplingRate(v uint32) {
	t.IngressSamplingRate = &v
}

// SetPollingInterval sets the value of the leaf PollingInterval in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetPollingInterval(v uint16) {
	t.PollingInterval = &v
}

// SetSampleSize sets the value of the leaf SampleSize in the Sampling_Sflow
// struct.
func (t *Sampling_Sflow) SetSampleSize(v uint16) {
	t.SampleSize = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	if t.SampleSize == nil {
		var v uint16 = 128
		t.SampleSize = &v
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow.
func (*Sampling_Sflow) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Collector represents the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_Collector struct {
	Address         *string `path:"state/address|address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/address|address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	NetworkInstance *string `path:"state/network-instance" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/network-instance" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PacketsSent     *uint64 `path:"state/packets-sent" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Port            *uint16 `path:"state/port|port" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/port|port" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	SourceAddress   *string `path:"state/source-address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/source-address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Collector) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPacketsSent retrieves the value of the leaf PacketsSent from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSent is set, it can
// safely use t.GetPacketsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSent == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPacketsSent() uint64 {
	if t == nil || t.PacketsSent == nil {
		return 0
	}
	return *t.PacketsSent
}

// GetPort retrieves the value of the leaf Port from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 6343
	}
	return *t.Port
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetAddress sets the value of the leaf Address in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetAddress(v string) {
	t.Address = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetPacketsSent sets the value of the leaf PacketsSent in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetPacketsSent(v uint64) {
	t.PacketsSent = &v
}

// SetPort sets the value of the leaf Port in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetPort(v uint16) {
	t.Port = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the Sampling_Sflow_Collector
// struct.
func (t *Sampling_Sflow_Collector) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 6343
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the Sampling_Sflow_Collector struct, which is a YANG list entry.
func (t *Sampling_Sflow_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Collector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Collector.
func (*Sampling_Sflow_Collector) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Interface represents the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_Interface struct {
	EgressSamplingRate  *uint32 `path:"state/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool   `path:"state/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32 `path:"state/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Name                *string `path:"state/name|name" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"config/name|name" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	PacketsSampled      *uint64 `path:"state/packets-sampled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16 `path:"state/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"config/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Interface) IsYANGGoStruct() {}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetName retrieves the value of the leaf Name from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPacketsSampled retrieves the value of the leaf PacketsSampled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSampled is set, it can
// safely use t.GetPacketsSampled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSampled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPacketsSampled() uint64 {
	if t == nil || t.PacketsSampled == nil {
		return 0
	}
	return *t.PacketsSampled
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// SetEgressSamplingRate sets the value of the leaf EgressSamplingRate in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetEgressSamplingRate(v uint32) {
	t.EgressSamplingRate = &v
}

// SetEnabled sets the value of the leaf Enabled in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetIngressSamplingRate sets the value of the leaf IngressSamplingRate in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetIngressSamplingRate(v uint32) {
	t.IngressSamplingRate = &v
}

// SetName sets the value of the leaf Name in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetName(v string) {
	t.Name = &v
}

// SetPacketsSampled sets the value of the leaf PacketsSampled in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetPacketsSampled(v uint64) {
	t.PacketsSampled = &v
}

// SetPollingInterval sets the value of the leaf PollingInterval in the Sampling_Sflow_Interface
// struct.
func (t *Sampling_Sflow_Interface) SetPollingInterval(v uint16) {
	t.PollingInterval = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Sampling_Sflow_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling_Sflow_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Sampling_Sflow_Interface struct, which is a YANG list entry.
func (t *Sampling_Sflow_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Interface.
func (*Sampling_Sflow_Interface) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// System represents the /openconfig-system/system YANG schema element.
type System struct {
	Aaa               *System_Aaa                            `path:"aaa" module:"openconfig-system"`
	Alarm             map[string]*System_Alarm               `path:"alarms/alarm" module:"openconfig-system/openconfig-system"`
	BootTime          *uint64                                `path:"state/boot-time" module:"openconfig-system/openconfig-system"`
	Clock             *System_Clock                          `path:"clock" module:"openconfig-system"`
	Cpu               map[System_Cpu_Index_Union]*System_Cpu `path:"cpus/cpu" module:"openconfig-system/openconfig-system"`
	CurrentDatetime   *string                                `path:"state/current-datetime" module:"openconfig-system/openconfig-system"`
	Dns               *System_Dns                            `path:"dns" module:"openconfig-system"`
	DomainName        *string                                `path:"state/domain-name" module:"openconfig-system/openconfig-system" shadow-path:"config/domain-name" shadow-module:"openconfig-system/openconfig-system"`
	GnmiPathzPolicies *System_GnmiPathzPolicies              `path:"gnmi-pathz-policies" module:"gnsi-pathz"`
	GrpcCredentials   *System_GrpcCredentials                `path:"grpc-credentials" module:"gnsi-cert"`
	GrpcServer        map[string]*System_GrpcServer          `path:"grpc-servers/grpc-server" module:"openconfig-system-grpc/openconfig-system-grpc"`
	Hostname          *string                                `path:"state/hostname" module:"openconfig-system/openconfig-system" shadow-path:"config/hostname" shadow-module:"openconfig-system/openconfig-system"`
	License           *System_License                        `path:"license" module:"openconfig-system"`
	Logging           *System_Logging                        `path:"logging" module:"openconfig-system"`
	LoginBanner       *string                                `path:"state/login-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/login-banner" shadow-module:"openconfig-system/openconfig-system"`
	MacAddress        *System_MacAddress                     `path:"mac-address" module:"openconfig-system"`
	Memory            *System_Memory                         `path:"memory" module:"openconfig-system"`
	Messages          *System_Messages                       `path:"messages" module:"openconfig-system"`
	MotdBanner        *string                                `path:"state/motd-banner" module:"openconfig-system/openconfig-system" shadow-path:"config/motd-banner" shadow-module:"openconfig-system/openconfig-system"`
	MountPoint        map[string]*System_MountPoint          `path:"mount-points/mount-point" module:"openconfig-system/openconfig-system"`
	Ntp               *System_Ntp                            `path:"ntp" module:"openconfig-system"`
	Process           map[uint64]*System_Process             `path:"processes/process" module:"openconfig-system/openconfig-system"`
	SoftwareVersion   *string                                `path:"state/software-version" module:"openconfig-system/openconfig-system"`
	SshServer         *System_SshServer                      `path:"ssh-server" module:"openconfig-system"`
	TelnetServer      *System_TelnetServer                   `path:"telnet-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewAlarm(Id string) (*System_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &System_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateAlarm(Id string) *System_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetAlarm(Id string) *System_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied System_Alarm struct to the
// list Alarm of System. If the key value(s) specified in
// the supplied System_Alarm already exist in the list, an error is
// returned.
func (t *System) AppendAlarm(v *System_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewCpu creates a new entry in the Cpu list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewCpu(Index System_Cpu_Index_Union) (*System_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &System_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameCpu(oldK, newK System_Cpu_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateCpu(Index System_Cpu_Index_Union) *System_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetCpu(Index System_Cpu_Index_Union) *System_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteCpu(Index System_Cpu_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied System_Cpu struct to the
// list Cpu of System. If the key value(s) specified in
// the supplied System_Cpu already exist in the list, an error is
// returned.
func (t *System) AppendCpu(v *System_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// NewGrpcServer creates a new entry in the GrpcServer list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewGrpcServer(Name string) (*System_GrpcServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GrpcServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GrpcServer", key)
	}

	t.GrpcServer[key] = &System_GrpcServer{
		Name: &Name,
	}

	return t.GrpcServer[key], nil
}

// RenameGrpcServer renames an entry in the list GrpcServer within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameGrpcServer(oldK, newK string) error {
	if _, ok := t.GrpcServer[newK]; ok {
		return fmt.Errorf("key %v already exists in GrpcServer", newK)
	}

	e, ok := t.GrpcServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GrpcServer", oldK)
	}
	e.Name = &newK

	t.GrpcServer[newK] = e
	delete(t.GrpcServer, oldK)
	return nil
}

// GetOrCreateGrpcServer retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateGrpcServer(Name string) *System_GrpcServer {

	key := Name

	if v, ok := t.GrpcServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGrpcServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGrpcServer got unexpected error: %v", err))
	}
	return v
}

// GetGrpcServer retrieves the value with the specified key from
// the GrpcServer map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetGrpcServer(Name string) *System_GrpcServer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.GrpcServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteGrpcServer deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteGrpcServer(Name string) {
	key := Name

	delete(t.GrpcServer, key)
}

// AppendGrpcServer appends the supplied System_GrpcServer struct to the
// list GrpcServer of System. If the key value(s) specified in
// the supplied System_GrpcServer already exist in the list, an error is
// returned.
func (t *System) AppendGrpcServer(v *System_GrpcServer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	if _, ok := t.GrpcServer[key]; ok {
		return fmt.Errorf("duplicate key for list GrpcServer %v", key)
	}

	t.GrpcServer[key] = v
	return nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewMountPoint(Name string) (*System_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &System_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateMountPoint(Name string) *System_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetMountPoint(Name string) *System_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied System_MountPoint struct to the
// list MountPoint of System. If the key value(s) specified in
// the supplied System_MountPoint already exist in the list, an error is
// returned.
func (t *System) AppendMountPoint(v *System_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// NewProcess creates a new entry in the Process list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewProcess(Pid uint64) (*System_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &System_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateProcess(Pid uint64) *System_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetProcess(Pid uint64) *System_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied System_Process struct to the
// list Process of System. If the key value(s) specified in
// the supplied System_Process already exist in the list, an error is
// returned.
func (t *System) AppendProcess(v *System_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateAaa() *System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &System_Aaa{}
	return t.Aaa
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateClock() *System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &System_Clock{}
	return t.Clock
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateDns() *System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &System_Dns{}
	return t.Dns
}

// GetOrCreateGnmiPathzPolicies retrieves the value of the GnmiPathzPolicies field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateGnmiPathzPolicies() *System_GnmiPathzPolicies {
	if t.GnmiPathzPolicies != nil {
		return t.GnmiPathzPolicies
	}
	t.GnmiPathzPolicies = &System_GnmiPathzPolicies{}
	return t.GnmiPathzPolicies
}

// GetOrCreateGrpcCredentials retrieves the value of the GrpcCredentials field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateGrpcCredentials() *System_GrpcCredentials {
	if t.GrpcCredentials != nil {
		return t.GrpcCredentials
	}
	t.GrpcCredentials = &System_GrpcCredentials{}
	return t.GrpcCredentials
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLicense() *System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLogging() *System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &System_Logging{}
	return t.Logging
}

// GetOrCreateMacAddress retrieves the value of the MacAddress field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMacAddress() *System_MacAddress {
	if t.MacAddress != nil {
		return t.MacAddress
	}
	t.MacAddress = &System_MacAddress{}
	return t.MacAddress
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMemory() *System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMessages() *System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &System_Messages{}
	return t.Messages
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateNtp() *System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &System_Ntp{}
	return t.Ntp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateSshServer() *System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &System_SshServer{}
	return t.SshServer
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateTelnetServer() *System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetAaa() *System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetClock() *System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetDns() *System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetGnmiPathzPolicies returns the value of the GnmiPathzPolicies struct pointer
// from System. If the receiver or the field GnmiPathzPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetGnmiPathzPolicies() *System_GnmiPathzPolicies {
	if t != nil && t.GnmiPathzPolicies != nil {
		return t.GnmiPathzPolicies
	}
	return nil
}

// GetGrpcCredentials returns the value of the GrpcCredentials struct pointer
// from System. If the receiver or the field GrpcCredentials is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetGrpcCredentials() *System_GrpcCredentials {
	if t != nil && t.GrpcCredentials != nil {
		return t.GrpcCredentials
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLicense() *System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLogging() *System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMacAddress returns the value of the MacAddress struct pointer
// from System. If the receiver or the field MacAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMacAddress() *System_MacAddress {
	if t != nil && t.MacAddress != nil {
		return t.MacAddress
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMemory() *System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMessages() *System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetNtp() *System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetSshServer() *System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetTelnetServer() *System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// GetBootTime retrieves the value of the leaf BootTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTime is set, it can
// safely use t.GetBootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTime == nil' before retrieving the leaf's value.
func (t *System) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentDatetime is set, it can
// safely use t.GetCurrentDatetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentDatetime == nil' before retrieving the leaf's value.
func (t *System) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *System) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *System) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *System) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *System) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// SetBootTime sets the value of the leaf BootTime in the System
// struct.
func (t *System) SetBootTime(v uint64) {
	t.BootTime = &v
}

// SetCurrentDatetime sets the value of the leaf CurrentDatetime in the System
// struct.
func (t *System) SetCurrentDatetime(v string) {
	t.CurrentDatetime = &v
}

// SetDomainName sets the value of the leaf DomainName in the System
// struct.
func (t *System) SetDomainName(v string) {
	t.DomainName = &v
}

// SetHostname sets the value of the leaf Hostname in the System
// struct.
func (t *System) SetHostname(v string) {
	t.Hostname = &v
}

// SetLoginBanner sets the value of the leaf LoginBanner in the System
// struct.
func (t *System) SetLoginBanner(v string) {
	t.LoginBanner = &v
}

// SetMotdBanner sets the value of the leaf MotdBanner in the System
// struct.
func (t *System) SetMotdBanner(v string) {
	t.MotdBanner = &v
}

// SetSoftwareVersion sets the value of the leaf SoftwareVersion in the System
// struct.
func (t *System) SetSoftwareVersion(v string) {
	t.SoftwareVersion = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.Clock.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.GnmiPathzPolicies.PopulateDefaults()
	t.GrpcCredentials.PopulateDefaults()
	t.License.PopulateDefaults()
	t.Logging.PopulateDefaults()
	t.MacAddress.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Messages.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.SshServer.PopulateDefaults()
	t.TelnetServer.PopulateDefaults()
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Cpu {
		e.PopulateDefaults()
	}
	for _, e := range t.GrpcServer {
		e.PopulateDefaults()
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Process {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System.
func (*System) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type System_Aaa struct {
	Accounting     *System_Aaa_Accounting             `path:"accounting" module:"openconfig-system"`
	Authentication *System_Aaa_Authentication         `path:"authentication" module:"openconfig-system"`
	Authorization  *System_Aaa_Authorization          `path:"authorization" module:"openconfig-system"`
	ServerGroup    map[string]*System_Aaa_ServerGroup `path:"server-groups/server-group" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa) NewServerGroup(Name string) (*System_Aaa_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa) GetOrCreateServerGroup(Name string) *System_Aaa_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa) GetServerGroup(Name string) *System_Aaa_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver System_Aaa. If there is no such element, the function
// is a no-op.
func (t *System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied System_Aaa_ServerGroup struct to the
// list ServerGroup of System_Aaa. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *System_Aaa) AppendServerGroup(v *System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAccounting() *System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthentication() *System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthorization() *System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	for _, e := range t.ServerGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa.
func (*System_Aaa) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_Accounting struct {
	AccountingMethod []System_Aaa_Accounting_AccountingMethod_Union                        `path:"state/accounting-method" module:"openconfig-system/openconfig-system" shadow-path:"config/accounting-method" shadow-module:"openconfig-system/openconfig-system"`
	Event            map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting) NewEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*System_Aaa_Accounting_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting) RenameEvent(oldK, newK E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting) GetOrCreateEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting) GetEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting) DeleteEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Accounting_Event struct to the
// list Event of System_Aaa_Accounting. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting) AppendEvent(v *System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting) GetAccountingMethod() []System_Aaa_Accounting_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// SetAccountingMethod sets the value of the leaf AccountingMethod in the System_Aaa_Accounting
// struct.
func (t *System_Aaa_Accounting) SetAccountingMethod(v []System_Aaa_Accounting_AccountingMethod_Union) {
	t.AccountingMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting.
func (*System_Aaa_Accounting) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_Event struct {
	EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Record    E_Event_Record                       `path:"state/record" module:"openconfig-system/openconfig-system" shadow-path:"config/record" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetEventType() E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetRecord() E_Event_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetEventType(v E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	t.EventType = v
}

// SetRecord sets the value of the leaf Record in the System_Aaa_Accounting_Event
// struct.
func (t *System_Aaa_Accounting_Event) SetRecord(v E_Event_Record) {
	t.Record = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Event.
func (*System_Aaa_Accounting_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_Authentication struct {
	AdminUser            *System_Aaa_Authentication_AdminUser                   `path:"admin-user" module:"openconfig-system"`
	AuthenticationMethod []System_Aaa_Authentication_AuthenticationMethod_Union `path:"state/authentication-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authentication-method" shadow-module:"openconfig-system/openconfig-system"`
	User                 map[string]*System_Aaa_Authentication_User             `path:"users/user" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authentication) NewUser(Username string) (*System_Aaa_Authentication_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authentication) GetOrCreateUser(Username string) *System_Aaa_Authentication_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authentication) GetUser(Username string) *System_Aaa_Authentication_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied System_Aaa_Authentication_User struct to the
// list User of System_Aaa_Authentication. If the key value(s) specified in
// the supplied System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *System_Aaa_Authentication) AppendUser(v *System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *System_Aaa_Authentication) GetOrCreateAdminUser() *System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication) GetAuthenticationMethod() []System_Aaa_Authentication_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// SetAuthenticationMethod sets the value of the leaf AuthenticationMethod in the System_Aaa_Authentication
// struct.
func (t *System_Aaa_Authentication) SetAuthenticationMethod(v []System_Aaa_Authentication_AuthenticationMethod_Union) {
	t.AuthenticationMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdminUser.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication.
func (*System_Aaa_Authentication) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUser struct {
	AdminPassword       *string `path:"state/admin-password" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password" shadow-module:"openconfig-system/openconfig-system"`
	AdminPasswordHashed *string `path:"state/admin-password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/admin-password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	AdminUsername       *string `path:"state/admin-username" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPasswordHashed is set, it can
// safely use t.GetAdminPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminUsername is set, it can
// safely use t.GetAdminUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminUsername == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// SetAdminPassword sets the value of the leaf AdminPassword in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPassword(v string) {
	t.AdminPassword = &v
}

// SetAdminPasswordHashed sets the value of the leaf AdminPasswordHashed in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminPasswordHashed(v string) {
	t.AdminPasswordHashed = &v
}

// SetAdminUsername sets the value of the leaf AdminUsername in the System_Aaa_Authentication_AdminUser
// struct.
func (t *System_Aaa_Authentication_AdminUser) SetAdminUsername(v string) {
	t.AdminUsername = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_AdminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_AdminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_AdminUser.
func (*System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_User struct {
	AuthorizedKeysListCreatedOn  *uint64                                   `path:"state/authorized-keys-list-created-on" module:"openconfig-system/gnsi-ssh"`
	AuthorizedKeysListVersion    *string                                   `path:"state/authorized-keys-list-version" module:"openconfig-system/gnsi-ssh"`
	AuthorizedUsersListCreatedOn *uint64                                   `path:"state/authorized-users-list-created-on" module:"openconfig-system/gnsi-ssh"`
	AuthorizedUsersListVersion   *string                                   `path:"state/authorized-users-list-version" module:"openconfig-system/gnsi-ssh"`
	Password                     *string                                   `path:"state/password" module:"openconfig-system/openconfig-system"`
	PasswordCreatedOn            *uint64                                   `path:"state/password-created-on" module:"openconfig-system/gnsi-console"`
	PasswordHashed               *string                                   `path:"state/password-hashed" module:"openconfig-system/openconfig-system"`
	PasswordVersion              *string                                   `path:"state/password-version" module:"openconfig-system/gnsi-console"`
	Role                         System_Aaa_Authentication_User_Role_Union `path:"state/role" module:"openconfig-system/openconfig-system" shadow-path:"config/role" shadow-module:"openconfig-system/openconfig-system"`
	Username                     *string                                   `path:"state/username|username" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/username|username" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetAuthorizedKeysListCreatedOn retrieves the value of the leaf AuthorizedKeysListCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListCreatedOn is set, it can
// safely use t.GetAuthorizedKeysListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedKeysListCreatedOn() uint64 {
	if t == nil || t.AuthorizedKeysListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedKeysListCreatedOn
}

// GetAuthorizedKeysListVersion retrieves the value of the leaf AuthorizedKeysListVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedKeysListVersion is set, it can
// safely use t.GetAuthorizedKeysListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedKeysListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedKeysListVersion() string {
	if t == nil || t.AuthorizedKeysListVersion == nil {
		return ""
	}
	return *t.AuthorizedKeysListVersion
}

// GetAuthorizedUsersListCreatedOn retrieves the value of the leaf AuthorizedUsersListCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedUsersListCreatedOn is set, it can
// safely use t.GetAuthorizedUsersListCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedUsersListCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedUsersListCreatedOn() uint64 {
	if t == nil || t.AuthorizedUsersListCreatedOn == nil {
		return 0
	}
	return *t.AuthorizedUsersListCreatedOn
}

// GetAuthorizedUsersListVersion retrieves the value of the leaf AuthorizedUsersListVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedUsersListVersion is set, it can
// safely use t.GetAuthorizedUsersListVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedUsersListVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetAuthorizedUsersListVersion() string {
	if t == nil || t.AuthorizedUsersListVersion == nil {
		return ""
	}
	return *t.AuthorizedUsersListVersion
}

// GetPassword retrieves the value of the leaf Password from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordCreatedOn retrieves the value of the leaf PasswordCreatedOn from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordCreatedOn is set, it can
// safely use t.GetPasswordCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordCreatedOn == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordCreatedOn() uint64 {
	if t == nil || t.PasswordCreatedOn == nil {
		return 0
	}
	return *t.PasswordCreatedOn
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordHashed is set, it can
// safely use t.GetPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetPasswordVersion retrieves the value of the leaf PasswordVersion from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordVersion is set, it can
// safely use t.GetPasswordVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordVersion == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordVersion() string {
	if t == nil || t.PasswordVersion == nil {
		return ""
	}
	return *t.PasswordVersion
}

// GetRole retrieves the value of the leaf Role from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetRole() System_Aaa_Authentication_User_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetUsername retrieves the value of the leaf Username from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// SetAuthorizedKeysListCreatedOn sets the value of the leaf AuthorizedKeysListCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedKeysListCreatedOn(v uint64) {
	t.AuthorizedKeysListCreatedOn = &v
}

// SetAuthorizedKeysListVersion sets the value of the leaf AuthorizedKeysListVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedKeysListVersion(v string) {
	t.AuthorizedKeysListVersion = &v
}

// SetAuthorizedUsersListCreatedOn sets the value of the leaf AuthorizedUsersListCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedUsersListCreatedOn(v uint64) {
	t.AuthorizedUsersListCreatedOn = &v
}

// SetAuthorizedUsersListVersion sets the value of the leaf AuthorizedUsersListVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetAuthorizedUsersListVersion(v string) {
	t.AuthorizedUsersListVersion = &v
}

// SetPassword sets the value of the leaf Password in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPassword(v string) {
	t.Password = &v
}

// SetPasswordCreatedOn sets the value of the leaf PasswordCreatedOn in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordCreatedOn(v uint64) {
	t.PasswordCreatedOn = &v
}

// SetPasswordHashed sets the value of the leaf PasswordHashed in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordHashed(v string) {
	t.PasswordHashed = &v
}

// SetPasswordVersion sets the value of the leaf PasswordVersion in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetPasswordVersion(v string) {
	t.PasswordVersion = &v
}

// SetRole sets the value of the leaf Role in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetRole(v System_Aaa_Authentication_User_Role_Union) {
	t.Role = v
}

// SetUsername sets the value of the leaf Username in the System_Aaa_Authentication_User
// struct.
func (t *System_Aaa_Authentication_User) SetUsername(v string) {
	t.Username = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *System_Aaa_Authentication_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_User.
func (*System_Aaa_Authentication_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_Authorization struct {
	AuthorizationMethod []System_Aaa_Authorization_AuthorizationMethod_Union                        `path:"state/authorization-method" module:"openconfig-system/openconfig-system" shadow-path:"config/authorization-method" shadow-module:"openconfig-system/openconfig-system"`
	Event               map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authorization) NewEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*System_Aaa_Authorization_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Authorization_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authorization) RenameEvent(oldK, newK E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authorization) GetOrCreateEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authorization) GetEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authorization) DeleteEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Authorization_Event struct to the
// list Event of System_Aaa_Authorization. If the key value(s) specified in
// the supplied System_Aaa_Authorization_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Authorization) AppendEvent(v *System_Aaa_Authorization_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizationMethod is set, it can
// safely use t.GetAuthorizationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetAuthorizationMethod() []System_Aaa_Authorization_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// SetAuthorizationMethod sets the value of the leaf AuthorizationMethod in the System_Aaa_Authorization
// struct.
func (t *System_Aaa_Authorization) SetAuthorizationMethod(v []System_Aaa_Authorization_AuthorizationMethod_Union) {
	t.AuthorizationMethod = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization.
func (*System_Aaa_Authorization) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_Event struct {
	EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"state/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Authorization_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization_Event) GetEventType() E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// SetEventType sets the value of the leaf EventType in the System_Aaa_Authorization_Event
// struct.
func (t *System_Aaa_Authorization_Event) SetEventType(v E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	t.EventType = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authorization_Event struct, which is a YANG list entry.
func (t *System_Aaa_Authorization_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization_Event.
func (*System_Aaa_Authorization_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroup struct {
	Name   *string                                   `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/name|name" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Server map[string]*System_Aaa_ServerGroup_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	Type   E_AaaTypes_AAA_SERVER_TYPE                `path:"state/type" module:"openconfig-system/openconfig-system" shadow-path:"config/type" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_ServerGroup) NewServer(Address string) (*System_Aaa_ServerGroup_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_ServerGroup) GetOrCreateServer(Address string) *System_Aaa_ServerGroup_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_ServerGroup) GetServer(Address string) *System_Aaa_ServerGroup_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Aaa_ServerGroup_Server struct to the
// list Server of System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *System_Aaa_ServerGroup) AppendServer(v *System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetType() E_AaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetName(v string) {
	t.Name = &v
}

// SetType sets the value of the leaf Type in the System_Aaa_ServerGroup
// struct.
func (t *System_Aaa_ServerGroup) SetType(v E_AaaTypes_AAA_SERVER_TYPE) {
	t.Type = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup.
func (*System_Aaa_ServerGroup) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_Server struct {
	Address            *string                               `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	ConnectionAborts   *uint64                               `path:"state/connection-aborts" module:"openconfig-system/openconfig-system"`
	ConnectionCloses   *uint64                               `path:"state/connection-closes" module:"openconfig-system/openconfig-system"`
	ConnectionFailures *uint64                               `path:"state/connection-failures" module:"openconfig-system/openconfig-system"`
	ConnectionOpens    *uint64                               `path:"state/connection-opens" module:"openconfig-system/openconfig-system"`
	ConnectionTimeouts *uint64                               `path:"state/connection-timeouts" module:"openconfig-system/openconfig-system"`
	ErrorsReceived     *uint64                               `path:"state/errors-received" module:"openconfig-system/openconfig-system"`
	MessagesReceived   *uint64                               `path:"state/messages-received" module:"openconfig-system/openconfig-system"`
	MessagesSent       *uint64                               `path:"state/messages-sent" module:"openconfig-system/openconfig-system"`
	Name               *string                               `path:"state/name" module:"openconfig-system/openconfig-system" shadow-path:"config/name" shadow-module:"openconfig-system/openconfig-system"`
	Radius             *System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"openconfig-system"`
	Tacacs             *System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	Timeout            *uint16                               `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAborts is set, it can
// safely use t.GetConnectionAborts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAborts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionCloses is set, it can
// safely use t.GetConnectionCloses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionCloses == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionFailures is set, it can
// safely use t.GetConnectionFailures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionFailures == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionOpens is set, it can
// safely use t.GetConnectionOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionOpens == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeouts is set, it can
// safely use t.GetConnectionTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeouts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorsReceived is set, it can
// safely use t.GetErrorsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorsReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesReceived is set, it can
// safely use t.GetMessagesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesSent is set, it can
// safely use t.GetMessagesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesSent == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetAddress sets the value of the leaf Address in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetAddress(v string) {
	t.Address = &v
}

// SetConnectionAborts sets the value of the leaf ConnectionAborts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionAborts(v uint64) {
	t.ConnectionAborts = &v
}

// SetConnectionCloses sets the value of the leaf ConnectionCloses in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionCloses(v uint64) {
	t.ConnectionCloses = &v
}

// SetConnectionFailures sets the value of the leaf ConnectionFailures in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionFailures(v uint64) {
	t.ConnectionFailures = &v
}

// SetConnectionOpens sets the value of the leaf ConnectionOpens in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionOpens(v uint64) {
	t.ConnectionOpens = &v
}

// SetConnectionTimeouts sets the value of the leaf ConnectionTimeouts in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetConnectionTimeouts(v uint64) {
	t.ConnectionTimeouts = &v
}

// SetErrorsReceived sets the value of the leaf ErrorsReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetErrorsReceived(v uint64) {
	t.ErrorsReceived = &v
}

// SetMessagesReceived sets the value of the leaf MessagesReceived in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesReceived(v uint64) {
	t.MessagesReceived = &v
}

// SetMessagesSent sets the value of the leaf MessagesSent in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetMessagesSent(v uint64) {
	t.MessagesSent = &v
}

// SetName sets the value of the leaf Name in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetName(v string) {
	t.Name = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_Aaa_ServerGroup_Server
// struct.
func (t *System_Aaa_ServerGroup_Server) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server.
func (*System_Aaa_ServerGroup_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_Radius struct {
	AcctPort           *uint16                                        `path:"state/acct-port" module:"openconfig-system/openconfig-system" shadow-path:"config/acct-port" shadow-module:"openconfig-system/openconfig-system"`
	AuthPort           *uint16                                        `path:"state/auth-port" module:"openconfig-system/openconfig-system" shadow-path:"config/auth-port" shadow-module:"openconfig-system/openconfig-system"`
	Counters           *System_Aaa_ServerGroup_Server_Radius_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	RetransmitAttempts *uint8                                         `path:"state/retransmit-attempts" module:"openconfig-system/openconfig-system" shadow-path:"config/retransmit-attempts" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey          *string                                        `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed    *string                                        `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress      *string                                        `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server_Radius) GetOrCreateCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_ServerGroup_Server_Radius_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_ServerGroup_Server_Radius. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server_Radius) GetCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetAcctPort sets the value of the leaf AcctPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAcctPort(v uint16) {
	t.AcctPort = &v
}

// SetAuthPort sets the value of the leaf AuthPort in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetAuthPort(v uint16) {
	t.AuthPort = &v
}

// SetRetransmitAttempts sets the value of the leaf RetransmitAttempts in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetRetransmitAttempts(v uint8) {
	t.RetransmitAttempts = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Radius
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctPort == nil {
		var v uint16 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v uint16 = 1812
		t.AuthPort = &v
	}
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius.
func (*System_Aaa_ServerGroup_Server_Radius) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters struct {
	AccessAccepts         *uint64 `path:"access-accepts" module:"openconfig-system"`
	AccessRejects         *uint64 `path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests *uint64 `path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests *uint64 `path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetriedAccessRequests is set, it can
// safely use t.GetRetriedAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetriedAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAccessRequests is set, it can
// safely use t.GetTimeoutAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// SetAccessAccepts sets the value of the leaf AccessAccepts in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessAccepts(v uint64) {
	t.AccessAccepts = &v
}

// SetAccessRejects sets the value of the leaf AccessRejects in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetAccessRejects(v uint64) {
	t.AccessRejects = &v
}

// SetRetriedAccessRequests sets the value of the leaf RetriedAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetRetriedAccessRequests(v uint64) {
	t.RetriedAccessRequests = &v
}

// SetTimeoutAccessRequests sets the value of the leaf TimeoutAccessRequests in the System_Aaa_ServerGroup_Server_Radius_Counters
// struct.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) SetTimeoutAccessRequests(v uint64) {
	t.TimeoutAccessRequests = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius_Counters.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs struct {
	Port            *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey       *string `path:"state/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed *string `path:"state/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"config/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress   *string `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetPort sets the value of the leaf Port in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetPort(v uint16) {
	t.Port = &v
}

// SetSecretKey sets the value of the leaf SecretKey in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKey(v string) {
	t.SecretKey = &v
}

// SetSecretKeyHashed sets the value of the leaf SecretKeyHashed in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSecretKeyHashed(v string) {
	t.SecretKeyHashed = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Aaa_ServerGroup_Server_Tacacs
// struct.
func (t *System_Aaa_ServerGroup_Server_Tacacs) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 49
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Tacacs.
func (*System_Aaa_ServerGroup_Server_Tacacs) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_Alarm struct {
	Id          *string                                `path:"state/id|id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"id" shadow-module:"openconfig-system"`
	Resource    *string                                `path:"state/resource" module:"openconfig-system/openconfig-system"`
	Severity    E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity" module:"openconfig-system/openconfig-system"`
	Text        *string                                `path:"state/text" module:"openconfig-system/openconfig-system"`
	TimeCreated *uint64                                `path:"state/time-created" module:"openconfig-system/openconfig-system"`
	TypeId      System_Alarm_TypeId_Union              `path:"state/type-id" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Alarm) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resource is set, it can
// safely use t.GetResource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resource == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeCreated is set, it can
// safely use t.GetTimeCreated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeCreated == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeId is set, it can
// safely use t.GetTypeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeId == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTypeId() System_Alarm_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// SetId sets the value of the leaf Id in the System_Alarm
// struct.
func (t *System_Alarm) SetId(v string) {
	t.Id = &v
}

// SetResource sets the value of the leaf Resource in the System_Alarm
// struct.
func (t *System_Alarm) SetResource(v string) {
	t.Resource = &v
}

// SetSeverity sets the value of the leaf Severity in the System_Alarm
// struct.
func (t *System_Alarm) SetSeverity(v E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	t.Severity = v
}

// SetText sets the value of the leaf Text in the System_Alarm
// struct.
func (t *System_Alarm) SetText(v string) {
	t.Text = &v
}

// SetTimeCreated sets the value of the leaf TimeCreated in the System_Alarm
// struct.
func (t *System_Alarm) SetTimeCreated(v uint64) {
	t.TimeCreated = &v
}

// SetTypeId sets the value of the leaf TypeId in the System_Alarm
// struct.
func (t *System_Alarm) SetTypeId(v System_Alarm_TypeId_Union) {
	t.TypeId = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Alarm struct, which is a YANG list entry.
func (t *System_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Alarm.
func (*System_Alarm) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Clock represents the /openconfig-system/system/clock YANG schema element.
type System_Clock struct {
	TimezoneName *string `path:"state/timezone-name" module:"openconfig-system/openconfig-system" shadow-path:"config/timezone-name" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Clock) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimezoneName is set, it can
// safely use t.GetTimezoneName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimezoneName == nil' before retrieving the leaf's value.
func (t *System_Clock) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// SetTimezoneName sets the value of the leaf TimezoneName in the System_Clock
// struct.
func (t *System_Clock) SetTimezoneName(v string) {
	t.TimezoneName = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Clock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Clock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Clock.
func (*System_Clock) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_Cpu struct {
	HardwareInterrupt *System_Cpu_HardwareInterrupt `path:"state/hardware-interrupt" module:"openconfig-system/openconfig-system"`
	Idle              *System_Cpu_Idle              `path:"state/idle" module:"openconfig-system/openconfig-system"`
	Index             System_Cpu_Index_Union        `path:"state/index|index" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"index" shadow-module:"openconfig-system"`
	Kernel            *System_Cpu_Kernel            `path:"state/kernel" module:"openconfig-system/openconfig-system"`
	Nice              *System_Cpu_Nice              `path:"state/nice" module:"openconfig-system/openconfig-system"`
	SoftwareInterrupt *System_Cpu_SoftwareInterrupt `path:"state/software-interrupt" module:"openconfig-system/openconfig-system"`
	Total             *System_Cpu_Total             `path:"state/total" module:"openconfig-system/openconfig-system"`
	User              *System_Cpu_User              `path:"state/user" module:"openconfig-system/openconfig-system"`
	Wait              *System_Cpu_Wait              `path:"state/wait" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &System_Cpu_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateIdle() *System_Cpu_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &System_Cpu_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateKernel() *System_Cpu_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &System_Cpu_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateNice() *System_Cpu_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &System_Cpu_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &System_Cpu_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateTotal() *System_Cpu_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &System_Cpu_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateUser() *System_Cpu_User {
	if t.User != nil {
		return t.User
	}
	t.User = &System_Cpu_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateWait() *System_Cpu_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &System_Cpu_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from System_Cpu. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetIdle() *System_Cpu_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from System_Cpu. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetKernel() *System_Cpu_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from System_Cpu. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetNice() *System_Cpu_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from System_Cpu. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetTotal() *System_Cpu_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from System_Cpu. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetUser() *System_Cpu_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from System_Cpu. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetWait() *System_Cpu_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the System_Cpu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *System_Cpu) GetIndex() System_Cpu_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// SetIndex sets the value of the leaf Index in the System_Cpu
// struct.
func (t *System_Cpu) SetIndex(v System_Cpu_Index_Union) {
	t.Index = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HardwareInterrupt.PopulateDefaults()
	t.Idle.PopulateDefaults()
	t.Kernel.PopulateDefaults()
	t.Nice.PopulateDefaults()
	t.SoftwareInterrupt.PopulateDefaults()
	t.Total.PopulateDefaults()
	t.User.PopulateDefaults()
	t.Wait.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Cpu struct, which is a YANG list entry.
func (t *System_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu.
func (*System_Cpu) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_HardwareInterrupt
// struct.
func (t *System_Cpu_HardwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_HardwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_HardwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_HardwareInterrupt.
func (*System_Cpu_HardwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_Idle struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Idle
// struct.
func (t *System_Cpu_Idle) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Idle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Idle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Idle.
func (*System_Cpu_Idle) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_Kernel struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Kernel
// struct.
func (t *System_Cpu_Kernel) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Kernel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Kernel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Kernel.
func (*System_Cpu_Kernel) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_Nice struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Nice
// struct.
func (t *System_Cpu_Nice) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Nice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Nice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Nice.
func (*System_Cpu_Nice) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_SoftwareInterrupt
// struct.
func (t *System_Cpu_SoftwareInterrupt) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_SoftwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_SoftwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_SoftwareInterrupt.
func (*System_Cpu_SoftwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_Total struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Total
// struct.
func (t *System_Cpu_Total) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Total
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Total) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Total.
func (*System_Cpu_Total) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_User struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_User
// struct.
func (t *System_Cpu_User) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_User.
func (*System_Cpu_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_Wait struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetAvg(v uint8) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInstant(v uint8) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMax(v uint8) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMin(v uint8) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the System_Cpu_Wait
// struct.
func (t *System_Cpu_Wait) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Wait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Wait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Wait.
func (*System_Cpu_Wait) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns represents the /openconfig-system/system/dns YANG schema element.
type System_Dns struct {
	HostEntry map[string]*System_Dns_HostEntry `path:"host-entries/host-entry" module:"openconfig-system/openconfig-system"`
	Search    []string                         `path:"state/search" module:"openconfig-system/openconfig-system" shadow-path:"config/search" shadow-module:"openconfig-system/openconfig-system"`
	Server    map[string]*System_Dns_Server    `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewHostEntry(Hostname string) (*System_Dns_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &System_Dns_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateHostEntry(Hostname string) *System_Dns_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetHostEntry(Hostname string) *System_Dns_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied System_Dns_HostEntry struct to the
// list HostEntry of System_Dns. If the key value(s) specified in
// the supplied System_Dns_HostEntry already exist in the list, an error is
// returned.
func (t *System_Dns) AppendHostEntry(v *System_Dns_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewServer(Address string) (*System_Dns_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Dns_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Dns_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateServer(Address string) *System_Dns_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetServer(Address string) *System_Dns_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Dns_Server struct to the
// list Server of System_Dns. If the key value(s) specified in
// the supplied System_Dns_Server already exist in the list, an error is
// returned.
func (t *System_Dns) AppendServer(v *System_Dns_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Dns_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetSearch retrieves the value of the leaf Search from the System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Search is set, it can
// safely use t.GetSearch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Search == nil' before retrieving the leaf's value.
func (t *System_Dns) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// SetSearch sets the value of the leaf Search in the System_Dns
// struct.
func (t *System_Dns) SetSearch(v []string) {
	t.Search = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns.
func (*System_Dns) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntry struct {
	Alias       []string `path:"state/alias" module:"openconfig-system/openconfig-system" shadow-path:"config/alias" shadow-module:"openconfig-system/openconfig-system"`
	Hostname    *string  `path:"state/hostname|hostname" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/hostname|hostname" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Ipv4Address []string `path:"state/ipv4-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv4-address" shadow-module:"openconfig-system/openconfig-system"`
	Ipv6Address []string `path:"state/ipv6-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ipv6-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_HostEntry) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// SetAlias sets the value of the leaf Alias in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetAlias(v []string) {
	t.Alias = v
}

// SetHostname sets the value of the leaf Hostname in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetHostname(v string) {
	t.Hostname = &v
}

// SetIpv4Address sets the value of the leaf Ipv4Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv4Address(v []string) {
	t.Ipv4Address = v
}

// SetIpv6Address sets the value of the leaf Ipv6Address in the System_Dns_HostEntry
// struct.
func (t *System_Dns_HostEntry) SetIpv6Address(v []string) {
	t.Ipv6Address = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_HostEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_HostEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Dns_HostEntry struct, which is a YANG list entry.
func (t *System_Dns_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_HostEntry.
func (*System_Dns_HostEntry) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_Server struct {
	Address *string `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Port    *uint16 `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// SetAddress sets the value of the leaf Address in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetAddress(v string) {
	t.Address = &v
}

// SetPort sets the value of the leaf Port in the System_Dns_Server
// struct.
func (t *System_Dns_Server) SetPort(v uint16) {
	t.Port = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 53
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the System_Dns_Server struct, which is a YANG list entry.
func (t *System_Dns_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_Server.
func (*System_Dns_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_GnmiPathzPolicies represents the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPolicies struct {
	Policy map[string]*System_GnmiPathzPolicies_Policy `path:"policies/policy" module:"gnsi-pathz/gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GnmiPathzPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GnmiPathzPolicies) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// System_GnmiPathzPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *System_GnmiPathzPolicies) NewPolicy(Id string) (*System_GnmiPathzPolicies_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*System_GnmiPathzPolicies_Policy)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &System_GnmiPathzPolicies_Policy{
		Id: &Id,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the System_GnmiPathzPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GnmiPathzPolicies) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.Id = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver System_GnmiPathzPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GnmiPathzPolicies) GetOrCreatePolicy(Id string) *System_GnmiPathzPolicies_Policy {

	key := Id

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of System_GnmiPathzPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GnmiPathzPolicies) GetPolicy(Id string) *System_GnmiPathzPolicies_Policy {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver System_GnmiPathzPolicies. If there is no such element, the function
// is a no-op.
func (t *System_GnmiPathzPolicies) DeletePolicy(Id string) {
	key := Id

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied System_GnmiPathzPolicies_Policy struct to the
// list Policy of System_GnmiPathzPolicies. If the key value(s) specified in
// the supplied System_GnmiPathzPolicies_Policy already exist in the list, an error is
// returned.
func (t *System_GnmiPathzPolicies) AppendPolicy(v *System_GnmiPathzPolicies_Policy) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*System_GnmiPathzPolicies_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GnmiPathzPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GnmiPathzPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GnmiPathzPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GnmiPathzPolicies) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GnmiPathzPolicies.
func (*System_GnmiPathzPolicies) ΛBelongingModule() string {
	return "gnsi-pathz"
}

// System_GnmiPathzPolicies_Policy represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_Policy struct {
	CreatedOn *uint64 `path:"state/created-on" module:"gnsi-pathz/gnsi-pathz"`
	Id        *string `path:"state/id|id" module:"gnsi-pathz/gnsi-pathz|gnsi-pathz" shadow-path:"id" shadow-module:"gnsi-pathz"`
	Version   *string `path:"state/version" module:"gnsi-pathz/gnsi-pathz"`
}

// IsYANGGoStruct ensures that System_GnmiPathzPolicies_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GnmiPathzPolicies_Policy) IsYANGGoStruct() {}

// GetCreatedOn retrieves the value of the leaf CreatedOn from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreatedOn is set, it can
// safely use t.GetCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreatedOn == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetCreatedOn() uint64 {
	if t == nil || t.CreatedOn == nil {
		return 0
	}
	return *t.CreatedOn
}

// GetId retrieves the value of the leaf Id from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetVersion retrieves the value of the leaf Version from the System_GnmiPathzPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_GnmiPathzPolicies_Policy) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// SetCreatedOn sets the value of the leaf CreatedOn in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetCreatedOn(v uint64) {
	t.CreatedOn = &v
}

// SetId sets the value of the leaf Id in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetId(v string) {
	t.Id = &v
}

// SetVersion sets the value of the leaf Version in the System_GnmiPathzPolicies_Policy
// struct.
func (t *System_GnmiPathzPolicies_Policy) SetVersion(v string) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GnmiPathzPolicies_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GnmiPathzPolicies_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_GnmiPathzPolicies_Policy struct, which is a YANG list entry.
func (t *System_GnmiPathzPolicies_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GnmiPathzPolicies_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GnmiPathzPolicies_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GnmiPathzPolicies_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GnmiPathzPolicies_Policy.
func (*System_GnmiPathzPolicies_Policy) ΛBelongingModule() string {
	return "gnsi-pathz"
}

// System_GrpcCredentials represents the /openconfig-system/system/grpc-credentials YANG schema element.
type System_GrpcCredentials struct {
	Entity map[string]*System_GrpcCredentials_Entity `path:"entities/entity" module:"gnsi-cert/gnsi-cert"`
}

// IsYANGGoStruct ensures that System_GrpcCredentials implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcCredentials) IsYANGGoStruct() {}

// NewEntity creates a new entry in the Entity list of the
// System_GrpcCredentials struct. The keys of the list are populated from the input
// arguments.
func (t *System_GrpcCredentials) NewEntity(Id string) (*System_GrpcCredentials_Entity, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entity == nil {
		t.Entity = make(map[string]*System_GrpcCredentials_Entity)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entity", key)
	}

	t.Entity[key] = &System_GrpcCredentials_Entity{
		Id: &Id,
	}

	return t.Entity[key], nil
}

// RenameEntity renames an entry in the list Entity within
// the System_GrpcCredentials struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_GrpcCredentials) RenameEntity(oldK, newK string) error {
	if _, ok := t.Entity[newK]; ok {
		return fmt.Errorf("key %v already exists in Entity", newK)
	}

	e, ok := t.Entity[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entity", oldK)
	}
	e.Id = &newK

	t.Entity[newK] = e
	delete(t.Entity, oldK)
	return nil
}

// GetOrCreateEntity retrieves the value with the specified keys from
// the receiver System_GrpcCredentials. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_GrpcCredentials) GetOrCreateEntity(Id string) *System_GrpcCredentials_Entity {

	key := Id

	if v, ok := t.Entity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntity(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntity got unexpected error: %v", err))
	}
	return v
}

// GetEntity retrieves the value with the specified key from
// the Entity map field of System_GrpcCredentials. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_GrpcCredentials) GetEntity(Id string) *System_GrpcCredentials_Entity {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entity[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntity deletes the value with the specified keys from
// the receiver System_GrpcCredentials. If there is no such element, the function
// is a no-op.
func (t *System_GrpcCredentials) DeleteEntity(Id string) {
	key := Id

	delete(t.Entity, key)
}

// AppendEntity appends the supplied System_GrpcCredentials_Entity struct to the
// list Entity of System_GrpcCredentials. If the key value(s) specified in
// the supplied System_GrpcCredentials_Entity already exist in the list, an error is
// returned.
func (t *System_GrpcCredentials) AppendEntity(v *System_GrpcCredentials_Entity) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entity == nil {
		t.Entity = make(map[string]*System_GrpcCredentials_Entity)
	}

	if _, ok := t.Entity[key]; ok {
		return fmt.Errorf("duplicate key for list Entity %v", key)
	}

	t.Entity[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcCredentials
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcCredentials) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entity {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcCredentials) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcCredentials"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcCredentials) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcCredentials) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GrpcCredentials.
func (*System_GrpcCredentials) ΛBelongingModule() string {
	return "gnsi-cert"
}

// System_GrpcCredentials_Entity represents the /openconfig-system/system/grpc-credentials/entities/entity YANG schema element.
type System_GrpcCredentials_Entity struct {
	CreatedOn *uint64                             `path:"state/created-on" module:"gnsi-cert/gnsi-cert"`
	Id        *string                             `path:"state/id|id" module:"gnsi-cert/gnsi-cert|gnsi-cert" shadow-path:"id" shadow-module:"gnsi-cert"`
	Kind      E_GnsiCert_GrpcCredentialEntityKind `path:"state/kind" module:"gnsi-cert/gnsi-cert"`
	Version   *string                             `path:"state/version" module:"gnsi-cert/gnsi-cert"`
}

// IsYANGGoStruct ensures that System_GrpcCredentials_Entity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcCredentials_Entity) IsYANGGoStruct() {}

// GetCreatedOn retrieves the value of the leaf CreatedOn from the System_GrpcCredentials_Entity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreatedOn is set, it can
// safely use t.GetCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcCredentials_Entity) GetCreatedOn() uint64 {
	if t == nil || t.CreatedOn == nil {
		return 0
	}
	return *t.CreatedOn
}

// GetId retrieves the value of the leaf Id from the System_GrpcCredentials_Entity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_GrpcCredentials_Entity) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetKind retrieves the value of the leaf Kind from the System_GrpcCredentials_Entity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Kind is set, it can
// safely use t.GetKind() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Kind == nil' before retrieving the leaf's value.
func (t *System_GrpcCredentials_Entity) GetKind() E_GnsiCert_GrpcCredentialEntityKind {
	if t == nil || t.Kind == 0 {
		return 0
	}
	return t.Kind
}

// GetVersion retrieves the value of the leaf Version from the System_GrpcCredentials_Entity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_GrpcCredentials_Entity) GetVersion() string {
	if t == nil || t.Version == nil {
		return ""
	}
	return *t.Version
}

// SetCreatedOn sets the value of the leaf CreatedOn in the System_GrpcCredentials_Entity
// struct.
func (t *System_GrpcCredentials_Entity) SetCreatedOn(v uint64) {
	t.CreatedOn = &v
}

// SetId sets the value of the leaf Id in the System_GrpcCredentials_Entity
// struct.
func (t *System_GrpcCredentials_Entity) SetId(v string) {
	t.Id = &v
}

// SetKind sets the value of the leaf Kind in the System_GrpcCredentials_Entity
// struct.
func (t *System_GrpcCredentials_Entity) SetKind(v E_GnsiCert_GrpcCredentialEntityKind) {
	t.Kind = v
}

// SetVersion sets the value of the leaf Version in the System_GrpcCredentials_Entity
// struct.
func (t *System_GrpcCredentials_Entity) SetVersion(v string) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcCredentials_Entity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcCredentials_Entity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_GrpcCredentials_Entity struct, which is a YANG list entry.
func (t *System_GrpcCredentials_Entity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcCredentials_Entity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcCredentials_Entity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcCredentials_Entity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcCredentials_Entity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GrpcCredentials_Entity.
func (*System_GrpcCredentials_Entity) ΛBelongingModule() string {
	return "gnsi-cert"
}

// System_GrpcServer represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServer struct {
	AuthzPolicyCreatedOn                     *uint64                                   `path:"state/authz-policy-created-on" module:"openconfig-system-grpc/gnsi-authz"`
	AuthzPolicyVersion                       *string                                   `path:"state/authz-policy-version" module:"openconfig-system-grpc/gnsi-authz"`
	CaTrustBundleCreatedOn                   *uint64                                   `path:"state/ca-trust-bundle-created-on" module:"openconfig-system-grpc/gnsi-cert"`
	CaTrustBundleId                          *string                                   `path:"state/ca-trust-bundle-id" module:"openconfig-system-grpc/gnsi-cert" shadow-path:"config/ca-trust-bundle-id" shadow-module:"openconfig-system-grpc/gnsi-cert"`
	CaTrustBundleVersion                     *string                                   `path:"state/ca-trust-bundle-version" module:"openconfig-system-grpc/gnsi-cert"`
	CertificateCreatedOn                     *uint64                                   `path:"state/certificate-created-on" module:"openconfig-system-grpc/gnsi-cert"`
	CertificateId                            *string                                   `path:"state/certificate-id" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/certificate-id" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	CertificateRevocationListBundleCreatedOn *uint64                                   `path:"state/certificate-revocation-list-bundle-created-on" module:"openconfig-system-grpc/gnsi-cert"`
	CertificateRevocationListBundleId        *string                                   `path:"state/certificate-revocation-list-bundle-id" module:"openconfig-system-grpc/gnsi-cert" shadow-path:"config/certificate-revocation-list-bundle-id" shadow-module:"openconfig-system-grpc/gnsi-cert"`
	CertificateRevocationListBundleVersion   *string                                   `path:"state/certificate-revocation-list-bundle-version" module:"openconfig-system-grpc/gnsi-cert"`
	CertificateVersion                       *string                                   `path:"state/certificate-version" module:"openconfig-system-grpc/gnsi-cert"`
	Enable                                   *bool                                     `path:"state/enable" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/enable" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	GnmiPathzPolicyCreatedOn                 *uint64                                   `path:"state/gnmi-pathz-policy-created-on" module:"openconfig-system-grpc/gnsi-pathz"`
	GnmiPathzPolicyId                        *string                                   `path:"state/gnmi-pathz-policy-id" module:"openconfig-system-grpc/gnsi-pathz" shadow-path:"config/gnmi-pathz-policy-id" shadow-module:"openconfig-system-grpc/gnsi-pathz"`
	GnmiPathzPolicyVersion                   *string                                   `path:"state/gnmi-pathz-policy-version" module:"openconfig-system-grpc/gnsi-pathz"`
	ListenAddresses                          []System_GrpcServer_ListenAddresses_Union `path:"state/listen-addresses" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/listen-addresses" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	MetadataAuthentication                   *bool                                     `path:"state/metadata-authentication" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/metadata-authentication" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Name                                     *string                                   `path:"state/name|name" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc" shadow-path:"config/name|name" shadow-module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc"`
	NetworkInstance                          *string                                   `path:"state/network-instance" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/network-instance" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Port                                     *uint16                                   `path:"state/port" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/port" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Services                                 []E_SystemGrpc_GRPC_SERVICE               `path:"state/services" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/services" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	TransportSecurity                        *bool                                     `path:"state/transport-security" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"config/transport-security" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
}

// IsYANGGoStruct ensures that System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer) IsYANGGoStruct() {}

// GetAuthzPolicyCreatedOn retrieves the value of the leaf AuthzPolicyCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthzPolicyCreatedOn is set, it can
// safely use t.GetAuthzPolicyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthzPolicyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetAuthzPolicyCreatedOn() uint64 {
	if t == nil || t.AuthzPolicyCreatedOn == nil {
		return 0
	}
	return *t.AuthzPolicyCreatedOn
}

// GetAuthzPolicyVersion retrieves the value of the leaf AuthzPolicyVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthzPolicyVersion is set, it can
// safely use t.GetAuthzPolicyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthzPolicyVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetAuthzPolicyVersion() string {
	if t == nil || t.AuthzPolicyVersion == nil {
		return ""
	}
	return *t.AuthzPolicyVersion
}

// GetCaTrustBundleCreatedOn retrieves the value of the leaf CaTrustBundleCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaTrustBundleCreatedOn is set, it can
// safely use t.GetCaTrustBundleCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaTrustBundleCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCaTrustBundleCreatedOn() uint64 {
	if t == nil || t.CaTrustBundleCreatedOn == nil {
		return 0
	}
	return *t.CaTrustBundleCreatedOn
}

// GetCaTrustBundleId retrieves the value of the leaf CaTrustBundleId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaTrustBundleId is set, it can
// safely use t.GetCaTrustBundleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaTrustBundleId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCaTrustBundleId() string {
	if t == nil || t.CaTrustBundleId == nil {
		return ""
	}
	return *t.CaTrustBundleId
}

// GetCaTrustBundleVersion retrieves the value of the leaf CaTrustBundleVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaTrustBundleVersion is set, it can
// safely use t.GetCaTrustBundleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaTrustBundleVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCaTrustBundleVersion() string {
	if t == nil || t.CaTrustBundleVersion == nil {
		return ""
	}
	return *t.CaTrustBundleVersion
}

// GetCertificateCreatedOn retrieves the value of the leaf CertificateCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateCreatedOn is set, it can
// safely use t.GetCertificateCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateCreatedOn() uint64 {
	if t == nil || t.CertificateCreatedOn == nil {
		return 0
	}
	return *t.CertificateCreatedOn
}

// GetCertificateId retrieves the value of the leaf CertificateId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateId is set, it can
// safely use t.GetCertificateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetCertificateRevocationListBundleCreatedOn retrieves the value of the leaf CertificateRevocationListBundleCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateRevocationListBundleCreatedOn is set, it can
// safely use t.GetCertificateRevocationListBundleCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateRevocationListBundleCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateRevocationListBundleCreatedOn() uint64 {
	if t == nil || t.CertificateRevocationListBundleCreatedOn == nil {
		return 0
	}
	return *t.CertificateRevocationListBundleCreatedOn
}

// GetCertificateRevocationListBundleId retrieves the value of the leaf CertificateRevocationListBundleId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateRevocationListBundleId is set, it can
// safely use t.GetCertificateRevocationListBundleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateRevocationListBundleId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateRevocationListBundleId() string {
	if t == nil || t.CertificateRevocationListBundleId == nil {
		return ""
	}
	return *t.CertificateRevocationListBundleId
}

// GetCertificateRevocationListBundleVersion retrieves the value of the leaf CertificateRevocationListBundleVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateRevocationListBundleVersion is set, it can
// safely use t.GetCertificateRevocationListBundleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateRevocationListBundleVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateRevocationListBundleVersion() string {
	if t == nil || t.CertificateRevocationListBundleVersion == nil {
		return ""
	}
	return *t.CertificateRevocationListBundleVersion
}

// GetCertificateVersion retrieves the value of the leaf CertificateVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateVersion is set, it can
// safely use t.GetCertificateVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateVersion() string {
	if t == nil || t.CertificateVersion == nil {
		return ""
	}
	return *t.CertificateVersion
}

// GetEnable retrieves the value of the leaf Enable from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetGnmiPathzPolicyCreatedOn retrieves the value of the leaf GnmiPathzPolicyCreatedOn from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiPathzPolicyCreatedOn is set, it can
// safely use t.GetGnmiPathzPolicyCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiPathzPolicyCreatedOn == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetGnmiPathzPolicyCreatedOn() uint64 {
	if t == nil || t.GnmiPathzPolicyCreatedOn == nil {
		return 0
	}
	return *t.GnmiPathzPolicyCreatedOn
}

// GetGnmiPathzPolicyId retrieves the value of the leaf GnmiPathzPolicyId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiPathzPolicyId is set, it can
// safely use t.GetGnmiPathzPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiPathzPolicyId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetGnmiPathzPolicyId() string {
	if t == nil || t.GnmiPathzPolicyId == nil {
		return ""
	}
	return *t.GnmiPathzPolicyId
}

// GetGnmiPathzPolicyVersion retrieves the value of the leaf GnmiPathzPolicyVersion from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiPathzPolicyVersion is set, it can
// safely use t.GetGnmiPathzPolicyVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiPathzPolicyVersion == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetGnmiPathzPolicyVersion() string {
	if t == nil || t.GnmiPathzPolicyVersion == nil {
		return ""
	}
	return *t.GnmiPathzPolicyVersion
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListenAddresses is set, it can
// safely use t.GetListenAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListenAddresses == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetListenAddresses() []System_GrpcServer_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetMetadataAuthentication retrieves the value of the leaf MetadataAuthentication from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetadataAuthentication is set, it can
// safely use t.GetMetadataAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetadataAuthentication == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetMetadataAuthentication() bool {
	if t == nil || t.MetadataAuthentication == nil {
		return false
	}
	return *t.MetadataAuthentication
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetName() string {
	if t == nil || t.Name == nil {
		return "DEFAULT"
	}
	return *t.Name
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPort retrieves the value of the leaf Port from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetServices retrieves the value of the leaf Services from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Services is set, it can
// safely use t.GetServices() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Services == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetServices() []E_SystemGrpc_GRPC_SERVICE {
	if t == nil || t.Services == nil {
		return nil
	}
	return t.Services
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return true
	}
	return *t.TransportSecurity
}

// SetAuthzPolicyCreatedOn sets the value of the leaf AuthzPolicyCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetAuthzPolicyCreatedOn(v uint64) {
	t.AuthzPolicyCreatedOn = &v
}

// SetAuthzPolicyVersion sets the value of the leaf AuthzPolicyVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetAuthzPolicyVersion(v string) {
	t.AuthzPolicyVersion = &v
}

// SetCaTrustBundleCreatedOn sets the value of the leaf CaTrustBundleCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCaTrustBundleCreatedOn(v uint64) {
	t.CaTrustBundleCreatedOn = &v
}

// SetCaTrustBundleId sets the value of the leaf CaTrustBundleId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCaTrustBundleId(v string) {
	t.CaTrustBundleId = &v
}

// SetCaTrustBundleVersion sets the value of the leaf CaTrustBundleVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCaTrustBundleVersion(v string) {
	t.CaTrustBundleVersion = &v
}

// SetCertificateCreatedOn sets the value of the leaf CertificateCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateCreatedOn(v uint64) {
	t.CertificateCreatedOn = &v
}

// SetCertificateId sets the value of the leaf CertificateId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateId(v string) {
	t.CertificateId = &v
}

// SetCertificateRevocationListBundleCreatedOn sets the value of the leaf CertificateRevocationListBundleCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateRevocationListBundleCreatedOn(v uint64) {
	t.CertificateRevocationListBundleCreatedOn = &v
}

// SetCertificateRevocationListBundleId sets the value of the leaf CertificateRevocationListBundleId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateRevocationListBundleId(v string) {
	t.CertificateRevocationListBundleId = &v
}

// SetCertificateRevocationListBundleVersion sets the value of the leaf CertificateRevocationListBundleVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateRevocationListBundleVersion(v string) {
	t.CertificateRevocationListBundleVersion = &v
}

// SetCertificateVersion sets the value of the leaf CertificateVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetCertificateVersion(v string) {
	t.CertificateVersion = &v
}

// SetEnable sets the value of the leaf Enable in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetGnmiPathzPolicyCreatedOn sets the value of the leaf GnmiPathzPolicyCreatedOn in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetGnmiPathzPolicyCreatedOn(v uint64) {
	t.GnmiPathzPolicyCreatedOn = &v
}

// SetGnmiPathzPolicyId sets the value of the leaf GnmiPathzPolicyId in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetGnmiPathzPolicyId(v string) {
	t.GnmiPathzPolicyId = &v
}

// SetGnmiPathzPolicyVersion sets the value of the leaf GnmiPathzPolicyVersion in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetGnmiPathzPolicyVersion(v string) {
	t.GnmiPathzPolicyVersion = &v
}

// SetListenAddresses sets the value of the leaf ListenAddresses in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetListenAddresses(v []System_GrpcServer_ListenAddresses_Union) {
	t.ListenAddresses = v
}

// SetMetadataAuthentication sets the value of the leaf MetadataAuthentication in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetMetadataAuthentication(v bool) {
	t.MetadataAuthentication = &v
}

// SetName sets the value of the leaf Name in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetName(v string) {
	t.Name = &v
}

// SetNetworkInstance sets the value of the leaf NetworkInstance in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetNetworkInstance(v string) {
	t.NetworkInstance = &v
}

// SetPort sets the value of the leaf Port in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetPort(v uint16) {
	t.Port = &v
}

// SetServices sets the value of the leaf Services in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetServices(v []E_SystemGrpc_GRPC_SERVICE) {
	t.Services = v
}

// SetTransportSecurity sets the value of the leaf TransportSecurity in the System_GrpcServer
// struct.
func (t *System_GrpcServer) SetTransportSecurity(v bool) {
	t.TransportSecurity = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "DEFAULT"
		t.Name = &v
	}
	if t.TransportSecurity == nil {
		var v bool = true
		t.TransportSecurity = &v
	}
}

// ΛListKeyMap returns the keys of the System_GrpcServer struct, which is a YANG list entry.
func (t *System_GrpcServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer.
func (*System_GrpcServer) ΛBelongingModule() string {
	return "openconfig-system-grpc"
}

// System_License represents the /openconfig-system/system/license YANG schema element.
type System_License struct {
	License map[string]*System_License_License `path:"licenses/license" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// System_License struct. The keys of the list are populated from the input
// arguments.
func (t *System_License) NewLicense(LicenseId string) (*System_License_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &System_License_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the System_License struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_License) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver System_License. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_License) GetOrCreateLicense(LicenseId string) *System_License_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of System_License. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_License) GetLicense(LicenseId string) *System_License_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver System_License. If there is no such element, the function
// is a no-op.
func (t *System_License) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied System_License_License struct to the
// list License of System_License. If the key value(s) specified in
// the supplied System_License_License already exist in the list, an error is
// returned.
func (t *System_License) AppendLicense(v *System_License_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.License {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License.
func (*System_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_License_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_License struct {
	Active         *bool                                    `path:"state/active" module:"openconfig-system/openconfig-system" shadow-path:"config/active" shadow-module:"openconfig-system/openconfig-system"`
	Description    *string                                  `path:"state/description" module:"openconfig-system/openconfig-system"`
	ExpirationDate *uint64                                  `path:"state/expiration-date" module:"openconfig-system/openconfig-system"`
	Expired        *bool                                    `path:"state/expired" module:"openconfig-system/openconfig-system"`
	InUse          *bool                                    `path:"state/in-use" module:"openconfig-system/openconfig-system"`
	IssueDate      *uint64                                  `path:"state/issue-date" module:"openconfig-system/openconfig-system"`
	LicenseData    System_License_License_LicenseData_Union `path:"state/license-data" module:"openconfig-system/openconfig-system" shadow-path:"config/license-data" shadow-module:"openconfig-system/openconfig-system"`
	LicenseId      *string                                  `path:"state/license-id|license-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/license-id|license-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Valid          *bool                                    `path:"state/valid" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License_License) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *System_License_License) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetDescription retrieves the value of the leaf Description from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *System_License_License) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExpirationDate retrieves the value of the leaf ExpirationDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpirationDate is set, it can
// safely use t.GetExpirationDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpirationDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpirationDate() uint64 {
	if t == nil || t.ExpirationDate == nil {
		return 0
	}
	return *t.ExpirationDate
}

// GetExpired retrieves the value of the leaf Expired from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expired is set, it can
// safely use t.GetExpired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expired == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpired() bool {
	if t == nil || t.Expired == nil {
		return false
	}
	return *t.Expired
}

// GetInUse retrieves the value of the leaf InUse from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUse is set, it can
// safely use t.GetInUse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUse == nil' before retrieving the leaf's value.
func (t *System_License_License) GetInUse() bool {
	if t == nil || t.InUse == nil {
		return false
	}
	return *t.InUse
}

// GetIssueDate retrieves the value of the leaf IssueDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IssueDate is set, it can
// safely use t.GetIssueDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IssueDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetIssueDate() uint64 {
	if t == nil || t.IssueDate == nil {
		return 0
	}
	return *t.IssueDate
}

// GetLicenseData retrieves the value of the leaf LicenseData from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseData is set, it can
// safely use t.GetLicenseData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseData == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseData() System_License_License_LicenseData_Union {
	if t == nil || t.LicenseData == nil {
		return nil
	}
	return t.LicenseData
}

// GetLicenseId retrieves the value of the leaf LicenseId from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseId is set, it can
// safely use t.GetLicenseId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseId == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseId() string {
	if t == nil || t.LicenseId == nil {
		return ""
	}
	return *t.LicenseId
}

// GetValid retrieves the value of the leaf Valid from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *System_License_License) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// SetActive sets the value of the leaf Active in the System_License_License
// struct.
func (t *System_License_License) SetActive(v bool) {
	t.Active = &v
}

// SetDescription sets the value of the leaf Description in the System_License_License
// struct.
func (t *System_License_License) SetDescription(v string) {
	t.Description = &v
}

// SetExpirationDate sets the value of the leaf ExpirationDate in the System_License_License
// struct.
func (t *System_License_License) SetExpirationDate(v uint64) {
	t.ExpirationDate = &v
}

// SetExpired sets the value of the leaf Expired in the System_License_License
// struct.
func (t *System_License_License) SetExpired(v bool) {
	t.Expired = &v
}

// SetInUse sets the value of the leaf InUse in the System_License_License
// struct.
func (t *System_License_License) SetInUse(v bool) {
	t.InUse = &v
}

// SetIssueDate sets the value of the leaf IssueDate in the System_License_License
// struct.
func (t *System_License_License) SetIssueDate(v uint64) {
	t.IssueDate = &v
}

// SetLicenseData sets the value of the leaf LicenseData in the System_License_License
// struct.
func (t *System_License_License) SetLicenseData(v System_License_License_LicenseData_Union) {
	t.LicenseData = v
}

// SetLicenseId sets the value of the leaf LicenseId in the System_License_License
// struct.
func (t *System_License_License) SetLicenseId(v string) {
	t.LicenseId = &v
}

// SetValid sets the value of the leaf Valid in the System_License_License
// struct.
func (t *System_License_License) SetValid(v bool) {
	t.Valid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_License_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
}

// ΛListKeyMap returns the keys of the System_License_License struct, which is a YANG list entry.
func (t *System_License_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License_License.
func (*System_License_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging represents the /openconfig-system/system/logging YANG schema element.
type System_Logging struct {
	Console      *System_Logging_Console                 `path:"console" module:"openconfig-system"`
	RemoteServer map[string]*System_Logging_RemoteServer `path:"remote-servers/remote-server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewRemoteServer(Host string) (*System_Logging_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &System_Logging_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateRemoteServer(Host string) *System_Logging_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetRemoteServer(Host string) *System_Logging_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied System_Logging_RemoteServer struct to the
// list RemoteServer of System_Logging. If the key value(s) specified in
// the supplied System_Logging_RemoteServer already exist in the list, an error is
// returned.
func (t *System_Logging) AppendRemoteServer(v *System_Logging_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateConsole() *System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Logging_Console{}
	return t.Console
}

// GetConsole returns the value of the Console struct pointer
// from System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetConsole() *System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Console.PopulateDefaults()
	for _, e := range t.RemoteServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging.
func (*System_Logging) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_Console struct {
	Selector map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console) IsYANGGoStruct() {}

// System_Logging_Console_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console.
type System_Logging_Console_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Console struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Console) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Console_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Console_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Console struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Console) RenameSelector(oldK, newK System_Logging_Console_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Console. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Console) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Console. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Console) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Console. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Console) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Console_Selector struct to the
// list Selector of System_Logging_Console. If the key value(s) specified in
// the supplied System_Logging_Console_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Console) AppendSelector(v *System_Logging_Console_Selector) error {
	key := System_Logging_Console_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console.
func (*System_Logging_Console) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_Console_Selector
// struct.
func (t *System_Logging_Console_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_Console_Selector struct, which is a YANG list entry.
func (t *System_Logging_Console_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console_Selector.
func (*System_Logging_Console_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServer struct {
	Host          *string                                                                            `path:"state/host|host" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/host|host" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	RemotePort    *uint16                                                                            `path:"state/remote-port" module:"openconfig-system/openconfig-system" shadow-path:"config/remote-port" shadow-module:"openconfig-system/openconfig-system"`
	Selector      map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	SourceAddress *string                                                                            `path:"state/source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer) IsYANGGoStruct() {}

// System_Logging_RemoteServer_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server.
type System_Logging_RemoteServer_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_RemoteServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_RemoteServer) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_RemoteServer_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_RemoteServer_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_RemoteServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_RemoteServer) RenameSelector(oldK, newK System_Logging_RemoteServer_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_RemoteServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_RemoteServer) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_RemoteServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_RemoteServer) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_RemoteServer. If there is no such element, the function
// is a no-op.
func (t *System_Logging_RemoteServer) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_RemoteServer_Selector struct to the
// list Selector of System_Logging_RemoteServer. If the key value(s) specified in
// the supplied System_Logging_RemoteServer_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_RemoteServer) AppendSelector(v *System_Logging_RemoteServer_Selector) error {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetHost retrieves the value of the leaf Host from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Host is set, it can
// safely use t.GetHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Host == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePort is set, it can
// safely use t.GetRemotePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePort == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// SetHost sets the value of the leaf Host in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetHost(v string) {
	t.Host = &v
}

// SetRemotePort sets the value of the leaf RemotePort in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetRemotePort(v uint16) {
	t.RemotePort = &v
}

// SetSourceAddress sets the value of the leaf SourceAddress in the System_Logging_RemoteServer
// struct.
func (t *System_Logging_RemoteServer) SetSourceAddress(v string) {
	t.SourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemotePort == nil {
		var v uint16 = 514
		t.RemotePort = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer.
func (*System_Logging_RemoteServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"state/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"state/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetFacility sets the value of the leaf Facility in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetFacility(v E_SystemLogging_SYSLOG_FACILITY) {
	t.Facility = v
}

// SetSeverity sets the value of the leaf Severity in the System_Logging_RemoteServer_Selector
// struct.
func (t *System_Logging_RemoteServer_Selector) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer_Selector struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer_Selector.
func (*System_Logging_RemoteServer_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MacAddress represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddress struct {
	RoutingMac *string `path:"state/routing-mac" module:"openconfig-system/openconfig-system" shadow-path:"config/routing-mac" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MacAddress) IsYANGGoStruct() {}

// GetRoutingMac retrieves the value of the leaf RoutingMac from the System_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutingMac is set, it can
// safely use t.GetRoutingMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutingMac == nil' before retrieving the leaf's value.
func (t *System_MacAddress) GetRoutingMac() string {
	if t == nil || t.RoutingMac == nil {
		return ""
	}
	return *t.RoutingMac
}

// SetRoutingMac sets the value of the leaf RoutingMac in the System_MacAddress
// struct.
func (t *System_MacAddress) SetRoutingMac(v string) {
	t.RoutingMac = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MacAddress.
func (*System_MacAddress) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory represents the /openconfig-system/system/memory YANG schema element.
type System_Memory struct {
	Counters *System_Memory_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	Free     *uint64                 `path:"state/free" module:"openconfig-system/openconfig-system"`
	Physical *uint64                 `path:"state/physical" module:"openconfig-system/openconfig-system"`
	Reserved *uint64                 `path:"state/reserved" module:"openconfig-system/openconfig-system"`
	Used     *uint64                 `path:"state/used" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Memory) GetOrCreateCounters() *System_Memory_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Memory_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Memory. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Memory) GetCounters() *System_Memory_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetFree retrieves the value of the leaf Free from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *System_Memory) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetPhysical retrieves the value of the leaf Physical from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Physical is set, it can
// safely use t.GetPhysical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Physical == nil' before retrieving the leaf's value.
func (t *System_Memory) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *System_Memory) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUsed retrieves the value of the leaf Used from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *System_Memory) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// SetFree sets the value of the leaf Free in the System_Memory
// struct.
func (t *System_Memory) SetFree(v uint64) {
	t.Free = &v
}

// SetPhysical sets the value of the leaf Physical in the System_Memory
// struct.
func (t *System_Memory) SetPhysical(v uint64) {
	t.Physical = &v
}

// SetReserved sets the value of the leaf Reserved in the System_Memory
// struct.
func (t *System_Memory) SetReserved(v uint64) {
	t.Reserved = &v
}

// SetUsed sets the value of the leaf Used in the System_Memory
// struct.
func (t *System_Memory) SetUsed(v uint64) {
	t.Used = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory.
func (*System_Memory) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_Counters struct {
	CorrectableEccErrors   *uint64 `path:"correctable-ecc-errors" module:"openconfig-system"`
	TotalEccErrors         *uint64 `path:"total-ecc-errors" module:"openconfig-system"`
	UncorrectableEccErrors *uint64 `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory_Counters) IsYANGGoStruct() {}

// GetCorrectableEccErrors retrieves the value of the leaf CorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectableEccErrors is set, it can
// safely use t.GetCorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetCorrectableEccErrors() uint64 {
	if t == nil || t.CorrectableEccErrors == nil {
		return 0
	}
	return *t.CorrectableEccErrors
}

// GetTotalEccErrors retrieves the value of the leaf TotalEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalEccErrors is set, it can
// safely use t.GetTotalEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetTotalEccErrors() uint64 {
	if t == nil || t.TotalEccErrors == nil {
		return 0
	}
	return *t.TotalEccErrors
}

// GetUncorrectableEccErrors retrieves the value of the leaf UncorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectableEccErrors is set, it can
// safely use t.GetUncorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetUncorrectableEccErrors() uint64 {
	if t == nil || t.UncorrectableEccErrors == nil {
		return 0
	}
	return *t.UncorrectableEccErrors
}

// SetCorrectableEccErrors sets the value of the leaf CorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetCorrectableEccErrors(v uint64) {
	t.CorrectableEccErrors = &v
}

// SetTotalEccErrors sets the value of the leaf TotalEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetTotalEccErrors(v uint64) {
	t.TotalEccErrors = &v
}

// SetUncorrectableEccErrors sets the value of the leaf UncorrectableEccErrors in the System_Memory_Counters
// struct.
func (t *System_Memory_Counters) SetUncorrectableEccErrors(v uint64) {
	t.UncorrectableEccErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory_Counters.
func (*System_Memory_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages represents the /openconfig-system/system/messages YANG schema element.
type System_Messages struct {
	DebugService map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService `path:"debug-entries/debug-service" module:"openconfig-system/openconfig-system"`
	Message      *System_Messages_Message                                   `path:"state/message" module:"openconfig-system/openconfig-system"`
	Severity     E_SystemLogging_SyslogSeverity                             `path:"state/severity" module:"openconfig-system/openconfig-system" shadow-path:"config/severity" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// System_Messages struct. The keys of the list are populated from the input
// arguments.
func (t *System_Messages) NewDebugService(Service E_Messages_DEBUG_SERVICE) (*System_Messages_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &System_Messages_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the System_Messages struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Messages) RenameDebugService(oldK, newK E_Messages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver System_Messages. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Messages) GetOrCreateDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of System_Messages. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Messages) GetDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver System_Messages. If there is no such element, the function
// is a no-op.
func (t *System_Messages) DeleteDebugService(Service E_Messages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied System_Messages_DebugService struct to the
// list DebugService of System_Messages. If the key value(s) specified in
// the supplied System_Messages_DebugService already exist in the list, an error is
// returned.
func (t *System_Messages) AppendDebugService(v *System_Messages_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *System_Messages) GetOrCreateMessage() *System_Messages_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &System_Messages_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from System_Messages. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Messages) GetMessage() *System_Messages_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity retrieves the value of the leaf Severity from the System_Messages
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Messages) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// SetSeverity sets the value of the leaf Severity in the System_Messages
// struct.
func (t *System_Messages) SetSeverity(v E_SystemLogging_SyslogSeverity) {
	t.Severity = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Message.PopulateDefaults()
	for _, e := range t.DebugService {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages.
func (*System_Messages) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugService struct {
	Enabled *bool                    `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	Service E_Messages_DEBUG_SERVICE `path:"state/service|service" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/service|service" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_DebugService) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetService retrieves the value of the leaf Service from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetService() E_Messages_DEBUG_SERVICE {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// SetEnabled sets the value of the leaf Enabled in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetService sets the value of the leaf Service in the System_Messages_DebugService
// struct.
func (t *System_Messages_DebugService) SetService(v E_Messages_DEBUG_SERVICE) {
	t.Service = v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_DebugService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_DebugService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// ΛListKeyMap returns the keys of the System_Messages_DebugService struct, which is a YANG list entry.
func (t *System_Messages_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_DebugService.
func (*System_Messages_DebugService) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_Message struct {
	AppName  *string `path:"app-name" module:"openconfig-system"`
	Msg      *string `path:"msg" module:"openconfig-system"`
	Msgid    *string `path:"msgid" module:"openconfig-system"`
	Priority *uint8  `path:"priority" module:"openconfig-system"`
	Procid   *string `path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_Message) IsYANGGoStruct() {}

// GetAppName retrieves the value of the leaf AppName from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppName is set, it can
// safely use t.GetAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppName == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetAppName() string {
	if t == nil || t.AppName == nil {
		return ""
	}
	return *t.AppName
}

// GetMsg retrieves the value of the leaf Msg from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msg is set, it can
// safely use t.GetMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msg == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsg() string {
	if t == nil || t.Msg == nil {
		return ""
	}
	return *t.Msg
}

// GetMsgid retrieves the value of the leaf Msgid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msgid is set, it can
// safely use t.GetMsgid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msgid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsgid() string {
	if t == nil || t.Msgid == nil {
		return ""
	}
	return *t.Msgid
}

// GetPriority retrieves the value of the leaf Priority from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetProcid retrieves the value of the leaf Procid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Procid is set, it can
// safely use t.GetProcid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Procid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetProcid() string {
	if t == nil || t.Procid == nil {
		return ""
	}
	return *t.Procid
}

// SetAppName sets the value of the leaf AppName in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetAppName(v string) {
	t.AppName = &v
}

// SetMsg sets the value of the leaf Msg in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsg(v string) {
	t.Msg = &v
}

// SetMsgid sets the value of the leaf Msgid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetMsgid(v string) {
	t.Msgid = &v
}

// SetPriority sets the value of the leaf Priority in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetPriority(v uint8) {
	t.Priority = &v
}

// SetProcid sets the value of the leaf Procid in the System_Messages_Message
// struct.
func (t *System_Messages_Message) SetProcid(v string) {
	t.Procid = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_Message.
func (*System_Messages_Message) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPoint struct {
	Available        *uint64 `path:"state/available" module:"openconfig-system/openconfig-system"`
	Name             *string `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"name" shadow-module:"openconfig-system"`
	Size             *uint64 `path:"state/size" module:"openconfig-system/openconfig-system"`
	StorageComponent *string `path:"state/storage-component" module:"openconfig-system/openconfig-system"`
	Utilized         *uint64 `path:"state/utilized" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MountPoint) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetName retrieves the value of the leaf Name from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSize retrieves the value of the leaf Size from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetSize() uint64 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetStorageComponent retrieves the value of the leaf StorageComponent from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StorageComponent is set, it can
// safely use t.GetStorageComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StorageComponent == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetStorageComponent() string {
	if t == nil || t.StorageComponent == nil {
		return ""
	}
	return *t.StorageComponent
}

// GetUtilized retrieves the value of the leaf Utilized from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// SetAvailable sets the value of the leaf Available in the System_MountPoint
// struct.
func (t *System_MountPoint) SetAvailable(v uint64) {
	t.Available = &v
}

// SetName sets the value of the leaf Name in the System_MountPoint
// struct.
func (t *System_MountPoint) SetName(v string) {
	t.Name = &v
}

// SetSize sets the value of the leaf Size in the System_MountPoint
// struct.
func (t *System_MountPoint) SetSize(v uint64) {
	t.Size = &v
}

// SetStorageComponent sets the value of the leaf StorageComponent in the System_MountPoint
// struct.
func (t *System_MountPoint) SetStorageComponent(v string) {
	t.StorageComponent = &v
}

// SetUtilized sets the value of the leaf Utilized in the System_MountPoint
// struct.
func (t *System_MountPoint) SetUtilized(v uint64) {
	t.Utilized = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_MountPoint struct, which is a YANG list entry.
func (t *System_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MountPoint.
func (*System_MountPoint) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type System_Ntp struct {
	AuthMismatch     *uint64                       `path:"state/auth-mismatch" module:"openconfig-system/openconfig-system"`
	EnableNtpAuth    *bool                         `path:"state/enable-ntp-auth" module:"openconfig-system/openconfig-system" shadow-path:"config/enable-ntp-auth" shadow-module:"openconfig-system/openconfig-system"`
	Enabled          *bool                         `path:"state/enabled" module:"openconfig-system/openconfig-system" shadow-path:"config/enabled" shadow-module:"openconfig-system/openconfig-system"`
	NtpKey           map[uint16]*System_Ntp_NtpKey `path:"ntp-keys/ntp-key" module:"openconfig-system/openconfig-system"`
	NtpSourceAddress *string                       `path:"state/ntp-source-address" module:"openconfig-system/openconfig-system" shadow-path:"config/ntp-source-address" shadow-module:"openconfig-system/openconfig-system"`
	Server           map[string]*System_Ntp_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewNtpKey(KeyId uint16) (*System_Ntp_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &System_Ntp_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied System_Ntp_NtpKey struct to the
// list NtpKey of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_NtpKey already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendNtpKey(v *System_Ntp_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewServer(Address string) (*System_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateServer(Address string) *System_Ntp_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetServer(Address string) *System_Ntp_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Ntp_Server struct to the
// list Server of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_Server already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendServer(v *System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMismatch is set, it can
// safely use t.GetAuthMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMismatch == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableNtpAuth is set, it can
// safely use t.GetEnableNtpAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableNtpAuth == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpSourceAddress is set, it can
// safely use t.GetNtpSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpSourceAddress == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// SetAuthMismatch sets the value of the leaf AuthMismatch in the System_Ntp
// struct.
func (t *System_Ntp) SetAuthMismatch(v uint64) {
	t.AuthMismatch = &v
}

// SetEnableNtpAuth sets the value of the leaf EnableNtpAuth in the System_Ntp
// struct.
func (t *System_Ntp) SetEnableNtpAuth(v bool) {
	t.EnableNtpAuth = &v
}

// SetEnabled sets the value of the leaf Enabled in the System_Ntp
// struct.
func (t *System_Ntp) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetNtpSourceAddress sets the value of the leaf NtpSourceAddress in the System_Ntp
// struct.
func (t *System_Ntp) SetNtpSourceAddress(v string) {
	t.NtpSourceAddress = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableNtpAuth == nil {
		var v bool = false
		t.EnableNtpAuth = &v
	}
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	for _, e := range t.NtpKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp.
func (*System_Ntp) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKey struct {
	KeyId    *uint16                `path:"state/key-id|key-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/key-id|key-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	KeyType  E_System_NTP_AUTH_TYPE `path:"state/key-type" module:"openconfig-system/openconfig-system" shadow-path:"config/key-type" shadow-module:"openconfig-system/openconfig-system"`
	KeyValue *string                `path:"state/key-value" module:"openconfig-system/openconfig-system" shadow-path:"config/key-value" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_NtpKey) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyType is set, it can
// safely use t.GetKeyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyType == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyType() E_System_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// SetKeyId sets the value of the leaf KeyId in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyId(v uint16) {
	t.KeyId = &v
}

// SetKeyType sets the value of the leaf KeyType in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyType(v E_System_NTP_AUTH_TYPE) {
	t.KeyType = v
}

// SetKeyValue sets the value of the leaf KeyValue in the System_Ntp_NtpKey
// struct.
func (t *System_Ntp_NtpKey) SetKeyValue(v string) {
	t.KeyValue = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_NtpKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_NtpKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Ntp_NtpKey struct, which is a YANG list entry.
func (t *System_Ntp_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_NtpKey.
func (*System_Ntp_NtpKey) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_Server struct {
	Address         *string                  `path:"state/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"config/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	AssociationType E_Server_AssociationType `path:"state/association-type" module:"openconfig-system/openconfig-system" shadow-path:"config/association-type" shadow-module:"openconfig-system/openconfig-system"`
	Iburst          *bool                    `path:"state/iburst" module:"openconfig-system/openconfig-system" shadow-path:"config/iburst" shadow-module:"openconfig-system/openconfig-system"`
	Offset          *uint64                  `path:"state/offset" module:"openconfig-system/openconfig-system"`
	PollInterval    *uint32                  `path:"state/poll-interval" module:"openconfig-system/openconfig-system"`
	Port            *uint16                  `path:"state/port" module:"openconfig-system/openconfig-system" shadow-path:"config/port" shadow-module:"openconfig-system/openconfig-system"`
	Prefer          *bool                    `path:"state/prefer" module:"openconfig-system/openconfig-system" shadow-path:"config/prefer" shadow-module:"openconfig-system/openconfig-system"`
	RootDelay       *uint32                  `path:"state/root-delay" module:"openconfig-system/openconfig-system"`
	RootDispersion  *uint64                  `path:"state/root-dispersion" module:"openconfig-system/openconfig-system"`
	Stratum         *uint8                   `path:"state/stratum" module:"openconfig-system/openconfig-system"`
	Version         *uint8                   `path:"state/version" module:"openconfig-system/openconfig-system" shadow-path:"config/version" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationType is set, it can
// safely use t.GetAssociationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationType == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAssociationType() E_Server_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return Server_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetOffset retrieves the value of the leaf Offset from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetOffset() uint64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDelay is set, it can
// safely use t.GetRootDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDelay == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDelay() uint32 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDispersion is set, it can
// safely use t.GetRootDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDispersion == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDispersion() uint64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetStratum retrieves the value of the leaf Stratum from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stratum is set, it can
// safely use t.GetStratum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stratum == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// SetAddress sets the value of the leaf Address in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAddress(v string) {
	t.Address = &v
}

// SetAssociationType sets the value of the leaf AssociationType in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetAssociationType(v E_Server_AssociationType) {
	t.AssociationType = v
}

// SetIburst sets the value of the leaf Iburst in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetIburst(v bool) {
	t.Iburst = &v
}

// SetOffset sets the value of the leaf Offset in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetOffset(v uint64) {
	t.Offset = &v
}

// SetPollInterval sets the value of the leaf PollInterval in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPollInterval(v uint32) {
	t.PollInterval = &v
}

// SetPort sets the value of the leaf Port in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPort(v uint16) {
	t.Port = &v
}

// SetPrefer sets the value of the leaf Prefer in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetPrefer(v bool) {
	t.Prefer = &v
}

// SetRootDelay sets the value of the leaf RootDelay in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDelay(v uint32) {
	t.RootDelay = &v
}

// SetRootDispersion sets the value of the leaf RootDispersion in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetRootDispersion(v uint64) {
	t.RootDispersion = &v
}

// SetStratum sets the value of the leaf Stratum in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetStratum(v uint8) {
	t.Stratum = &v
}

// SetVersion sets the value of the leaf Version in the System_Ntp_Server
// struct.
func (t *System_Ntp_Server) SetVersion(v uint8) {
	t.Version = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationType == 0 {
		t.AssociationType = Server_AssociationType_SERVER
	}
	if t.Iburst == nil {
		var v bool = false
		t.Iburst = &v
	}
	if t.Port == nil {
		var v uint16 = 123
		t.Port = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint8 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the System_Ntp_Server struct, which is a YANG list entry.
func (t *System_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_Server.
func (*System_Ntp_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Process represents the /openconfig-system/system/processes/process YANG schema element.
type System_Process struct {
	Args              []string `path:"state/args" module:"openconfig-system/openconfig-system"`
	CpuUsageSystem    *uint64  `path:"state/cpu-usage-system" module:"openconfig-system/openconfig-system"`
	CpuUsageUser      *uint64  `path:"state/cpu-usage-user" module:"openconfig-system/openconfig-system"`
	CpuUtilization    *uint8   `path:"state/cpu-utilization" module:"openconfig-system/openconfig-system"`
	MemoryUsage       *uint64  `path:"state/memory-usage" module:"openconfig-system/openconfig-system"`
	MemoryUtilization *uint8   `path:"state/memory-utilization" module:"openconfig-system/openconfig-system"`
	Name              *string  `path:"state/name" module:"openconfig-system/openconfig-system"`
	Pid               *uint64  `path:"state/pid|pid" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"pid" shadow-module:"openconfig-system"`
	StartTime         *uint64  `path:"state/start-time" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Process) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Args is set, it can
// safely use t.GetArgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Args == nil' before retrieving the leaf's value.
func (t *System_Process) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageSystem is set, it can
// safely use t.GetCpuUsageSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageSystem == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageUser is set, it can
// safely use t.GetCpuUsageUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageUser == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUtilization is set, it can
// safely use t.GetCpuUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUsage is set, it can
// safely use t.GetMemoryUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUsage == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUtilization is set, it can
// safely use t.GetMemoryUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Process) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pid is set, it can
// safely use t.GetPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pid == nil' before retrieving the leaf's value.
func (t *System_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *System_Process) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// SetArgs sets the value of the leaf Args in the System_Process
// struct.
func (t *System_Process) SetArgs(v []string) {
	t.Args = v
}

// SetCpuUsageSystem sets the value of the leaf CpuUsageSystem in the System_Process
// struct.
func (t *System_Process) SetCpuUsageSystem(v uint64) {
	t.CpuUsageSystem = &v
}

// SetCpuUsageUser sets the value of the leaf CpuUsageUser in the System_Process
// struct.
func (t *System_Process) SetCpuUsageUser(v uint64) {
	t.CpuUsageUser = &v
}

// SetCpuUtilization sets the value of the leaf CpuUtilization in the System_Process
// struct.
func (t *System_Process) SetCpuUtilization(v uint8) {
	t.CpuUtilization = &v
}

// SetMemoryUsage sets the value of the leaf MemoryUsage in the System_Process
// struct.
func (t *System_Process) SetMemoryUsage(v uint64) {
	t.MemoryUsage = &v
}

// SetMemoryUtilization sets the value of the leaf MemoryUtilization in the System_Process
// struct.
func (t *System_Process) SetMemoryUtilization(v uint8) {
	t.MemoryUtilization = &v
}

// SetName sets the value of the leaf Name in the System_Process
// struct.
func (t *System_Process) SetName(v string) {
	t.Name = &v
}

// SetPid sets the value of the leaf Pid in the System_Process
// struct.
func (t *System_Process) SetPid(v uint64) {
	t.Pid = &v
}

// SetStartTime sets the value of the leaf StartTime in the System_Process
// struct.
func (t *System_Process) SetStartTime(v uint64) {
	t.StartTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_Process
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Process) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Process struct, which is a YANG list entry.
func (t *System_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Process.
func (*System_Process) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServer struct {
	ActiveTrustBundleCreatedOn *uint64                     `path:"state/active-trust-bundle-created-on" module:"openconfig-system/gnsi-ssh"`
	ActiveTrustBundleVersion   *string                     `path:"state/active-trust-bundle-version" module:"openconfig-system/gnsi-ssh"`
	Enable                     *bool                       `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	ProtocolVersion            E_SshServer_ProtocolVersion `path:"state/protocol-version" module:"openconfig-system/openconfig-system" shadow-path:"config/protocol-version" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit                  *uint16                     `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit               *uint16                     `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout                    *uint16                     `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer) IsYANGGoStruct() {}

// GetActiveTrustBundleCreatedOn retrieves the value of the leaf ActiveTrustBundleCreatedOn from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTrustBundleCreatedOn is set, it can
// safely use t.GetActiveTrustBundleCreatedOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTrustBundleCreatedOn == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveTrustBundleCreatedOn() uint64 {
	if t == nil || t.ActiveTrustBundleCreatedOn == nil {
		return 0
	}
	return *t.ActiveTrustBundleCreatedOn
}

// GetActiveTrustBundleVersion retrieves the value of the leaf ActiveTrustBundleVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTrustBundleVersion is set, it can
// safely use t.GetActiveTrustBundleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTrustBundleVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetActiveTrustBundleVersion() string {
	if t == nil || t.ActiveTrustBundleVersion == nil {
		return ""
	}
	return *t.ActiveTrustBundleVersion
}

// GetEnable retrieves the value of the leaf Enable from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolVersion is set, it can
// safely use t.GetProtocolVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetProtocolVersion() E_SshServer_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return SshServer_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetActiveTrustBundleCreatedOn sets the value of the leaf ActiveTrustBundleCreatedOn in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveTrustBundleCreatedOn(v uint64) {
	t.ActiveTrustBundleCreatedOn = &v
}

// SetActiveTrustBundleVersion sets the value of the leaf ActiveTrustBundleVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetActiveTrustBundleVersion(v string) {
	t.ActiveTrustBundleVersion = &v
}

// SetEnable sets the value of the leaf Enable in the System_SshServer
// struct.
func (t *System_SshServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetProtocolVersion sets the value of the leaf ProtocolVersion in the System_SshServer
// struct.
func (t *System_SshServer) SetProtocolVersion(v E_SshServer_ProtocolVersion) {
	t.ProtocolVersion = v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_SshServer
// struct.
func (t *System_SshServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_SshServer
// struct.
func (t *System_SshServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_SshServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_SshServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.ProtocolVersion == 0 {
		t.ProtocolVersion = SshServer_ProtocolVersion_V2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_SshServer.
func (*System_SshServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServer struct {
	Enable       *bool   `path:"state/enable" module:"openconfig-system/openconfig-system" shadow-path:"config/enable" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit    *uint16 `path:"state/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit *uint16 `path:"state/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"config/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout      *uint16 `path:"state/timeout" module:"openconfig-system/openconfig-system" shadow-path:"config/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_TelnetServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// SetEnable sets the value of the leaf Enable in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetEnable(v bool) {
	t.Enable = &v
}

// SetRateLimit sets the value of the leaf RateLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetRateLimit(v uint16) {
	t.RateLimit = &v
}

// SetSessionLimit sets the value of the leaf SessionLimit in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetSessionLimit(v uint16) {
	t.SessionLimit = &v
}

// SetTimeout sets the value of the leaf Timeout in the System_TelnetServer
// struct.
func (t *System_TelnetServer) SetTimeout(v uint16) {
	t.Timeout = &v
}

// PopulateDefaults recursively populates unset leaf fields in the System_TelnetServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_TelnetServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_TelnetServer.
func (*System_TelnetServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// TerminalDevice represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevice struct {
	Channel map[uint32]*TerminalDevice_Channel `path:"logical-channels/channel" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Mode    map[uint16]*TerminalDevice_Mode    `path:"operational-modes/mode" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// TerminalDevice struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice) NewChannel(Index uint32) (*TerminalDevice_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*TerminalDevice_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &TerminalDevice_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the TerminalDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice) RenameChannel(oldK, newK uint32) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver TerminalDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice) GetOrCreateChannel(Index uint32) *TerminalDevice_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of TerminalDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice) GetChannel(Index uint32) *TerminalDevice_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver TerminalDevice. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice) DeleteChannel(Index uint32) {
	key := Index

	delete(t.Channel, key)
}

// AppendChannel appends the supplied TerminalDevice_Channel struct to the
// list Channel of TerminalDevice. If the key value(s) specified in
// the supplied TerminalDevice_Channel already exist in the list, an error is
// returned.
func (t *TerminalDevice) AppendChannel(v *TerminalDevice_Channel) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*TerminalDevice_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// NewMode creates a new entry in the Mode list of the
// TerminalDevice struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice) NewMode(ModeId uint16) (*TerminalDevice_Mode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*TerminalDevice_Mode)
	}

	key := ModeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mode", key)
	}

	t.Mode[key] = &TerminalDevice_Mode{
		ModeId: &ModeId,
	}

	return t.Mode[key], nil
}

// RenameMode renames an entry in the list Mode within
// the TerminalDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice) RenameMode(oldK, newK uint16) error {
	if _, ok := t.Mode[newK]; ok {
		return fmt.Errorf("key %v already exists in Mode", newK)
	}

	e, ok := t.Mode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mode", oldK)
	}
	e.ModeId = &newK

	t.Mode[newK] = e
	delete(t.Mode, oldK)
	return nil
}

// GetOrCreateMode retrieves the value with the specified keys from
// the receiver TerminalDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice) GetOrCreateMode(ModeId uint16) *TerminalDevice_Mode {

	key := ModeId

	if v, ok := t.Mode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMode(ModeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMode got unexpected error: %v", err))
	}
	return v
}

// GetMode retrieves the value with the specified key from
// the Mode map field of TerminalDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice) GetMode(ModeId uint16) *TerminalDevice_Mode {

	if t == nil {
		return nil
	}

	key := ModeId

	if lm, ok := t.Mode[key]; ok {
		return lm
	}
	return nil
}

// DeleteMode deletes the value with the specified keys from
// the receiver TerminalDevice. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice) DeleteMode(ModeId uint16) {
	key := ModeId

	delete(t.Mode, key)
}

// AppendMode appends the supplied TerminalDevice_Mode struct to the
// list Mode of TerminalDevice. If the key value(s) specified in
// the supplied TerminalDevice_Mode already exist in the list, an error is
// returned.
func (t *TerminalDevice) AppendMode(v *TerminalDevice_Mode) error {
	if v.ModeId == nil {
		return fmt.Errorf("invalid nil key received for ModeId")
	}

	key := *v.ModeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*TerminalDevice_Mode)
	}

	if _, ok := t.Mode[key]; ok {
		return fmt.Errorf("duplicate key for list Mode %v", key)
	}

	t.Mode[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
	for _, e := range t.Mode {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice.
func (*TerminalDevice) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_Channel struct {
	AdminState         E_TransportTypes_AdminStateType                `path:"state/admin-state" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/admin-state" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Assignment         map[uint32]*TerminalDevice_Channel_Assignment  `path:"logical-channel-assignments/assignment" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ClientMappingMode  E_TransportTypes_CLIENT_MAPPING_MODE           `path:"state/client-mapping-mode" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/client-mapping-mode" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Description        *string                                        `path:"state/description" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/description" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Ethernet           *TerminalDevice_Channel_Ethernet               `path:"ethernet" module:"openconfig-terminal-device"`
	Index              *uint32                                        `path:"state/index|index" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"config/index|index" shadow-module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	Ingress            *TerminalDevice_Channel_Ingress                `path:"ingress" module:"openconfig-terminal-device"`
	LinkState          E_Channel_LinkState                            `path:"state/link-state" module:"openconfig-terminal-device/openconfig-terminal-device"`
	LogicalChannelType E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE `path:"state/logical-channel-type" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/logical-channel-type" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	LoopbackMode       E_TransportTypes_LoopbackModeType              `path:"state/loopback-mode" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/loopback-mode" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Otn                *TerminalDevice_Channel_Otn                    `path:"otn" module:"openconfig-terminal-device"`
	RateClass          E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE     `path:"state/rate-class" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/rate-class" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TestSignal         *bool                                          `path:"state/test-signal" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/test-signal" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TribProtocol       E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE       `path:"state/trib-protocol" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/trib-protocol" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel) IsYANGGoStruct() {}

// NewAssignment creates a new entry in the Assignment list of the
// TerminalDevice_Channel struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel) NewAssignment(Index uint32) (*TerminalDevice_Channel_Assignment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*TerminalDevice_Channel_Assignment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Assignment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Assignment", key)
	}

	t.Assignment[key] = &TerminalDevice_Channel_Assignment{
		Index: &Index,
	}

	return t.Assignment[key], nil
}

// RenameAssignment renames an entry in the list Assignment within
// the TerminalDevice_Channel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel) RenameAssignment(oldK, newK uint32) error {
	if _, ok := t.Assignment[newK]; ok {
		return fmt.Errorf("key %v already exists in Assignment", newK)
	}

	e, ok := t.Assignment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Assignment", oldK)
	}
	e.Index = &newK

	t.Assignment[newK] = e
	delete(t.Assignment, oldK)
	return nil
}

// GetOrCreateAssignment retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel) GetOrCreateAssignment(Index uint32) *TerminalDevice_Channel_Assignment {

	key := Index

	if v, ok := t.Assignment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssignment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssignment got unexpected error: %v", err))
	}
	return v
}

// GetAssignment retrieves the value with the specified key from
// the Assignment map field of TerminalDevice_Channel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel) GetAssignment(Index uint32) *TerminalDevice_Channel_Assignment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Assignment[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssignment deletes the value with the specified keys from
// the receiver TerminalDevice_Channel. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel) DeleteAssignment(Index uint32) {
	key := Index

	delete(t.Assignment, key)
}

// AppendAssignment appends the supplied TerminalDevice_Channel_Assignment struct to the
// list Assignment of TerminalDevice_Channel. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Assignment already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel) AppendAssignment(v *TerminalDevice_Channel_Assignment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*TerminalDevice_Channel_Assignment)
	}

	if _, ok := t.Assignment[key]; ok {
		return fmt.Errorf("duplicate key for list Assignment %v", key)
	}

	t.Assignment[key] = v
	return nil
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateEthernet() *TerminalDevice_Channel_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &TerminalDevice_Channel_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateIngress() *TerminalDevice_Channel_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &TerminalDevice_Channel_Ingress{}
	return t.Ingress
}

// GetOrCreateOtn retrieves the value of the Otn field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateOtn() *TerminalDevice_Channel_Otn {
	if t.Otn != nil {
		return t.Otn
	}
	t.Otn = &TerminalDevice_Channel_Otn{}
	return t.Otn
}

// GetEthernet returns the value of the Ethernet struct pointer
// from TerminalDevice_Channel. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetEthernet() *TerminalDevice_Channel_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from TerminalDevice_Channel. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetIngress() *TerminalDevice_Channel_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetOtn returns the value of the Otn struct pointer
// from TerminalDevice_Channel. If the receiver or the field Otn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetOtn() *TerminalDevice_Channel_Otn {
	if t != nil && t.Otn != nil {
		return t.Otn
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetAdminState() E_TransportTypes_AdminStateType {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetClientMappingMode retrieves the value of the leaf ClientMappingMode from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMappingMode is set, it can
// safely use t.GetClientMappingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMappingMode == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetClientMappingMode() E_TransportTypes_CLIENT_MAPPING_MODE {
	if t == nil || t.ClientMappingMode == 0 {
		return 0
	}
	return t.ClientMappingMode
}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLinkState retrieves the value of the leaf LinkState from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkState is set, it can
// safely use t.GetLinkState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkState == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLinkState() E_Channel_LinkState {
	if t == nil || t.LinkState == 0 {
		return 0
	}
	return t.LinkState
}

// GetLogicalChannelType retrieves the value of the leaf LogicalChannelType from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalChannelType is set, it can
// safely use t.GetLogicalChannelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalChannelType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLogicalChannelType() E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE {
	if t == nil || t.LogicalChannelType == 0 {
		return 0
	}
	return t.LogicalChannelType
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackMode is set, it can
// safely use t.GetLoopbackMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackMode == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLoopbackMode() E_TransportTypes_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return TransportTypes_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetRateClass retrieves the value of the leaf RateClass from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateClass is set, it can
// safely use t.GetRateClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateClass == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetRateClass() E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE {
	if t == nil || t.RateClass == 0 {
		return 0
	}
	return t.RateClass
}

// GetTestSignal retrieves the value of the leaf TestSignal from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestSignal is set, it can
// safely use t.GetTestSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestSignal == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// GetTribProtocol retrieves the value of the leaf TribProtocol from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TribProtocol is set, it can
// safely use t.GetTribProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TribProtocol == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetTribProtocol() E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE {
	if t == nil || t.TribProtocol == 0 {
		return 0
	}
	return t.TribProtocol
}

// SetAdminState sets the value of the leaf AdminState in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetAdminState(v E_TransportTypes_AdminStateType) {
	t.AdminState = v
}

// SetClientMappingMode sets the value of the leaf ClientMappingMode in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetClientMappingMode(v E_TransportTypes_CLIENT_MAPPING_MODE) {
	t.ClientMappingMode = v
}

// SetDescription sets the value of the leaf Description in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetDescription(v string) {
	t.Description = &v
}

// SetIndex sets the value of the leaf Index in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetIndex(v uint32) {
	t.Index = &v
}

// SetLinkState sets the value of the leaf LinkState in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetLinkState(v E_Channel_LinkState) {
	t.LinkState = v
}

// SetLogicalChannelType sets the value of the leaf LogicalChannelType in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetLogicalChannelType(v E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE) {
	t.LogicalChannelType = v
}

// SetLoopbackMode sets the value of the leaf LoopbackMode in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetLoopbackMode(v E_TransportTypes_LoopbackModeType) {
	t.LoopbackMode = v
}

// SetRateClass sets the value of the leaf RateClass in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetRateClass(v E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE) {
	t.RateClass = v
}

// SetTestSignal sets the value of the leaf TestSignal in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetTestSignal(v bool) {
	t.TestSignal = &v
}

// SetTribProtocol sets the value of the leaf TribProtocol in the TerminalDevice_Channel
// struct.
func (t *TerminalDevice_Channel) SetTribProtocol(v E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE) {
	t.TribProtocol = v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoopbackMode == 0 {
		t.LoopbackMode = TransportTypes_LoopbackModeType_NONE
	}
	t.Ethernet.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Otn.PopulateDefaults()
	for _, e := range t.Assignment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel struct, which is a YANG list entry.
func (t *TerminalDevice_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel.
func (*TerminalDevice_Channel) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Assignment represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_Assignment struct {
	Allocation         *float64                                `path:"state/allocation" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/allocation" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	AssignmentType     E_Assignment_AssignmentType             `path:"state/assignment-type" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/assignment-type" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Description        *string                                 `path:"state/description" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/description" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Index              *uint32                                 `path:"state/index|index" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"config/index|index" shadow-module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	LogicalChannel     *uint32                                 `path:"state/logical-channel" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/logical-channel" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Mapping            E_TransportTypes_FRAME_MAPPING_PROTOCOL `path:"state/mapping" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/mapping" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	OpticalChannel     *string                                 `path:"state/optical-channel" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/optical-channel" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TributarySlotIndex *int32                                  `path:"state/tributary-slot-index" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/tributary-slot-index" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Assignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Assignment) IsYANGGoStruct() {}

// GetAllocation retrieves the value of the leaf Allocation from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allocation is set, it can
// safely use t.GetAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allocation == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetAllocation() float64 {
	if t == nil || t.Allocation == nil {
		return 0.0
	}
	return *t.Allocation
}

// GetAssignmentType retrieves the value of the leaf AssignmentType from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssignmentType is set, it can
// safely use t.GetAssignmentType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssignmentType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetAssignmentType() E_Assignment_AssignmentType {
	if t == nil || t.AssignmentType == 0 {
		return 0
	}
	return t.AssignmentType
}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLogicalChannel retrieves the value of the leaf LogicalChannel from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalChannel is set, it can
// safely use t.GetLogicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetLogicalChannel() uint32 {
	if t == nil || t.LogicalChannel == nil {
		return 0
	}
	return *t.LogicalChannel
}

// GetMapping retrieves the value of the leaf Mapping from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mapping is set, it can
// safely use t.GetMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mapping == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetMapping() E_TransportTypes_FRAME_MAPPING_PROTOCOL {
	if t == nil || t.Mapping == 0 {
		return 0
	}
	return t.Mapping
}

// GetOpticalChannel retrieves the value of the leaf OpticalChannel from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpticalChannel is set, it can
// safely use t.GetOpticalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpticalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetOpticalChannel() string {
	if t == nil || t.OpticalChannel == nil {
		return ""
	}
	return *t.OpticalChannel
}

// GetTributarySlotIndex retrieves the value of the leaf TributarySlotIndex from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TributarySlotIndex is set, it can
// safely use t.GetTributarySlotIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TributarySlotIndex == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetTributarySlotIndex() int32 {
	if t == nil || t.TributarySlotIndex == nil {
		return 0
	}
	return *t.TributarySlotIndex
}

// SetAllocation sets the value of the leaf Allocation in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetAllocation(v float64) {
	t.Allocation = &v
}

// SetAssignmentType sets the value of the leaf AssignmentType in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetAssignmentType(v E_Assignment_AssignmentType) {
	t.AssignmentType = v
}

// SetDescription sets the value of the leaf Description in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetDescription(v string) {
	t.Description = &v
}

// SetIndex sets the value of the leaf Index in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetIndex(v uint32) {
	t.Index = &v
}

// SetLogicalChannel sets the value of the leaf LogicalChannel in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetLogicalChannel(v uint32) {
	t.LogicalChannel = &v
}

// SetMapping sets the value of the leaf Mapping in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetMapping(v E_TransportTypes_FRAME_MAPPING_PROTOCOL) {
	t.Mapping = v
}

// SetOpticalChannel sets the value of the leaf OpticalChannel in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetOpticalChannel(v string) {
	t.OpticalChannel = &v
}

// SetTributarySlotIndex sets the value of the leaf TributarySlotIndex in the TerminalDevice_Channel_Assignment
// struct.
func (t *TerminalDevice_Channel_Assignment) SetTributarySlotIndex(v int32) {
	t.TributarySlotIndex = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Assignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Assignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Assignment struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Assignment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Assignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Assignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Assignment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Assignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Assignment.
func (*TerminalDevice_Channel_Assignment) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_Ethernet struct {
	AlsDelay                    *uint32                                     `path:"state/als-delay" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/als-delay" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	ClientAls                   E_Ethernet_ClientAls                        `path:"state/client-als" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/client-als" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Esnr                        *TerminalDevice_Channel_Ethernet_Esnr       `path:"state/esnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	FecUncorrectableBlocks      *uint64                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	In_8021QFrames              *uint64                                     `path:"state/in-8021q-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InBlockErrors               *uint64                                     `path:"state/in-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InCarrierErrors             *uint64                                     `path:"state/in-carrier-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InCrcErrors                 *uint64                                     `path:"state/in-crc-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InFragmentFrames            *uint64                                     `path:"state/in-fragment-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InInterruptedTx             *uint64                                     `path:"state/in-interrupted-tx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InJabberFrames              *uint64                                     `path:"state/in-jabber-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InLateCollision             *uint64                                     `path:"state/in-late-collision" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InMacControlFrames          *uint64                                     `path:"state/in-mac-control-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InMacErrorsRx               *uint64                                     `path:"state/in-mac-errors-rx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InMacPauseFrames            *uint64                                     `path:"state/in-mac-pause-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InMaxsizeExceeded           *uint64                                     `path:"state/in-maxsize-exceeded" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InOversizeFrames            *uint64                                     `path:"state/in-oversize-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InPcsBipErrors              *uint64                                     `path:"state/in-pcs-bip-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InPcsErroredSeconds         *uint64                                     `path:"state/in-pcs-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InPcsSeverelyErroredSeconds *uint64                                     `path:"state/in-pcs-severely-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InPcsUnavailableSeconds     *uint64                                     `path:"state/in-pcs-unavailable-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InSingleCollision           *uint64                                     `path:"state/in-single-collision" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InSymbolError               *uint64                                     `path:"state/in-symbol-error" module:"openconfig-terminal-device/openconfig-terminal-device"`
	InUndersizeFrames           *uint64                                     `path:"state/in-undersize-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Lldp                        *TerminalDevice_Channel_Ethernet_Lldp       `path:"lldp" module:"openconfig-terminal-device"`
	Out_8021QFrames             *uint64                                     `path:"state/out-8021q-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutBlockErrors              *uint64                                     `path:"state/out-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutCrcErrors                *uint64                                     `path:"state/out-crc-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutMacControlFrames         *uint64                                     `path:"state/out-mac-control-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutMacErrorsTx              *uint64                                     `path:"state/out-mac-errors-tx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutMacPauseFrames           *uint64                                     `path:"state/out-mac-pause-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	OutPcsBipErrors             *uint64                                     `path:"state/out-pcs-bip-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PostFecBer                  *TerminalDevice_Channel_Ethernet_PostFecBer `path:"state/post-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PreFecBer                   *TerminalDevice_Channel_Ethernet_PreFecBer  `path:"state/pre-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	QValue                      *TerminalDevice_Channel_Ethernet_QValue     `path:"state/q-value" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet) IsYANGGoStruct() {}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateEsnr() *TerminalDevice_Channel_Ethernet_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &TerminalDevice_Channel_Ethernet_Esnr{}
	return t.Esnr
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateLldp() *TerminalDevice_Channel_Ethernet_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &TerminalDevice_Channel_Ethernet_Lldp{}
	return t.Lldp
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreatePostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &TerminalDevice_Channel_Ethernet_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreatePreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &TerminalDevice_Channel_Ethernet_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateQValue() *TerminalDevice_Channel_Ethernet_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &TerminalDevice_Channel_Ethernet_QValue{}
	return t.QValue
}

// GetEsnr returns the value of the Esnr struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetEsnr() *TerminalDevice_Channel_Ethernet_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetLldp() *TerminalDevice_Channel_Ethernet_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetPostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetPreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetQValue() *TerminalDevice_Channel_Ethernet_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetAlsDelay retrieves the value of the leaf AlsDelay from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlsDelay is set, it can
// safely use t.GetAlsDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlsDelay == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetAlsDelay() uint32 {
	if t == nil || t.AlsDelay == nil {
		return 0
	}
	return *t.AlsDelay
}

// GetClientAls retrieves the value of the leaf ClientAls from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientAls is set, it can
// safely use t.GetClientAls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientAls == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetClientAls() E_Ethernet_ClientAls {
	if t == nil || t.ClientAls == 0 {
		return Ethernet_ClientAls_ETHERNET
	}
	return t.ClientAls
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if In_8021QFrames is set, it can
// safely use t.GetIn_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.In_8021QFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBlockErrors is set, it can
// safely use t.GetInBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCarrierErrors retrieves the value of the leaf InCarrierErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCarrierErrors is set, it can
// safely use t.GetInCarrierErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCarrierErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInCarrierErrors() uint64 {
	if t == nil || t.InCarrierErrors == nil {
		return 0
	}
	return *t.InCarrierErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCrcErrors is set, it can
// safely use t.GetInCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCrcErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFragmentFrames is set, it can
// safely use t.GetInFragmentFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFragmentFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInInterruptedTx retrieves the value of the leaf InInterruptedTx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterruptedTx is set, it can
// safely use t.GetInInterruptedTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterruptedTx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInInterruptedTx() uint64 {
	if t == nil || t.InInterruptedTx == nil {
		return 0
	}
	return *t.InInterruptedTx
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InJabberFrames is set, it can
// safely use t.GetInJabberFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InJabberFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInLateCollision retrieves the value of the leaf InLateCollision from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLateCollision is set, it can
// safely use t.GetInLateCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLateCollision == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInLateCollision() uint64 {
	if t == nil || t.InLateCollision == nil {
		return 0
	}
	return *t.InLateCollision
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacControlFrames is set, it can
// safely use t.GetInMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacControlFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacErrorsRx retrieves the value of the leaf InMacErrorsRx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacErrorsRx is set, it can
// safely use t.GetInMacErrorsRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacErrorsRx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacErrorsRx() uint64 {
	if t == nil || t.InMacErrorsRx == nil {
		return 0
	}
	return *t.InMacErrorsRx
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacPauseFrames is set, it can
// safely use t.GetInMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacPauseFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInMaxsizeExceeded retrieves the value of the leaf InMaxsizeExceeded from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMaxsizeExceeded is set, it can
// safely use t.GetInMaxsizeExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMaxsizeExceeded == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMaxsizeExceeded() uint64 {
	if t == nil || t.InMaxsizeExceeded == nil {
		return 0
	}
	return *t.InMaxsizeExceeded
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOversizeFrames is set, it can
// safely use t.GetInOversizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOversizeFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInPcsBipErrors retrieves the value of the leaf InPcsBipErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsBipErrors is set, it can
// safely use t.GetInPcsBipErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsBipErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsBipErrors() uint64 {
	if t == nil || t.InPcsBipErrors == nil {
		return 0
	}
	return *t.InPcsBipErrors
}

// GetInPcsErroredSeconds retrieves the value of the leaf InPcsErroredSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsErroredSeconds is set, it can
// safely use t.GetInPcsErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsErroredSeconds() uint64 {
	if t == nil || t.InPcsErroredSeconds == nil {
		return 0
	}
	return *t.InPcsErroredSeconds
}

// GetInPcsSeverelyErroredSeconds retrieves the value of the leaf InPcsSeverelyErroredSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsSeverelyErroredSeconds is set, it can
// safely use t.GetInPcsSeverelyErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsSeverelyErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsSeverelyErroredSeconds() uint64 {
	if t == nil || t.InPcsSeverelyErroredSeconds == nil {
		return 0
	}
	return *t.InPcsSeverelyErroredSeconds
}

// GetInPcsUnavailableSeconds retrieves the value of the leaf InPcsUnavailableSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsUnavailableSeconds is set, it can
// safely use t.GetInPcsUnavailableSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsUnavailableSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsUnavailableSeconds() uint64 {
	if t == nil || t.InPcsUnavailableSeconds == nil {
		return 0
	}
	return *t.InPcsUnavailableSeconds
}

// GetInSingleCollision retrieves the value of the leaf InSingleCollision from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSingleCollision is set, it can
// safely use t.GetInSingleCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSingleCollision == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInSingleCollision() uint64 {
	if t == nil || t.InSingleCollision == nil {
		return 0
	}
	return *t.InSingleCollision
}

// GetInSymbolError retrieves the value of the leaf InSymbolError from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSymbolError is set, it can
// safely use t.GetInSymbolError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSymbolError == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInSymbolError() uint64 {
	if t == nil || t.InSymbolError == nil {
		return 0
	}
	return *t.InSymbolError
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUndersizeFrames is set, it can
// safely use t.GetInUndersizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUndersizeFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Out_8021QFrames is set, it can
// safely use t.GetOut_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Out_8021QFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutBlockErrors retrieves the value of the leaf OutBlockErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBlockErrors is set, it can
// safely use t.GetOutBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutBlockErrors() uint64 {
	if t == nil || t.OutBlockErrors == nil {
		return 0
	}
	return *t.OutBlockErrors
}

// GetOutCrcErrors retrieves the value of the leaf OutCrcErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCrcErrors is set, it can
// safely use t.GetOutCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCrcErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutCrcErrors() uint64 {
	if t == nil || t.OutCrcErrors == nil {
		return 0
	}
	return *t.OutCrcErrors
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacControlFrames is set, it can
// safely use t.GetOutMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacControlFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacErrorsTx retrieves the value of the leaf OutMacErrorsTx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacErrorsTx is set, it can
// safely use t.GetOutMacErrorsTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacErrorsTx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacErrorsTx() uint64 {
	if t == nil || t.OutMacErrorsTx == nil {
		return 0
	}
	return *t.OutMacErrorsTx
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacPauseFrames is set, it can
// safely use t.GetOutMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacPauseFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// GetOutPcsBipErrors retrieves the value of the leaf OutPcsBipErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPcsBipErrors is set, it can
// safely use t.GetOutPcsBipErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPcsBipErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutPcsBipErrors() uint64 {
	if t == nil || t.OutPcsBipErrors == nil {
		return 0
	}
	return *t.OutPcsBipErrors
}

// SetAlsDelay sets the value of the leaf AlsDelay in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetAlsDelay(v uint32) {
	t.AlsDelay = &v
}

// SetClientAls sets the value of the leaf ClientAls in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetClientAls(v E_Ethernet_ClientAls) {
	t.ClientAls = v
}

// SetFecUncorrectableBlocks sets the value of the leaf FecUncorrectableBlocks in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetFecUncorrectableBlocks(v uint64) {
	t.FecUncorrectableBlocks = &v
}

// SetIn_8021QFrames sets the value of the leaf In_8021QFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetIn_8021QFrames(v uint64) {
	t.In_8021QFrames = &v
}

// SetInBlockErrors sets the value of the leaf InBlockErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInBlockErrors(v uint64) {
	t.InBlockErrors = &v
}

// SetInCarrierErrors sets the value of the leaf InCarrierErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInCarrierErrors(v uint64) {
	t.InCarrierErrors = &v
}

// SetInCrcErrors sets the value of the leaf InCrcErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInCrcErrors(v uint64) {
	t.InCrcErrors = &v
}

// SetInFragmentFrames sets the value of the leaf InFragmentFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInFragmentFrames(v uint64) {
	t.InFragmentFrames = &v
}

// SetInInterruptedTx sets the value of the leaf InInterruptedTx in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInInterruptedTx(v uint64) {
	t.InInterruptedTx = &v
}

// SetInJabberFrames sets the value of the leaf InJabberFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInJabberFrames(v uint64) {
	t.InJabberFrames = &v
}

// SetInLateCollision sets the value of the leaf InLateCollision in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInLateCollision(v uint64) {
	t.InLateCollision = &v
}

// SetInMacControlFrames sets the value of the leaf InMacControlFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInMacControlFrames(v uint64) {
	t.InMacControlFrames = &v
}

// SetInMacErrorsRx sets the value of the leaf InMacErrorsRx in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInMacErrorsRx(v uint64) {
	t.InMacErrorsRx = &v
}

// SetInMacPauseFrames sets the value of the leaf InMacPauseFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInMacPauseFrames(v uint64) {
	t.InMacPauseFrames = &v
}

// SetInMaxsizeExceeded sets the value of the leaf InMaxsizeExceeded in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInMaxsizeExceeded(v uint64) {
	t.InMaxsizeExceeded = &v
}

// SetInOversizeFrames sets the value of the leaf InOversizeFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInOversizeFrames(v uint64) {
	t.InOversizeFrames = &v
}

// SetInPcsBipErrors sets the value of the leaf InPcsBipErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInPcsBipErrors(v uint64) {
	t.InPcsBipErrors = &v
}

// SetInPcsErroredSeconds sets the value of the leaf InPcsErroredSeconds in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInPcsErroredSeconds(v uint64) {
	t.InPcsErroredSeconds = &v
}

// SetInPcsSeverelyErroredSeconds sets the value of the leaf InPcsSeverelyErroredSeconds in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInPcsSeverelyErroredSeconds(v uint64) {
	t.InPcsSeverelyErroredSeconds = &v
}

// SetInPcsUnavailableSeconds sets the value of the leaf InPcsUnavailableSeconds in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInPcsUnavailableSeconds(v uint64) {
	t.InPcsUnavailableSeconds = &v
}

// SetInSingleCollision sets the value of the leaf InSingleCollision in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInSingleCollision(v uint64) {
	t.InSingleCollision = &v
}

// SetInSymbolError sets the value of the leaf InSymbolError in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInSymbolError(v uint64) {
	t.InSymbolError = &v
}

// SetInUndersizeFrames sets the value of the leaf InUndersizeFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetInUndersizeFrames(v uint64) {
	t.InUndersizeFrames = &v
}

// SetOut_8021QFrames sets the value of the leaf Out_8021QFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOut_8021QFrames(v uint64) {
	t.Out_8021QFrames = &v
}

// SetOutBlockErrors sets the value of the leaf OutBlockErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutBlockErrors(v uint64) {
	t.OutBlockErrors = &v
}

// SetOutCrcErrors sets the value of the leaf OutCrcErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutCrcErrors(v uint64) {
	t.OutCrcErrors = &v
}

// SetOutMacControlFrames sets the value of the leaf OutMacControlFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutMacControlFrames(v uint64) {
	t.OutMacControlFrames = &v
}

// SetOutMacErrorsTx sets the value of the leaf OutMacErrorsTx in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutMacErrorsTx(v uint64) {
	t.OutMacErrorsTx = &v
}

// SetOutMacPauseFrames sets the value of the leaf OutMacPauseFrames in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutMacPauseFrames(v uint64) {
	t.OutMacPauseFrames = &v
}

// SetOutPcsBipErrors sets the value of the leaf OutPcsBipErrors in the TerminalDevice_Channel_Ethernet
// struct.
func (t *TerminalDevice_Channel_Ethernet) SetOutPcsBipErrors(v uint64) {
	t.OutPcsBipErrors = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlsDelay == nil {
		var v uint32 = 0
		t.AlsDelay = &v
	}
	if t.ClientAls == 0 {
		t.ClientAls = Ethernet_ClientAls_ETHERNET
	}
	t.Esnr.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.QValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet.
func (*TerminalDevice_Channel_Ethernet) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Esnr represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Esnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Ethernet_Esnr
// struct.
func (t *TerminalDevice_Channel_Ethernet_Esnr) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Esnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Esnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Esnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Esnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Esnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Esnr.
func (*TerminalDevice_Channel_Ethernet_Esnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp struct {
	Counters *TerminalDevice_Channel_Ethernet_Lldp_Counters            `path:"state/counters" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Enabled  *bool                                                     `path:"state/enabled" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/enabled" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Neighbor map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor `path:"neighbors/neighbor" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Snooping *bool                                                     `path:"state/snooping" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/snooping" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// TerminalDevice_Channel_Ethernet_Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel_Ethernet_Lldp) NewNeighbor(Id string) (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &TerminalDevice_Channel_Ethernet_Lldp_Neighbor{
		Id: &Id,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the TerminalDevice_Channel_Ethernet_Lldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Id = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetOrCreateNeighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor {

	key := Id

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of TerminalDevice_Channel_Ethernet_Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetNeighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel_Ethernet_Lldp) DeleteNeighbor(Id string) {
	key := Id

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct to the
// list Neighbor of TerminalDevice_Channel_Ethernet_Lldp. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel_Ethernet_Lldp) AppendNeighbor(v *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetOrCreateCounters() *TerminalDevice_Channel_Ethernet_Lldp_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &TerminalDevice_Channel_Ethernet_Lldp_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from TerminalDevice_Channel_Ethernet_Lldp. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetCounters() *TerminalDevice_Channel_Ethernet_Lldp_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the TerminalDevice_Channel_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetSnooping retrieves the value of the leaf Snooping from the TerminalDevice_Channel_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snooping is set, it can
// safely use t.GetSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snooping == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetSnooping() bool {
	if t == nil || t.Snooping == nil {
		return false
	}
	return *t.Snooping
}

// SetEnabled sets the value of the leaf Enabled in the TerminalDevice_Channel_Ethernet_Lldp
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp) SetEnabled(v bool) {
	t.Enabled = &v
}

// SetSnooping sets the value of the leaf Snooping in the TerminalDevice_Channel_Ethernet_Lldp
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp) SetSnooping(v bool) {
	t.Snooping = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	if t.Snooping == nil {
		var v bool = false
		t.Snooping = &v
	}
	t.Counters.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp.
func (*TerminalDevice_Channel_Ethernet_Lldp) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters struct {
	FrameDiscard  *uint64 `path:"frame-discard" module:"openconfig-terminal-device"`
	FrameErrorIn  *uint64 `path:"frame-error-in" module:"openconfig-terminal-device"`
	FrameErrorOut *uint64 `path:"frame-error-out" module:"openconfig-terminal-device"`
	FrameIn       *uint64 `path:"frame-in" module:"openconfig-terminal-device"`
	FrameOut      *uint64 `path:"frame-out" module:"openconfig-terminal-device"`
	LastClear     *string `path:"last-clear" module:"openconfig-terminal-device"`
	TlvDiscard    *uint64 `path:"tlv-discard" module:"openconfig-terminal-device"`
	TlvUnknown    *uint64 `path:"tlv-unknown" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameDiscard is set, it can
// safely use t.GetFrameDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameDiscard == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorIn is set, it can
// safely use t.GetFrameErrorIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorIn == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameErrorOut retrieves the value of the leaf FrameErrorOut from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorOut is set, it can
// safely use t.GetFrameErrorOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorOut == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameErrorOut() uint64 {
	if t == nil || t.FrameErrorOut == nil {
		return 0
	}
	return *t.FrameErrorOut
}

// GetFrameIn retrieves the value of the leaf FrameIn from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIn is set, it can
// safely use t.GetFrameIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIn == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameOut is set, it can
// safely use t.GetFrameOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameOut == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvDiscard is set, it can
// safely use t.GetTlvDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvDiscard == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvUnknown is set, it can
// safely use t.GetTlvUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvUnknown == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// SetFrameDiscard sets the value of the leaf FrameDiscard in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetFrameDiscard(v uint64) {
	t.FrameDiscard = &v
}

// SetFrameErrorIn sets the value of the leaf FrameErrorIn in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetFrameErrorIn(v uint64) {
	t.FrameErrorIn = &v
}

// SetFrameErrorOut sets the value of the leaf FrameErrorOut in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetFrameErrorOut(v uint64) {
	t.FrameErrorOut = &v
}

// SetFrameIn sets the value of the leaf FrameIn in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetFrameIn(v uint64) {
	t.FrameIn = &v
}

// SetFrameOut sets the value of the leaf FrameOut in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetFrameOut(v uint64) {
	t.FrameOut = &v
}

// SetLastClear sets the value of the leaf LastClear in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetLastClear(v string) {
	t.LastClear = &v
}

// SetTlvDiscard sets the value of the leaf TlvDiscard in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetTlvDiscard(v uint64) {
	t.TlvDiscard = &v
}

// SetTlvUnknown sets the value of the leaf TlvUnknown in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) SetTlvUnknown(v uint64) {
	t.TlvUnknown = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Counters.
func (*TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct {
	Age                   *uint64                                                                                                      `path:"state/age" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ChassisId             *string                                                                                                      `path:"state/chassis-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ChassisIdType         E_LldpTypes_ChassisIdType                                                                                    `path:"state/chassis-id-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Id                    *string                                                                                                      `path:"state/id|id" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"id" shadow-module:"openconfig-terminal-device"`
	LastUpdate            *int64                                                                                                       `path:"state/last-update" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ManagementAddress     *string                                                                                                      `path:"state/management-address" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ManagementAddressType *string                                                                                                      `path:"state/management-address-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PortDescription       *string                                                                                                      `path:"state/port-description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PortId                *string                                                                                                      `path:"state/port-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PortIdType            E_LldpTypes_PortIdType                                                                                       `path:"state/port-id-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	SystemDescription     *string                                                                                                      `path:"state/system-description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	SystemName            *string                                                                                                      `path:"state/system-name" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Tlv                   map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv `path:"custom-tlvs/tlv" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Ttl                   *uint16                                                                                                      `path:"state/ttl" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor) IsYANGGoStruct() {}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key represents the key for list Tlv of element /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key struct {
	Type       int32  `path:"type"`
	Oui        string `path:"oui"`
	OuiSubtype string `path:"oui-subtype"`
}

// NewTlv creates a new entry in the Tlv list of the
// TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) NewTlv(Type int32, Oui string, OuiSubtype string) (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv)
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tlv", key)
	}

	t.Tlv[key] = &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv{
		Type:       &Type,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.Tlv[key], nil
}

// RenameTlv renames an entry in the list Tlv within
// the TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) RenameTlv(oldK, newK TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key) error {
	if _, ok := t.Tlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Tlv", newK)
	}

	e, ok := t.Tlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tlv", oldK)
	}
	e.Type = &newK.Type
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.Tlv[newK] = e
	delete(t.Tlv, oldK)
	return nil
}

// GetOrCreateTlv retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetOrCreateTlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv {

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.Tlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTlv(Type, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTlv got unexpected error: %v", err))
	}
	return v
}

// GetTlv retrieves the value with the specified key from
// the Tlv map field of TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetTlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv {

	if t == nil {
		return nil
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.Tlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteTlv deletes the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) DeleteTlv(Type int32, Oui string, OuiSubtype string) {
	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	delete(t.Tlv, key)
}

// AppendTlv appends the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct to the
// list Tlv of TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) AppendTlv(v *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) error {
	if v.Type == nil {
		return fmt.Errorf("invalid nil key for Type")
	}

	if v.Oui == nil {
		return fmt.Errorf("invalid nil key for Oui")
	}

	if v.OuiSubtype == nil {
		return fmt.Errorf("invalid nil key for OuiSubtype")
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       *v.Type,
		Oui:        *v.Oui,
		OuiSubtype: *v.OuiSubtype,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv)
	}

	if _, ok := t.Tlv[key]; ok {
		return fmt.Errorf("duplicate key for list Tlv %v", key)
	}

	t.Tlv[key] = v
	return nil
}

// GetAge retrieves the value of the leaf Age from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetAge() uint64 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisId is set, it can
// safely use t.GetChassisId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisIdType is set, it can
// safely use t.GetChassisIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisIdType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetChassisIdType() E_LldpTypes_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetId retrieves the value of the leaf Id from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastUpdate is set, it can
// safely use t.GetLastUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastUpdate == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetLastUpdate() int64 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddress is set, it can
// safely use t.GetManagementAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddress == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddressType is set, it can
// safely use t.GetManagementAddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddressType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetPortDescription retrieves the value of the leaf PortDescription from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDescription is set, it can
// safely use t.GetPortDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDescription == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdType is set, it can
// safely use t.GetPortIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortIdType() E_LldpTypes_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemDescription is set, it can
// safely use t.GetSystemDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemDescription == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetTtl() uint16 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// SetAge sets the value of the leaf Age in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetAge(v uint64) {
	t.Age = &v
}

// SetChassisId sets the value of the leaf ChassisId in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetChassisId(v string) {
	t.ChassisId = &v
}

// SetChassisIdType sets the value of the leaf ChassisIdType in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetChassisIdType(v E_LldpTypes_ChassisIdType) {
	t.ChassisIdType = v
}

// SetId sets the value of the leaf Id in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetId(v string) {
	t.Id = &v
}

// SetLastUpdate sets the value of the leaf LastUpdate in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetLastUpdate(v int64) {
	t.LastUpdate = &v
}

// SetManagementAddress sets the value of the leaf ManagementAddress in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetManagementAddress(v string) {
	t.ManagementAddress = &v
}

// SetManagementAddressType sets the value of the leaf ManagementAddressType in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetManagementAddressType(v string) {
	t.ManagementAddressType = &v
}

// SetPortDescription sets the value of the leaf PortDescription in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetPortDescription(v string) {
	t.PortDescription = &v
}

// SetPortId sets the value of the leaf PortId in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetPortId(v string) {
	t.PortId = &v
}

// SetPortIdType sets the value of the leaf PortIdType in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetPortIdType(v E_LldpTypes_PortIdType) {
	t.PortIdType = v
}

// SetSystemDescription sets the value of the leaf SystemDescription in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetSystemDescription(v string) {
	t.SystemDescription = &v
}

// SetSystemName sets the value of the leaf SystemName in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetSystemName(v string) {
	t.SystemName = &v
}

// SetTtl sets the value of the leaf Ttl in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) SetTtl(v uint16) {
	t.Ttl = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Tlv {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Neighbor.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct {
	Oui        *string `path:"state/oui|oui" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"oui" shadow-module:"openconfig-terminal-device"`
	OuiSubtype *string `path:"state/oui-subtype|oui-subtype" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"oui-subtype" shadow-module:"openconfig-terminal-device"`
	Type       *int32  `path:"state/type|type" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"type" shadow-module:"openconfig-terminal-device"`
	Value      Binary  `path:"state/value" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) IsYANGGoStruct() {}

// GetOui retrieves the value of the leaf Oui from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oui is set, it can
// safely use t.GetOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oui == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuiSubtype is set, it can
// safely use t.GetOuiSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuiSubtype == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// GetType retrieves the value of the leaf Type from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// SetOui sets the value of the leaf Oui in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) SetOui(v string) {
	t.Oui = &v
}

// SetOuiSubtype sets the value of the leaf OuiSubtype in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) SetOuiSubtype(v string) {
	t.OuiSubtype = &v
}

// SetType sets the value of the leaf Type in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) SetType(v int32) {
	t.Type = &v
}

// SetValue sets the value of the leaf Value in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) SetValue(v Binary) {
	t.Value = v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	if t.Type == nil {
		return nil, fmt.Errorf("nil value for key Type")
	}

	return map[string]interface{}{
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
		"type":        *t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_PostFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Ethernet_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_PostFecBer.
func (*TerminalDevice_Channel_Ethernet_PostFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_PreFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Ethernet_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_PreFecBer.
func (*TerminalDevice_Channel_Ethernet_PreFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_QValue represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_QValue) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Ethernet_QValue
// struct.
func (t *TerminalDevice_Channel_Ethernet_QValue) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_QValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_QValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_QValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_QValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_QValue.
func (*TerminalDevice_Channel_Ethernet_QValue) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ingress represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_Ingress struct {
	Interface       *string  `path:"state/interface" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/interface" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	PhysicalChannel []uint16 `path:"state/physical-channel" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/physical-channel" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	Transceiver     *string  `path:"state/transceiver" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/transceiver" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ingress) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PhysicalChannel is set, it can
// safely use t.GetPhysicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PhysicalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTransceiver retrieves the value of the leaf Transceiver from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transceiver is set, it can
// safely use t.GetTransceiver() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transceiver == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// SetInterface sets the value of the leaf Interface in the TerminalDevice_Channel_Ingress
// struct.
func (t *TerminalDevice_Channel_Ingress) SetInterface(v string) {
	t.Interface = &v
}

// SetPhysicalChannel sets the value of the leaf PhysicalChannel in the TerminalDevice_Channel_Ingress
// struct.
func (t *TerminalDevice_Channel_Ingress) SetPhysicalChannel(v []uint16) {
	t.PhysicalChannel = v
}

// SetTransceiver sets the value of the leaf Transceiver in the TerminalDevice_Channel_Ingress
// struct.
func (t *TerminalDevice_Channel_Ingress) SetTransceiver(v string) {
	t.Transceiver = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ingress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ingress.
func (*TerminalDevice_Channel_Ingress) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_Otn struct {
	BackgroundBlockErrors    *uint64                                     `path:"state/background-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	CodeViolations           *uint64                                     `path:"state/code-violations" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ErroredBlocks            *uint64                                     `path:"state/errored-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ErroredSeconds           *uint64                                     `path:"state/errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	Esnr                     *TerminalDevice_Channel_Otn_Esnr            `path:"state/esnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	FecCorrectedBits         *uint64                                     `path:"state/fec-corrected-bits" module:"openconfig-terminal-device/openconfig-terminal-device"`
	FecCorrectedBytes        *uint64                                     `path:"state/fec-corrected-bytes" module:"openconfig-terminal-device/openconfig-terminal-device"`
	FecUncorrectableBlocks   *uint64                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	FecUncorrectableWords    *uint64                                     `path:"state/fec-uncorrectable-words" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PostFecBer               *TerminalDevice_Channel_Otn_PostFecBer      `path:"state/post-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	PreFecBer                *TerminalDevice_Channel_Otn_PreFecBer       `path:"state/pre-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	QValue                   *TerminalDevice_Channel_Otn_QValue          `path:"state/q-value" module:"openconfig-terminal-device/openconfig-terminal-device"`
	RdiMsg                   *string                                     `path:"state/rdi-msg" module:"openconfig-terminal-device/openconfig-terminal-device"`
	SeverelyErroredSeconds   *uint64                                     `path:"state/severely-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	TributarySlotGranularity E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY `path:"state/tributary-slot-granularity" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/tributary-slot-granularity" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TtiMsgAuto               *bool                                       `path:"state/tti-msg-auto" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/tti-msg-auto" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TtiMsgExpected           *string                                     `path:"state/tti-msg-expected" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/tti-msg-expected" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	TtiMsgRecv               *string                                     `path:"state/tti-msg-recv" module:"openconfig-terminal-device/openconfig-terminal-device"`
	TtiMsgTransmit           *string                                     `path:"state/tti-msg-transmit" module:"openconfig-terminal-device/openconfig-terminal-device" shadow-path:"config/tti-msg-transmit" shadow-module:"openconfig-terminal-device/openconfig-terminal-device"`
	UnavailableSeconds       *uint64                                     `path:"state/unavailable-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn) IsYANGGoStruct() {}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreateEsnr() *TerminalDevice_Channel_Otn_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &TerminalDevice_Channel_Otn_Esnr{}
	return t.Esnr
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreatePostFecBer() *TerminalDevice_Channel_Otn_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &TerminalDevice_Channel_Otn_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreatePreFecBer() *TerminalDevice_Channel_Otn_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &TerminalDevice_Channel_Otn_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreateQValue() *TerminalDevice_Channel_Otn_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &TerminalDevice_Channel_Otn_QValue{}
	return t.QValue
}

// GetEsnr returns the value of the Esnr struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetEsnr() *TerminalDevice_Channel_Otn_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetPostFecBer() *TerminalDevice_Channel_Otn_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetPreFecBer() *TerminalDevice_Channel_Otn_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetQValue() *TerminalDevice_Channel_Otn_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetBackgroundBlockErrors retrieves the value of the leaf BackgroundBlockErrors from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackgroundBlockErrors is set, it can
// safely use t.GetBackgroundBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackgroundBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetBackgroundBlockErrors() uint64 {
	if t == nil || t.BackgroundBlockErrors == nil {
		return 0
	}
	return *t.BackgroundBlockErrors
}

// GetCodeViolations retrieves the value of the leaf CodeViolations from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CodeViolations is set, it can
// safely use t.GetCodeViolations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CodeViolations == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetCodeViolations() uint64 {
	if t == nil || t.CodeViolations == nil {
		return 0
	}
	return *t.CodeViolations
}

// GetErroredBlocks retrieves the value of the leaf ErroredBlocks from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErroredBlocks is set, it can
// safely use t.GetErroredBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErroredBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetErroredBlocks() uint64 {
	if t == nil || t.ErroredBlocks == nil {
		return 0
	}
	return *t.ErroredBlocks
}

// GetErroredSeconds retrieves the value of the leaf ErroredSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErroredSeconds is set, it can
// safely use t.GetErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetErroredSeconds() uint64 {
	if t == nil || t.ErroredSeconds == nil {
		return 0
	}
	return *t.ErroredSeconds
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBits is set, it can
// safely use t.GetFecCorrectedBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBits == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBytes is set, it can
// safely use t.GetFecCorrectedBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBytes == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableWords is set, it can
// safely use t.GetFecUncorrectableWords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableWords == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetRdiMsg retrieves the value of the leaf RdiMsg from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdiMsg is set, it can
// safely use t.GetRdiMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdiMsg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetRdiMsg() string {
	if t == nil || t.RdiMsg == nil {
		return ""
	}
	return *t.RdiMsg
}

// GetSeverelyErroredSeconds retrieves the value of the leaf SeverelyErroredSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeverelyErroredSeconds is set, it can
// safely use t.GetSeverelyErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeverelyErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetSeverelyErroredSeconds() uint64 {
	if t == nil || t.SeverelyErroredSeconds == nil {
		return 0
	}
	return *t.SeverelyErroredSeconds
}

// GetTributarySlotGranularity retrieves the value of the leaf TributarySlotGranularity from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TributarySlotGranularity is set, it can
// safely use t.GetTributarySlotGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TributarySlotGranularity == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTributarySlotGranularity() E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY {
	if t == nil || t.TributarySlotGranularity == 0 {
		return 0
	}
	return t.TributarySlotGranularity
}

// GetTtiMsgAuto retrieves the value of the leaf TtiMsgAuto from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgAuto is set, it can
// safely use t.GetTtiMsgAuto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgAuto == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgAuto() bool {
	if t == nil || t.TtiMsgAuto == nil {
		return false
	}
	return *t.TtiMsgAuto
}

// GetTtiMsgExpected retrieves the value of the leaf TtiMsgExpected from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgExpected is set, it can
// safely use t.GetTtiMsgExpected() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgExpected == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgExpected() string {
	if t == nil || t.TtiMsgExpected == nil {
		return ""
	}
	return *t.TtiMsgExpected
}

// GetTtiMsgRecv retrieves the value of the leaf TtiMsgRecv from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgRecv is set, it can
// safely use t.GetTtiMsgRecv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgRecv == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgRecv() string {
	if t == nil || t.TtiMsgRecv == nil {
		return ""
	}
	return *t.TtiMsgRecv
}

// GetTtiMsgTransmit retrieves the value of the leaf TtiMsgTransmit from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgTransmit is set, it can
// safely use t.GetTtiMsgTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgTransmit == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgTransmit() string {
	if t == nil || t.TtiMsgTransmit == nil {
		return ""
	}
	return *t.TtiMsgTransmit
}

// GetUnavailableSeconds retrieves the value of the leaf UnavailableSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnavailableSeconds is set, it can
// safely use t.GetUnavailableSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnavailableSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetUnavailableSeconds() uint64 {
	if t == nil || t.UnavailableSeconds == nil {
		return 0
	}
	return *t.UnavailableSeconds
}

// SetBackgroundBlockErrors sets the value of the leaf BackgroundBlockErrors in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetBackgroundBlockErrors(v uint64) {
	t.BackgroundBlockErrors = &v
}

// SetCodeViolations sets the value of the leaf CodeViolations in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetCodeViolations(v uint64) {
	t.CodeViolations = &v
}

// SetErroredBlocks sets the value of the leaf ErroredBlocks in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetErroredBlocks(v uint64) {
	t.ErroredBlocks = &v
}

// SetErroredSeconds sets the value of the leaf ErroredSeconds in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetErroredSeconds(v uint64) {
	t.ErroredSeconds = &v
}

// SetFecCorrectedBits sets the value of the leaf FecCorrectedBits in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetFecCorrectedBits(v uint64) {
	t.FecCorrectedBits = &v
}

// SetFecCorrectedBytes sets the value of the leaf FecCorrectedBytes in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetFecCorrectedBytes(v uint64) {
	t.FecCorrectedBytes = &v
}

// SetFecUncorrectableBlocks sets the value of the leaf FecUncorrectableBlocks in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetFecUncorrectableBlocks(v uint64) {
	t.FecUncorrectableBlocks = &v
}

// SetFecUncorrectableWords sets the value of the leaf FecUncorrectableWords in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetFecUncorrectableWords(v uint64) {
	t.FecUncorrectableWords = &v
}

// SetRdiMsg sets the value of the leaf RdiMsg in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetRdiMsg(v string) {
	t.RdiMsg = &v
}

// SetSeverelyErroredSeconds sets the value of the leaf SeverelyErroredSeconds in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetSeverelyErroredSeconds(v uint64) {
	t.SeverelyErroredSeconds = &v
}

// SetTributarySlotGranularity sets the value of the leaf TributarySlotGranularity in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetTributarySlotGranularity(v E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY) {
	t.TributarySlotGranularity = v
}

// SetTtiMsgAuto sets the value of the leaf TtiMsgAuto in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetTtiMsgAuto(v bool) {
	t.TtiMsgAuto = &v
}

// SetTtiMsgExpected sets the value of the leaf TtiMsgExpected in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetTtiMsgExpected(v string) {
	t.TtiMsgExpected = &v
}

// SetTtiMsgRecv sets the value of the leaf TtiMsgRecv in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetTtiMsgRecv(v string) {
	t.TtiMsgRecv = &v
}

// SetTtiMsgTransmit sets the value of the leaf TtiMsgTransmit in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetTtiMsgTransmit(v string) {
	t.TtiMsgTransmit = &v
}

// SetUnavailableSeconds sets the value of the leaf UnavailableSeconds in the TerminalDevice_Channel_Otn
// struct.
func (t *TerminalDevice_Channel_Otn) SetUnavailableSeconds(v uint64) {
	t.UnavailableSeconds = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Esnr.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.QValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn.
func (*TerminalDevice_Channel_Otn) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_Esnr represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_Esnr struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_Esnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Otn_Esnr
// struct.
func (t *TerminalDevice_Channel_Otn_Esnr) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_Esnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_Esnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_Esnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_Esnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_Esnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_Esnr.
func (*TerminalDevice_Channel_Otn_Esnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_PostFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Otn_PostFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PostFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_PostFecBer.
func (*TerminalDevice_Channel_Otn_PostFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_PreFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Otn_PreFecBer
// struct.
func (t *TerminalDevice_Channel_Otn_PreFecBer) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_PreFecBer.
func (*TerminalDevice_Channel_Otn_PreFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_QValue represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValue struct {
	Avg      *float64 `path:"avg" module:"openconfig-terminal-device"`
	Instant  *float64 `path:"instant" module:"openconfig-terminal-device"`
	Interval *uint64  `path:"interval" module:"openconfig-terminal-device"`
	Max      *float64 `path:"max" module:"openconfig-terminal-device"`
	MaxTime  *uint64  `path:"max-time" module:"openconfig-terminal-device"`
	Min      *float64 `path:"min" module:"openconfig-terminal-device"`
	MinTime  *uint64  `path:"min-time" module:"openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_QValue) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// SetAvg sets the value of the leaf Avg in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetAvg(v float64) {
	t.Avg = &v
}

// SetInstant sets the value of the leaf Instant in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetInstant(v float64) {
	t.Instant = &v
}

// SetInterval sets the value of the leaf Interval in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetInterval(v uint64) {
	t.Interval = &v
}

// SetMax sets the value of the leaf Max in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetMax(v float64) {
	t.Max = &v
}

// SetMaxTime sets the value of the leaf MaxTime in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetMaxTime(v uint64) {
	t.MaxTime = &v
}

// SetMin sets the value of the leaf Min in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetMin(v float64) {
	t.Min = &v
}

// SetMinTime sets the value of the leaf MinTime in the TerminalDevice_Channel_Otn_QValue
// struct.
func (t *TerminalDevice_Channel_Otn_QValue) SetMinTime(v uint64) {
	t.MinTime = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_QValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_QValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_QValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_QValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_QValue.
func (*TerminalDevice_Channel_Otn_QValue) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Mode represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_Mode struct {
	Description *string `path:"state/description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ModeId      *uint16 `path:"state/mode-id|mode-id" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device" shadow-path:"mode-id" shadow-module:"openconfig-terminal-device"`
	VendorId    *string `path:"state/vendor-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
}

// IsYANGGoStruct ensures that TerminalDevice_Mode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Mode) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetModeId retrieves the value of the leaf ModeId from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModeId is set, it can
// safely use t.GetModeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModeId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetModeId() uint16 {
	if t == nil || t.ModeId == nil {
		return 0
	}
	return *t.ModeId
}

// GetVendorId retrieves the value of the leaf VendorId from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorId is set, it can
// safely use t.GetVendorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetVendorId() string {
	if t == nil || t.VendorId == nil {
		return ""
	}
	return *t.VendorId
}

// SetDescription sets the value of the leaf Description in the TerminalDevice_Mode
// struct.
func (t *TerminalDevice_Mode) SetDescription(v string) {
	t.Description = &v
}

// SetModeId sets the value of the leaf ModeId in the TerminalDevice_Mode
// struct.
func (t *TerminalDevice_Mode) SetModeId(v uint16) {
	t.ModeId = &v
}

// SetVendorId sets the value of the leaf VendorId in the TerminalDevice_Mode
// struct.
func (t *TerminalDevice_Mode) SetVendorId(v string) {
	t.VendorId = &v
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Mode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Mode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Mode struct, which is a YANG list entry.
func (t *TerminalDevice_Mode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ModeId == nil {
		return nil, fmt.Errorf("nil value for key ModeId")
	}

	return map[string]interface{}{
		"mode-id": *t.ModeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Mode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Mode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Mode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Mode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Mode.
func (*TerminalDevice_Mode) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}
